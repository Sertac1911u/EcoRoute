@using Blazored.LocalStorage
@using EcoRoute.UI.Auth
@using EcoRoute.UI.Services.SettingsServices
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthStateProvider AuthStateProvider
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject SettingsService settingsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

@code {
    [Parameter] public EventCallback OnDataLoaded { get; set; }

    private string username = "";
    private string formattedUserName = "";
    private string avatarUrl = "";
    private bool isUserMenuOpen = false;
    private bool isAvatarLoading = true;
    private bool isDarkMode = false;
    private bool isDataLoaded = false;
}

<header class="flex-shrink-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-700/50 shadow-sm dark:shadow-gray-900/10 sticky top-0 z-40">
    <div class="flex items-center justify-between h-16 px-4 lg:px-6">
        @if (!isDataLoaded)
        {
            <div class="flex items-center justify-between w-full animate-pulse">
                <div class="flex items-center flex-1">
                    <div class="md:hidden w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded-lg"></div>
                </div>

                <div class="flex items-center gap-2 ml-4">
                    <div class="w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded-lg"></div>
                    <div class="flex items-center gap-3 px-3 py-2">
                        <div class="hidden sm:block text-right space-y-1">
                            <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-20"></div>
                            <div class="h-3 bg-gray-300 dark:bg-gray-600 rounded w-16"></div>
                        </div>
                        <div class="w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
                        <div class="w-3 h-3 bg-gray-300 dark:bg-gray-600 rounded"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="flex items-center flex-1">
                <button type="button"
                        class="md:hidden relative group p-2 text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-all duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800"
                        id="mobile-menu-button">
                    <div class="relative">
                        <i class="fas fa-bars text-lg transition-transform duration-200 group-hover:scale-110"></i>
                        <span class="absolute -inset-1 rounded-lg bg-primary-400 opacity-0 group-hover:opacity-20 blur transition-all duration-200"></span>
                    </div>
                </button>
            </div>

            <div class="flex items-center gap-2 ml-4">
                <div class="relative">
                    <NotificationMenu />
                </div>

                <div class="relative ml-2">
                    <button type="button"
                            class="flex items-center gap-3 px-3 py-2 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 group"
                            id="user-menu-button"
                            @onclick="ToggleUserMenu">

                        <div class="hidden sm:block text-right">
                            <p class="text-sm font-medium text-gray-700 dark:text-gray-200 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-200">
                                @formattedUserName
                            </p>
                            <p class="text-xs text-gray-500 dark:text-gray-400">
                                @GetUserRole()
                            </p>
                        </div>

                        <div class="relative">
                            @if (isAvatarLoading)
                            {
                                <div class="w-10 h-10 rounded-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600 animate-pulse"></div>
                            }
                            else if (!string.IsNullOrEmpty(avatarUrl))
                            {
                                <div class="relative group/avatar">
                                    <img src="@avatarUrl"
                                         alt="@formattedUserName"
                                         class="w-10 h-10 rounded-full object-cover ring-2 ring-white dark:ring-gray-800 shadow-sm transition-all duration-300 group-hover:ring-primary-500 dark:group-hover:ring-primary-400 group-hover:shadow-md">
                                    <div class="absolute inset-0 rounded-full bg-gradient-to-br from-primary-500/0 to-secondary-500/0 group-hover/avatar:from-primary-500/20 group-hover/avatar:to-secondary-500/20 transition-all duration-300"></div>
                                </div>
                            }
                            else
                            {
                                <div class="relative group/avatar">
                                    <div class="w-10 h-10 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center shadow-sm transition-all duration-300 group-hover:from-primary-500 group-hover:to-primary-700 group-hover:shadow-md">
                                        <span class="text-white font-bold text-sm">
                                            @(!string.IsNullOrEmpty(formattedUserName) && formattedUserName.Length > 0 ? formattedUserName[0].ToString().ToUpper() : "U")
                                        </span>
                                    </div>
                                    <div class="absolute inset-0 rounded-full ring-2 ring-white dark:ring-gray-800 group-hover:ring-primary-500 dark:group-hover:ring-primary-400 transition-all duration-300"></div>
                                </div>
                            }

                            <span class="absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-green-500 ring-2 ring-white dark:ring-gray-800
                                         @(isUserMenuOpen ? "animate-pulse" : "")"></span>
                        </div>

                        <i class="fas fa-chevron-down text-xs text-gray-400 dark:text-gray-500 transition-transform duration-200
                                  @(isUserMenuOpen ? "rotate-180" : "")"></i>
                    </button>

                    @if (isUserMenuOpen)
                    {
                        <div class="absolute right-0 mt-2 w-64 origin-top-right animate-slideDown"
                             @onclick:stopPropagation="true">
                            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                                <div class="bg-gradient-to-br from-primary-50 to-secondary-50 dark:from-gray-700 dark:to-gray-800 px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                                    <div class="flex items-center gap-3">
                                        @if (!string.IsNullOrEmpty(avatarUrl))
                                        {
                                            <img src="@avatarUrl" alt="@formattedUserName" class="w-12 h-12 rounded-full object-cover ring-2 ring-white dark:ring-gray-700">
                                        }
                                        else
                                        {
                                            <div class="w-12 h-12 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center ring-2 ring-white dark:ring-gray-700">
                                                <span class="text-white font-bold">
                                                    @(!string.IsNullOrEmpty(formattedUserName) && formattedUserName.Length > 0 ? formattedUserName[0].ToString().ToUpper() : "U")
                                                </span>
                                            </div>
                                        }
                                        <div class="flex-1 min-w-0">
                                            <p class="text-sm font-semibold text-gray-900 dark:text-white truncate">@formattedUserName</p>
                                            <p class="text-xs text-gray-600 dark:text-gray-400 truncate">@GetUserEmail()</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="py-1">
                                    <a href="/settings"
                                       class="flex items-center gap-3 px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-all duration-200 group">
                                        <div class="flex items-center justify-center w-8 h-8 rounded-lg bg-gray-100 dark:bg-gray-700 group-hover:bg-primary-100 dark:group-hover:bg-primary-900/20 transition-colors duration-200">
                                            <i class="fas fa-cog text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-200"></i>
                                        </div>
                                        <span class="font-medium group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-200">Ayarlar</span>
                                    </a>

                                    <div class="my-1 border-t border-gray-200 dark:border-gray-700"></div>

                                    <button @onclick="Logout"
                                            class="w-full flex items-center gap-3 px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-red-50 dark:hover:bg-red-900/10 transition-all duration-200 group">
                                        <div class="flex items-center justify-center w-8 h-8 rounded-lg bg-gray-100 dark:bg-gray-700 group-hover:bg-red-100 dark:group-hover:bg-red-900/20 transition-colors duration-200">
                                            <i class="fas fa-sign-out-alt text-gray-500 dark:text-gray-400 group-hover:text-red-600 dark:group-hover:text-red-400 transition-colors duration-200"></i>
                                        </div>
                                        <span class="font-medium group-hover:text-red-600 dark:group-hover:text-red-400 transition-colors duration-200">Çıkış Yap</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</header>

@if (isUserMenuOpen)
{
    <div class="fixed inset-0 z-30" @onclick="CloseUserMenu"></div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserData();
            isDataLoaded = true;
            await OnDataLoaded.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"TopBar initialization error: {ex.Message}");
            isDataLoaded = true;
            await OnDataLoaded.InvokeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserData();
            StateHasChanged();
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            username = user.Identity?.IsAuthenticated == true
                ? user.FindFirst("Username")?.Value ?? user.Identity.Name
                : "Anonim";

            if (!string.IsNullOrEmpty(username))
            {
                formattedUserName = char.ToUpper(username[0]) + username.Substring(1);
            }

            await LoadDarkMode();
            await LoadAvatarFromSettings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Kullanıcı bilgileri yüklenirken hata oluştu: {ex.Message}");
        }
    }

    private string GetUserEmail()
    {
        return $"{username.ToLower()}@ecoroute.com";
    }

    private string GetUserRole()
    {
        return "Yönetici";
    }

    private async Task LoadDarkMode()
    {
        var darkModeStr = await localStorage.GetItemAsync<string>("darkMode");
        isDarkMode = darkModeStr?.ToLower() == "true";
        await JS.InvokeVoidAsync("eval", $"document.documentElement.classList.{(isDarkMode ? "add" : "remove")}('dark')");
    }

    private async Task LoadAvatarFromSettings()
    {
        isAvatarLoading = true;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var storedUserId = await localStorage.GetItemAsync<string>("currentUserId");

            if (string.IsNullOrEmpty(storedUserId) || storedUserId != currentUserId || string.IsNullOrEmpty(avatarUrl))
            {
                var settingsDto = await settingsService.GetSettingsAsync();
                if (settingsDto != null && !string.IsNullOrEmpty(settingsDto.AvatarUrl))
                {
                    avatarUrl = settingsDto.AvatarUrl;
                    await localStorage.SetItemAsync("avatarUrl", avatarUrl);
                    await localStorage.SetItemAsync("currentUserId", currentUserId);
                }
                else
                {
                    avatarUrl = "https://api.dicebear.com/9.x/shapes/svg?seed=TEST";
                    await localStorage.SetItemAsync("avatarUrl", avatarUrl);
                }
            }
            else
            {
                avatarUrl = await localStorage.GetItemAsync<string>("avatarUrl");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Avatar yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            isAvatarLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    private void CloseUserMenu()
    {
        isUserMenuOpen = false;
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        await localStorage.RemoveItemAsync("avatarUrl");
        await localStorage.RemoveItemAsync("darkMode");
        await localStorage.RemoveItemAsync("currentUserId");

        AuthStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/login", true);
    }
}

<style>
    @@keyframes slideDown {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .animate-slideDown {
        animation: slideDown 0.2s ease-out;
    }

    .custom-scrollbar::-webkit-scrollbar {
        width: 4px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: transparent;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background-color: rgba(156, 163, 175, 0.5);
        border-radius: 2px;
    }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background-color: rgba(156, 163, 175, 0.8);
        }

    .group:hover .group-hover\:scale-110 {
        transform: scale(1.1);
    }

    .gradient-text {
        background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
</style>