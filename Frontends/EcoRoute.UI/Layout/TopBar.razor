@using Blazored.LocalStorage
@using EcoRoute.UI.Auth
@using EcoRoute.UI.Services.SettingsServices
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthStateProvider AuthStateProvider
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject SettingsService settingsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<header class="flex-shrink-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between h-16 px-6">
        <!-- Mobile menu button -->
        <div class="flex items-center">
            <button type="button" class="md:hidden text-gray-500 dark:text-gray-300 hover:text-gray-700 focus:outline-none focus:text-gray-700" id="mobile-menu-button">
                <i class="fas fa-bars"></i>
            </button>
        </div>

        <!-- Search bar -->
        <div class="flex-1 mx-4">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400 dark:text-gray-500"></i>
                </div>
                <input type="search" class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 dark:text-white transition duration-150 ease-in-out" placeholder="Ara...">
            </div>
        </div>

        <!-- User dropdown and darkmode toggle -->
        <div class="flex items-center">
           @*  <button @onclick="ToggleDarkMode" class="p-2 rounded-md text-gray-500 dark:text-gray-300 dark:hover:text-white hover:text-gray-700 focus:outline-none">
                <i class="fas fa-moon dark:hidden"></i>
                <i class="fas fa-sun hidden dark:inline"></i>
            </button> *@
            <NotificationMenu />

            <div class="relative ml-3">
                <div>
                    <button type="button" class="flex items-center text-md" id="user-menu-button" @onclick="ToggleUserMenu">
                        <span class="mr-2 text-gray-700 dark:text-gray-300">@formattedUserName</span>
                        @if (isAvatarLoading)
                        {
                            <div class="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
                        }
                        else if (!string.IsNullOrEmpty(avatarUrl))
                        {
                            <img src="@avatarUrl" alt="@formattedUserName" class="w-8 h-8 rounded-full object-cover border border-gray-200 dark:border-gray-700">
                        }
                        else
                        {
                            <i class="fas fa-user-circle text-gray-500 dark:text-gray-300 text-3xl"></i>
                        }
                    </button>
                </div>
                <div class="@(isUserMenuOpen ? "" : "hidden") origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-10" id="user-dropdown">
                    <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Profilim</a>
                    <a href="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Ayarlar</a>
                    <button @onclick="Logout" class="w-full text-left block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">
                        Çıkış Yap
                    </button>
                </div>
            </div>
        </div>
    </div>
</header>


<style>
    input[type="search"]::-webkit-search-cancel-button {
    appearance: none;
    height: 1em;
    width: 1em;
    background: url("data:image/svg+xml,%3Csvg fill='%232ba86d' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M18.3 5.71a1 1 0 0 0-1.41 0L12 10.59 7.11 5.7a1 1 0 1 0-1.41 1.41L10.59 12l-4.89 4.89a1 1 0 1 0 1.41 1.41L12 13.41l4.89 4.89a1 1 0 0 0 1.41-1.41L13.41 12l4.89-4.89a1 1 0 0 0 0-1.4z'/%3E%3C/svg%3E") no-repeat center center;
    background-size: 1em;
    cursor: pointer;
    }
</style>

@code {
    private string username = "";
    private string formattedUserName = "";
    private string avatarUrl = "";
    private bool isUserMenuOpen = false;
    private bool isAvatarLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Periyodik olarak kullanıcı verilerini güncelleyelim
            await LoadUserData();
            StateHasChanged();
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            // Kullanıcı bilgilerini al
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Kullanıcı adını al ve ilk harfi büyüt
            username = user.Identity?.IsAuthenticated == true
                ? user.FindFirst("Username")?.Value ?? user.Identity.Name
                : "Anonim";

            // İlk harfi büyüt
            if (!string.IsNullOrEmpty(username))
            {
                formattedUserName = char.ToUpper(username[0]) + username.Substring(1);
            }

            // Dark mode ayarlarını uygula
            await ApplyDarkMode();

            // Force refresh of avatar from settings service rather than just local storage
            await LoadAvatarFromSettings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Kullanıcı bilgileri yüklenirken hata oluştu: {ex.Message}");
        }
    }
    private async Task LoadAvatar()
    {
        // Avatar URL'ini localStorage'dan al
        avatarUrl = await localStorage.GetItemAsync<string>("avatarUrl");
        StateHasChanged();
    }
    private async Task LoadAvatarFromSettings()
    {
        isAvatarLoading = true;

        try
        {
            // Get current user ID
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            // Get stored user ID from localStorage
            var storedUserId = await localStorage.GetItemAsync<string>("currentUserId");

            // If user IDs don't match or avatar isn't set, refresh from settings
            if (string.IsNullOrEmpty(storedUserId) || storedUserId != currentUserId || string.IsNullOrEmpty(avatarUrl))
            {
                // Inject SettingsService at the top of the file if not already there
                // @inject SettingsService settingsService

                var settingsDto = await settingsService.GetSettingsAsync();
                if (settingsDto != null && !string.IsNullOrEmpty(settingsDto.AvatarUrl))
                {
                    avatarUrl = settingsDto.AvatarUrl;
                    await localStorage.SetItemAsync("avatarUrl", avatarUrl);
                    await localStorage.SetItemAsync("currentUserId", currentUserId);
                }
                else
                {
                    // Default avatar if settings not found
                    avatarUrl = "https://api.dicebear.com/9.x/adventurer/svg?seed=Easton";
                    await localStorage.SetItemAsync("avatarUrl", avatarUrl);
                }
            }
            else
            {
                // Get avatar URL from localStorage as fallback
                avatarUrl = await localStorage.GetItemAsync<string>("avatarUrl");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Avatar yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            isAvatarLoading = false;
            StateHasChanged();

        }
    }

    private async Task ApplyDarkMode()
    {
        try
        {
            // LocalStorage'dan dark mode ayarını al
            var darkModeStr = await localStorage.GetItemAsync<string>("darkMode");

            // Dark mode ayarını uygula (string "true" ise true, değilse false)
            bool isDarkMode = darkModeStr?.ToLower() == "true";

            // Document root'a dark class'ını ekle veya kaldır
            await JS.InvokeVoidAsync("eval", $"document.documentElement.classList.{(isDarkMode ? "add" : "remove")}('dark')");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dark mode uygulanırken hata oluştu: {ex.Message}");
        }
    }

    private async Task ToggleDarkMode()
    {
        try
        {
            // Mevcut dark mode ayarını al
            var darkModeStr = await localStorage.GetItemAsync<string>("darkMode");
            bool isDarkMode = darkModeStr?.ToLower() == "true";

            // Tersine çevir
            isDarkMode = !isDarkMode;

            // LocalStorage'a kaydet
            await localStorage.SetItemAsync("darkMode", isDarkMode.ToString().ToLower());

            // UI'ı güncelle
            await JS.InvokeVoidAsync("eval", $"document.documentElement.classList.{(isDarkMode ? "add" : "remove")}('dark')");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dark mode değiştirilirken hata oluştu: {ex.Message}");
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    private async Task Logout()
    {
        // Clear all user-specific items from localStorage
        await localStorage.RemoveItemAsync("authToken");
        await localStorage.RemoveItemAsync("avatarUrl");
        await localStorage.RemoveItemAsync("darkMode");
        await localStorage.RemoveItemAsync("currentUserId");

        AuthStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/login", true);
    }
}