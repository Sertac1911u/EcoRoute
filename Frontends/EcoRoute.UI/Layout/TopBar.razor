@using Blazored.LocalStorage
@using EcoRoute.UI.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthStateProvider AuthStateProvider
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<header class="flex-shrink-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between h-16 px-6">
        <!-- Mobile menu button -->
        <div class="flex items-center">
            <button type="button" class="md:hidden text-gray-500 dark:text-gray-300 hover:text-gray-700 focus:outline-none focus:text-gray-700" id="mobile-menu-button">
                <i class="fas fa-bars"></i>
            </button>
        </div>

        <!-- Search bar -->
        <div class="flex-1 mx-4">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400 dark:text-gray-500"></i>
                </div>
                <input type="search" class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 dark:text-white transition duration-150 ease-in-out" placeholder="Ara...">
            </div>
        </div>

        <!-- User dropdown and darkmode toggle -->
        <div class="flex items-center">
            <button id="darkModeToggle" class="p-2 rounded-md text-gray-500 dark:text-gray-300 dark:hover:text-white hover:text-gray-700 focus:outline-none">
                <i class="fas fa-moon dark:hidden"></i>
                <i class="fas fa-sun hidden dark:inline"></i>
            </button>
            <button class="p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white focus:outline-none">
                <i class="fas fa-bell"></i>
            </button>
            <div class="relative ml-3">
                <div>
                    <button type="button" class="flex items-center text-md" id="user-menu-button">
                        <span class="mr-2 text-gray-700 dark:text-gray-300">@formattedUserName</span> <!-- Username burada gösterilecek -->
                        <i class="fas fa-user-circle text-gray-500 dark:text-gray-300 text-3xl"></i>
                    </button>
                </div>
                <div class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-10" id="user-dropdown">
                    <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Profilim</a>
                    <a href="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Ayarlar</a>
                    <button @onclick="Logout" class="w-full text-left block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">
                        Çıkış Yap
                    </button>
                </div>
            </div>
        </div>
    </div>
</header>
<style>
    input[type="search"]::-webkit-search-cancel-button {
        appearance: none;
        height: 1em;
        width: 1em;
        background: url("data:image/svg+xml,%3Csvg fill='%232ba86d' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M18.3 5.71a1 1 0 0 0-1.41 0L12 10.59 7.11 5.7a1 1 0 1 0-1.41 1.41L10.59 12l-4.89 4.89a1 1 0 1 0 1.41 1.41L12 13.41l4.89 4.89a1 1 0 0 0 1.41-1.41L13.41 12l4.89-4.89a1 1 0 0 0 0-1.4z'/%3E%3C/svg%3E") no-repeat center center;
        background-size: 1em;
        cursor: pointer;
    }
</style>
<script>
    // Toggle user dropdown
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');

    userMenuButton.addEventListener('click', () => {
        userDropdown.classList.toggle('hidden');
    });

    // Close the dropdown when clicking outside
    document.addEventListener('click', (event) => {
        if (!userMenuButton.contains(event.target) && !userDropdown.contains(event.target)) {
            userDropdown.classList.add('hidden');
        }
    });

    // Toggle dark mode
    const darkModeToggle = document.getElementById('darkModeToggle');

    darkModeToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('dark');
        localStorage.setItem('darkMode', document.documentElement.classList.contains('dark'));
    });

    // Check for saved dark mode preference
    if (localStorage.getItem('darkMode') === 'true' ||
        window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.documentElement.classList.add('dark');
    }

    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');

    mobileMenuButton.addEventListener('click', () => {
        const sidebar = document.querySelector('.md\\:flex-shrink-0');
        sidebar.classList.toggle('hidden');
        sidebar.classList.toggle('block');
    });
</script>

@code {
    private string username = "";
    private string formattedUserName = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get username and capitalize first letter
        username = user.Identity?.IsAuthenticated == true
            ? user.FindFirst("Username")?.Value ?? user.Identity.Name
            : "Anonim";

        // Capitalize the first letter of the username
        formattedUserName = char.ToUpper(username[0]) + username.Substring(1);
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        AuthStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/login", true);
    }
}
