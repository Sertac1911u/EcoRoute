@using Blazored.LocalStorage
@using EcoRoute.UI.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthStateProvider AuthStateProvider
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<header class="flex-shrink-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between h-16 px-6">
        <!-- Mobile menu button -->
        <div class="flex items-center">
            <button type="button" class="md:hidden text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700" id="mobile-menu-button">
                <i class="fas fa-bars"></i>
            </button>
        </div>

        <!-- Search bar -->
        <div class="flex-1 mx-4">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <input type="search" class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 dark:text-white transition duration-150 ease-in-out" placeholder="Ara...">
            </div>
        </div>

        <!-- User dropdown and darkmode toggle -->
        <div class="flex items-center">
            <button id="darkModeToggle" class="p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white focus:outline-none">
                <i class="fas fa-moon dark:hidden"></i>
                <i class="fas fa-sun hidden dark:inline"></i>
            </button>
            <button class="p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white focus:outline-none">
                <i class="fas fa-bell"></i>
            </button>
            <div class="relative ml-3">
                <div>
                    <button type="button" class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-primary-500 focus:ring-white" id="user-menu-button">
                        <span class="mr-2 text-gray-700 dark:text-gray-300">@username</span>
                        <img class="h-8 w-8 rounded-full" src="https://picsum.photos/200" alt="User avatar">
                    </button>
                </div>
                <div class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-10" id="user-dropdown">
                    <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Profilim</a>
                    <a href="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">Ayarlar</a>
                    <button @onclick="Logout" class="w-full text-left block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">
                        Çıkış Yap
                    </button>
                </div>
            </div>
        </div>
    </div>
</header>
<script>
    // Toggle user dropdown
          const userMenuButton = document.getElementById('user-menu-button');
          const userDropdown = document.getElementById('user-dropdown');

          userMenuButton.addEventListener('click', () => {
              userDropdown.classList.toggle('hidden');
          });

          // Close the dropdown when clicking outside
          document.addEventListener('click', (event) => {
              if (!userMenuButton.contains(event.target) && !userDropdown.contains(event.target)) {
                  userDropdown.classList.add('hidden');
              }
          });

          // Toggle dark mode
          const darkModeToggle = document.getElementById('darkModeToggle');

          darkModeToggle.addEventListener('click', () => {
              document.documentElement.classList.toggle('dark');
              localStorage.setItem('darkMode', document.documentElement.classList.contains('dark'));
          });

          // Check for saved dark mode preference
          if (localStorage.getItem('darkMode') === 'true' ||
              window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
              document.documentElement.classList.add('dark');
          }

          // Mobile menu toggle
          const mobileMenuButton = document.getElementById('mobile-menu-button');

          mobileMenuButton.addEventListener('click', () => {
              const sidebar = document.querySelector('.md\\:flex-shrink-0');
              sidebar.classList.toggle('hidden');
              sidebar.classList.toggle('block');
          });

          // Simulate some real-time data updates
          setInterval(() => {
              // Update random progress bars to simulate changing data
              const progressBars = document.querySelectorAll('.bg-primary-500, .bg-blue-500, .bg-yellow-500, .bg-green-500');
              const randomBar = progressBars[Math.floor(Math.random() * progressBars.length)];

              if (randomBar) {
                  const currentWidth = parseInt(randomBar.style.width);
                  const newWidth = Math.max(5, Math.min(100, currentWidth + (Math.random() > 0.5 ? 2 : -2)));
                  randomBar.style.width = `${newWidth}%`;

                  // Update the text if there's a corresponding text element
                  const parentDiv = randomBar.closest('div').parentElement;
                  const textElement = parentDiv.querySelector('span:last-child');
                  if (textElement) {
                      textElement.textContent = `${newWidth}%`;
                  }
              }
          }, 5000);
</script>


@code {
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        username = user.Identity?.IsAuthenticated == true
            ? user.FindFirst("Username")?.Value ?? user.Identity.Name
            : "Anonim";
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        AuthStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/login", true);
    }
}
