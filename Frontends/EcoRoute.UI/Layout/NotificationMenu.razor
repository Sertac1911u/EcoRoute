@using EcoRoute.DtoLayer.NotificationDtos
@using EcoRoute.UI.Services.NotificationServices
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="relative">
    <button @onclick="ToggleNotificationMenu" class="relative flex items-center justify-center p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500 dark:text-gray-400 hover:text-primary-500 dark:hover:text-primary-400 transition-all duration-200 focus:outline-none" title="Bildirimler">
        <i class="fas fa-bell text-lg transition-all duration-200"></i>
        @if (unreadCount > 0)
        {
            <span class="absolute top-0 right-0 flex items-center justify-center min-w-5 h-5 px-1 bg-red-500 text-white text-xs font-bold rounded-full shadow-sm animate-pulse">
                @(unreadCount > 99 ? "99+" : unreadCount.ToString())
            </span>
        }
    </button>

    @if (isNotificationMenuOpen)
    {
        <div class="origin-top-right absolute right-0 mt-2 w-80 rounded-lg shadow-lg bg-white dark:bg-gray-900 ring-1 ring-black/5 focus:outline-none z-50 transition-all duration-200 overflow-hidden">
            <!-- Header -->
            <div class="flex justify-between items-center px-4 py-3 border-b border-gray-100 dark:border-gray-800">
                <h3 class="text-base font-medium text-gray-800 dark:text-white flex items-center">
                    <i class="fas fa-bell text-primary-500 mr-2"></i>
                    Bildirimler
                </h3>
                @if (unreadCount > 0)
                {
                    <button @onclick="MarkAllAsRead" class="text-sm px-2 py-1 rounded-md text-primary-600 hover:text-primary-700 hover:bg-primary-50 dark:text-primary-400 dark:hover:text-primary-300 dark:hover:bg-primary-900/20 transition-colors duration-200">
                        <i class="fas fa-check-double mr-1"></i>
                        Tümünü Okundu İşaretle
                    </button>
                }
            </div>

            <!-- Notification List -->
            <div class="max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700">
                @if (notifications.Count == 0)
                {
                    <div class="p-8 text-center">
                        <div class="mx-auto flex items-center justify-center w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 mb-4">
                            <i class="fas fa-bell-slash text-2xl text-gray-400 dark:text-gray-500"></i>
                        </div>
                        <p class="text-gray-600 dark:text-gray-400 font-medium">Henüz bildiriminiz bulunmamaktadır.</p>
                        <p class="text-sm text-gray-500 dark:text-gray-500 mt-1">Yeni bildirimler burada görünecek.</p>
                    </div>
                }
                else
                {
                    @foreach (var notification in notifications)
                    {
                        <div @onclick="() => HandleNotificationClick(notification)"
                             class="px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-800/50 cursor-pointer transition-colors duration-200 border-l-2 @GetNotificationBorderColor(notification)">
                            <div class="flex items-start">
                                <div class="flex-shrink-0 pt-0.5 mr-3">
                                    <div class="@GetNotificationIconClasses(notification) h-8 w-8 flex items-center justify-center rounded-full">
                                        <i class="@GetNotificationIcon(notification)"></i>
                                    </div>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium @(notification.IsRead ? "text-gray-600 dark:text-gray-400" : "text-gray-900 dark:text-white")">
                                        @notification.Title
                                    </p>
                                    <p class="mt-1 text-sm @(notification.IsRead ? "text-gray-500 dark:text-gray-500" : "text-gray-700 dark:text-gray-300") line-clamp-2">
                                        @notification.Message
                                    </p>
                                    <div class="mt-1 flex items-center justify-between">
                                        <p class="text-xs text-gray-500 dark:text-gray-500">
                                            @GetTimeAgo(notification.CreatedDate)
                                        </p>
                                        @if (!notification.IsRead)
                                        {
                                            <button @onclick:stopPropagation="true" @onclick="() => MarkAsRead(notification.Id)"
                                                    class="rounded-full p-1 text-gray-400 hover:text-primary-500 dark:hover:text-primary-400 focus:outline-none transition-colors duration-200"
                                                    title="Okundu İşaretle">
                                                <i class="fas fa-check text-xs"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Footer -->
            @if (notifications.Count > 0)
            {
                <div class="border-t border-gray-100 dark:border-gray-800">
                    <a href="/notifications" class="flex items-center justify-center px-4 py-3 text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors duration-200">
                        <span>Tüm Bildirimleri Görüntüle</span>
                        <i class="fas fa-arrow-right ml-2 text-xs"></i>
                    </a>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Custom scrollbar */
    .scrollbar-thin::-webkit-scrollbar {
        width: 4px;
    }

    .scrollbar-thin::-webkit-scrollbar-track {
        background: transparent;
    }

    .scrollbar-thin::-webkit-scrollbar-thumb {
        background-color: #CBD5E1;
        border-radius: 20px;
    }

    .dark .scrollbar-thin::-webkit-scrollbar-thumb {
        background-color: #475569;
    }

    /* Limit text to 2 lines */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Notification badge animation */
    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
        }

        70% {
            box-shadow: 0 0 0 4px rgba(239, 68, 68, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
        }
    }

    .animate-pulse {
        animation: pulse 2s infinite;
    }
</style>

@code {
    private bool isNotificationMenuOpen = false;
    private List<ResultNotificationDto> notifications = new List<ResultNotificationDto>();
    private int unreadCount = 0;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            // Register for notification events
            notificationService.OnNotificationsUpdated += OnNotificationsUpdated;
            notificationService.OnNotificationReceived += OnNotificationReceived;

            if (!isInitialized)
            {
                await notificationService.InitializeAsync();
                isInitialized = true;
            }

            await LoadNotifications();
        }
    }

    private async Task LoadNotifications()
    {
        await notificationService.GetNotificationsAsync();
        notifications = notificationService.Notifications.Take(10).ToList(); // Show only 10 most recent
        unreadCount = notificationService.UnreadCount;
        StateHasChanged();
    }

    private void OnNotificationsUpdated()
    {
        // Run on UI thread
        InvokeAsync(() =>
        {
            notifications = notificationService.Notifications.Take(10).ToList();
            unreadCount = notificationService.UnreadCount;
            StateHasChanged();
        });
    }

    private async void OnNotificationReceived(ResultNotificationDto notification)
    {
        // Show toast notification
        await JS.InvokeVoidAsync("showToast", notification.Title, notification.Message, notification.Type.ToLower(), 5000);

        // Update UI
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ToggleNotificationMenu()
    {
        isNotificationMenuOpen = !isNotificationMenuOpen;
    }

    private async Task MarkAsRead(Guid id)
    {
        await notificationService.MarkAsReadAsync(id);
    }

    private async Task MarkAllAsRead()
    {
        await notificationService.MarkAllAsReadAsync();
    }

    private async Task HandleNotificationClick(ResultNotificationDto notification)
    {
        // Mark as read
        if (!notification.IsRead)
        {
            await notificationService.MarkAsReadAsync(notification.Id);
        }

        // Navigate if URL is provided
        if (!string.IsNullOrEmpty(notification.Url))
        {
            NavigationManager.NavigateTo(notification.Url);
        }

        // Close menu
        isNotificationMenuOpen = false;
    }

    private string GetNotificationBorderColor(ResultNotificationDto notification)
    {
        if (notification.IsRead)
            return "border-transparent";

        return notification.Type switch
        {
            "Success" => "border-green-500",
            "Warning" => "border-yellow-500",
            "Error" => "border-red-500",
            _ => "border-primary-500" // Info
        };
    }

    private string GetNotificationIconClasses(ResultNotificationDto notification)
    {
        var baseClasses = "flex items-center justify-center h-8 w-8 rounded-full";

        return notification.Type switch
        {
            "Success" => $"{baseClasses} bg-green-100 text-green-500 dark:bg-green-900/30 dark:text-green-400",
            "Warning" => $"{baseClasses} bg-yellow-100 text-yellow-500 dark:bg-yellow-900/30 dark:text-yellow-400",
            "Error" => $"{baseClasses} bg-red-100 text-red-500 dark:bg-red-900/30 dark:text-red-400",
            _ => $"{baseClasses} bg-primary-100 text-primary-500 dark:bg-primary-900/30 dark:text-primary-400" // Info
        };
    }

    private string GetNotificationIcon(ResultNotificationDto notification)
    {
        return notification.Type switch
        {
            "Success" => "fas fa-check",
            "Warning" => "fas fa-exclamation-triangle",
            "Error" => "fas fa-times-circle",
            _ => "fas fa-info-circle" // Info
        };
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "Az önce";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} dakika önce";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} saat önce";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} gün önce";
        if (timeSpan.TotalDays < 30)
            return $"{(int)(timeSpan.TotalDays / 7)} hafta önce";
        if (timeSpan.TotalDays < 365)
            return $"{(int)(timeSpan.TotalDays / 30)} ay önce";

        return $"{(int)(timeSpan.TotalDays / 365)} yıl önce";
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events
        notificationService.OnNotificationsUpdated -= OnNotificationsUpdated;
        notificationService.OnNotificationReceived -= OnNotificationReceived;

        // Dispose of the notification service
        await notificationService.DisposeAsync();
    }
}