@page "/bins"
@using EcoRoute.DtoLayer.WasteBinDtos
@using EcoRoute.UI.Services.WasteBinServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@inject WasteBinService WasteBinService
@inject SensorService SensorService
@inject IToastService toastService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<!-- Main Kısmı -->
<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden mb-6">
    <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Atık Kutusu Yönetimi</h2>
        <div class="flex space-x-2">
            <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300" @onclick="RefreshData">
                <i class="fas fa-sync-alt mr-2"></i> Yenile
            </button>
            <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300" @onclick="OpenCreateModal">
                <i class="fas fa-plus mr-2"></i> Yeni Atık Kutusu Ekle
            </button>
        </div>
    </div>

    <!-- Harita Bölümü -->
    <div class="p-4 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div class="rounded-lg overflow-hidden shadow-md">
            <div id="main-map" class="w-full h-96 relative">
                <!-- Harita yükleniyor göstergesi -->
                <div id="map-loading-indicator" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800 bg-opacity-75 dark:bg-opacity-75 z-10">
                    <div class="text-center">
                        <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-2"></i>
                        <p class="text-gray-600 dark:text-gray-300">Harita yükleniyor...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtre Bölümü -->
    <div class="p-4 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Durum</label>
                <select class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                        @onchange="FilterByStatus" @bind="statusFilter" @bind:event="oninput">
                    <option value="">Tümü</option>
                    <option value="Active">Aktif</option>
                    <option value="Inactive">Pasif</option>
                    <option value="Maintenance">Bakımda</option>
                    <option value="Faulty">Arızalı</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Doluluk Oranı</label>
                <select class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                        @bind="fillLevelFilter"
                        @bind:event="oninput"
                        @onchange="FilterByFillLevel">
                    <option value="">Tümü</option>
                    <option value="0-30">0-30% (Boş)</option>
                    <option value="30-50">30-50% (Az Dolu)</option>
                    <option value="50-70">50-70% (Orta Dolu)</option>
                    <option value="70-90">70-90% (Fazla Dolu)</option>
                    <option value="90-100">90-100% (Kritik)</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Arama</label>
                <div class="relative">
                    <input type="text" placeholder="Etiket veya adres ara..."
                           class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                           @bind-value="searchText" @bind-value:event="oninput" @onkeyup="SearchBins" />
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                </div>
            </div>
            <div class="flex items-end">
                <button class="flex items-center justify-center w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition duration-300"
                        @onclick="ClearFilters">
                    <i class="fas fa-filter-circle-xmark mr-2"></i> Filtreleri Temizle
                </button>
            </div>
        </div>
    </div>

    <!-- Tablo Bölümü -->
    <div class="p-6">
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                <thead class="bg-gray-100 dark:bg-gray-700">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Index")'>
                            <div class="flex items-center">
                                No
                                @if (sortField == "Index")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Label")'>
                            <div class="flex items-center">
                                Etiket
                                @if (sortField == "Label")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Address")'>
                            <div class="flex items-center">
                                Adres
                                @if (sortField == "Address")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("LastUpdate")'>
                            <div class="flex items-center">
                                Son Güncelleme
                                @if (sortField == "LastUpdate")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("DeviceStatus")'>
                            <div class="flex items-center">
                                Cihaz Durumu
                                @if (sortField == "DeviceStatus")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("FillLevel")'>
                            <div class="flex items-center">
                                Doluluk Oranı
                                @if (sortField == "FillLevel")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">İşlemler</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                    @if (filteredBins == null)
                    {
                        <tr>
                            <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                <div class="flex justify-center items-center">
                                    <i class="fas fa-circle-notch fa-spin mr-2"></i> Yükleniyor...
                                </div>
                            </td>
                        </tr>
                    }
                    else if (filteredBins.Count == 0)
                    {
                        <tr>
                            <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                <div class="flex flex-col justify-center items-center p-6">
                                    <i class="fas fa-trash-alt text-4xl mb-2 text-gray-400"></i>
                                    <p>Atık kutusu bulunamadı veya hiç atık kutusu bulunmamaktadır.</p>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @for (int i = 0; i < displayedBins.Count; i++)
                        {
                            var bin = displayedBins[i];
                            var rowIndex = ((currentPage - 1) * pageSize) + i + 1;
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer @(expandedRowId == bin.Id ? "bg-gray-50 dark:bg-gray-700" : "")"
                                @onclick="() => ToggleRowExpansion(bin.Id)">
                                <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@rowIndex</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                    <div class="flex items-center">
                                        <i class="fas fa-dumpster text-lg mr-3 @GetBinIconColor(bin)"></i>
                                        <span>@bin.Label</span>
                                    </div>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300 truncate max-w-xs">
                                    <i class="fas fa-map-marker-alt mr-2 text-red-500"></i>
                                    @bin.Address
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@bin.UpdatedAt.ToString("dd.MM.yyyy HH:mm")</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm">
                                    <span class="@GetDeviceStatusColor(bin.DeviceStatus) px-2 py-1 rounded-full text-xs">
                                        @GetDeviceStatusText(bin.DeviceStatus)
                                    </span>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap">
                                    <div class="relative w-full h-5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden bg-stripes">
                                        <div class="@GetFillLevelColor(bin.FillLevel) h-full transition-all duration-500 ease-in-out flex items-center justify-center"
                                             style="width: @(bin.FillLevel ?? 0)%">
                                            <span class="text-xs font-bold text-white">@(bin.FillLevel ?? 0)%</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm">
                                    <div class="flex space-x-3" @onclick:stopPropagation>
                                        <button class="text-blue-500 hover:text-blue-700 text-lg tooltip-container" @onclick="@(() => OpenEditModal(bin))">
                                            <i class="fas fa-edit"></i>
                                            <span class="tooltip">Düzenle</span>
                                        </button>
                                        <button class="text-primary-500 hover:text-primary-700 text-lg tooltip-container"
                                                @onclick="@(() => FocusOnBin(bin.Id))">
                                            <i class="fas fa-map-marker"></i>
                                            <span class="tooltip">Haritada Göster</span>
                                        </button>
                                        <button class="text-red-500 hover:text-red-700 text-lg tooltip-container"
                                                @onclick="@(() => DeleteBinConfirmation(bin.Id))">
                                            <i class="fas fa-trash-alt"></i>
                                            <span class="tooltip">Sil</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>

                            @if (expandedRowId == bin.Id)
                            {
                                <tr class="bg-gray-50 dark:bg-gray-700 animate-expandRow">
                                    <td colspan="7" class="px-6 py-6">
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                            <!-- Genel Bilgiler -->
                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                                                        Genel Bilgiler
                                                    </h3>
                                                    <span class="@(bin.IsFilled == true ? "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300" : "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300") px-2 py-1 rounded-full text-xs">
                                                        @(bin.IsFilled == true ? "Dolu" : "Boş")
                                                    </span>
                                                </div>

                                                <div class="space-y-3">
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Oluşturulma Tarihi:</span>
                                                        <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@bin.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                                    </div>
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Güncellenme Tarihi:</span>
                                                        <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@bin.UpdatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                                    </div>
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Doluluk Seviyesi:</span>
                                                        <span class="text-sm font-medium @GetTextColorByFillLevel(bin.FillLevel)">@(bin.FillLevel ?? 0)%</span>
                                                    </div>
                                                    <div class="flex justify-between items-center">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Durum:</span>
                                                        <span class="text-sm font-medium @GetDeviceStatusTextColor(bin.DeviceStatus)">
                                                            @GetDeviceStatusText(bin.DeviceStatus)
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Doluluk Durumu -->
                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="!text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-chart-line mr-2 text-amber-500"></i>
                                                        Doluluk Durumu
                                                    </h3>
                                                </div>

                                                <div class="flex flex-col items-center justify-center space-y-3 py-2">
                                                    <div class="relative w-32 h-32">
                                                        <svg class="w-full h-full" viewBox="0 0 36 36">
                                                            <path class="stroke-current text-gray-200 dark:text-gray-700" fill="none" stroke-width="3.8" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                            <path class="@GetStrokeFillColor(bin.FillLevel) stroke-current" fill="none" stroke-width="3.8" stroke-linecap="round"
                                                                  stroke-dasharray="@((bin.FillLevel ?? 0) * 100 / 100), 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831">
                                                                <animate attributeName="stroke-dasharray"
                                                                         from="0, 100"
                                                                         to="@((bin.FillLevel ?? 0) * 100 / 100), 100"
                                                                         dur="1s"
                                                                         fill="freeze"
                                                                         calcMode="spline"
                                                                         keyTimes="0; 1"
                                                                         keySplines="0.42 0 0.58 1" />
                                                            </path>
                                                            <text x="18" y="20.5" class="fill-current font-bold text-gray-700 dark:text-gray-200" text-anchor="middle" font-size="@(bin.FillLevel >= 100 ? "6" : "7")">@(bin.FillLevel ?? 0)%</text>
                                                        </svg>
                                                    </div>

                                                    <div class="text-center">
                                                        <span class="inline-block px-3 py-1 rounded-full @GetFillStatusBadge(bin.FillLevel)">
                                                            @GetFillStatusText(bin.FillLevel)
                                                        </span>
                                                    </div>

                                                    <div class="mt-2 space-y-2">
                                                        <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini dolma tarihi:</span>
                                                            <span class="font-medium text-gray-700 dark:text-gray-300">@GetEstimatedFillDate(bin.FillLevel)</span>
                                                        </div>

                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">3 Gün Sonra Doluluk:</span>
                                                            <span class="font-medium @GetTextColorByFillLevel(GetEstimatedFillRate(bin.FillLevel, 3))">
                                                                %@GetEstimatedFillRate(bin.FillLevel, 3).ToString("0")
                                                            </span>
                                                        </div>

                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">7 Gün Sonra Doluluk:</span>
                                                            <span class="font-medium @GetTextColorByFillLevel(GetEstimatedFillRate(bin.FillLevel, 7))">
                                                                %@GetEstimatedFillRate(bin.FillLevel, 7).ToString("0")
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                                                        Son güncelleme: @bin.UpdatedAt.ToString("dd.MM.yyyy HH:mm")
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Sensörler -->
                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-microchip mr-2 text-green-500"></i>
                                                        Sensörler
                                                    </h3>
                                                    <span class="bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 px-2 py-1 rounded-full text-xs">
                                                        @(bin.Sensors?.Count ?? 0) adet
                                                    </span>
                                                </div>

                                                <div class="space-y-3 max-h-60 overflow-y-auto">
                                                    @if (bin.Sensors != null && bin.Sensors.Any())
                                                    {
                                                        foreach (var sensor in bin.Sensors)
                                                        {
                                                            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border-l-4 @GetSensorBorderColor(sensor.IsActive) transition-transform duration-300 hover:translate-x-1">
                                                                <div class="flex justify-between items-center mb-1">
                                                                    <span class="font-medium text-gray-800 dark:text-white">@sensor.Type</span>
                                                                    <span class="@(sensor.IsActive ? "text-green-500" : "text-red-500") text-xs flex items-center">
                                                                        <i class="fas @(sensor.IsActive ? "fa-check-circle" : "fa-times-circle") mr-1 @(sensor.IsActive ? "animate-pulse" : "")"></i>
                                                                        @(sensor.IsActive ? "Aktif" : "Pasif")
                                                                    </span>
                                                                </div>
                                                                <div class="text-xs text-gray-500 dark:text-gray-400">
                                                                    Son Güncelleme: @(sensor.LastUpdate?.ToString("dd.MM.yyyy") ?? "-")
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                                                            <p class="text-sm text-gray-500 dark:text-gray-400">Sensör bulunamadı</p>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>

        @if (filteredBins != null && totalPages > 1)
        {
            <div class="flex justify-center mt-4">
                <div class="flex space-x-1">
                    <button @onclick="() => ChangePage(1)"
                            disabled="@(currentPage == 1)"
                            class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-double-left"></i>
                    </button>
                    <button @onclick="() => ChangePage(currentPage - 1)"
                            disabled="@(currentPage == 1)"
                            class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-left"></i>
                    </button>

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button @onclick="() => ChangePage(pageNumber)"
                                class="@(currentPage == pageNumber ? "bg-primary-500 text-white" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            @pageNumber
                        </button>
                    }

                    <button @onclick="() => ChangePage(currentPage + 1)"
                            disabled="@(currentPage == totalPages)"
                            class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-right"></i>
                    </button>
                    <button @onclick="() => ChangePage(totalPages)"
                            disabled="@(currentPage == totalPages)"
                            class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-double-right"></i>
                    </button>
                </div>
            </div>
        }

        <div class="text-xs text-gray-500 dark:text-gray-400 mt-4 text-center">
            Toplam @(filteredBins?.Count ?? 0) atık kutusu
        </div>
    </div>
</div>

<!-- Sidebar for bin details -->
<div id="bin-sidebar" class="fixed top-0 right-[-400px] h-full w-[400px] bg-white dark:bg-gray-800 shadow-lg z-50 overflow-y-auto transition-all duration-300 ease-in-out border-l-4 border-primary-500">
    <!-- Sidebar content will be dynamically populated by JavaScript -->
</div>

<!-- Delete Confirm Modal -->
@if (showDeleteConfirmation)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-[60] flex items-center justify-center">
        <div class="bg-white dark:bg-gray-800 rounded-lg max-w-md w-full shadow-xl p-6 animate-modal-show">
            <div class="text-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-red-100 text-red-500 mb-4">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Atık Kutusunu Sil</h3>
                <p class="text-gray-500 dark:text-gray-400">Bu atık kutusunu silmek istediğinize emin misiniz? Bu işlem geri alınamaz.</p>
            </div>
            <div class="flex justify-between">
                <button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-lg text-gray-800 transition-colors" @onclick="CancelDelete">
                    İptal
                </button>
                <button class="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-white transition-colors" @onclick="ConfirmDelete">
                    Sil
                </button>
            </div>
        </div>
    </div>
}

<!-- Save Confirm Modal-->
@if (showSaveConfirmation)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-[60] flex items-center justify-center">
        <div class="bg-white dark:bg-gray-800 rounded-lg max-w-md w-full shadow-xl p-6 animate-modal-show">
            <div class="text-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 text-blue-500 mb-4">
                    <i class="fas fa-question-circle text-2xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">@(showEditModal ? "Atık Kutusunu Güncelle" : "Atık Kutusu Ekle")</h3>
                <p class="text-gray-500 dark:text-gray-400">@(showEditModal ? "Atık kutusu bilgilerini güncellemek istediğinize emin misiniz?" : "Yeni atık kutusu eklemek istediğinize emin misiniz?")</p>
            </div>
            <div class="flex justify-between">
                <button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-lg text-gray-800 transition-colors" @onclick="() => showSaveConfirmation = false">
                    İptal
                </button>
                <button class="px-4 py-2 bg-primary-500 hover:bg-primary-600 rounded-lg text-white transition-colors" @onclick="SaveBin">
                    @(showEditModal ? "Güncelle" : "Ekle")
                </button>
            </div>
        </div>
    </div>
}

<!-- Location Modal for Map Selection -->
@if (showLocationPickerModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl h-[80vh] flex flex-col animate-modal-show">
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    Konum Seç
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="CloseLocationPickerModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="p-4 flex-grow">
                <div class="mb-4 bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 p-3 rounded-lg text-sm">
                    <i class="fas fa-info-circle mr-2"></i> Haritada istediğiniz konuma tıklayarak atık kutusu konumu belirleyebilirsiniz.
                </div>
                <div class="bg-white dark:bg-gray-800 rounded-lg h-[calc(100%-3rem)] overflow-hidden border border-gray-300 dark:border-gray-600 relative">
                    <!-- Map container -->
                    <div id="location-picker-map" class="w-full h-full rounded-lg"></div>
                </div>
            </div>
            <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <div class="text-sm text-gray-600 dark:text-gray-400">
                    <i class="fas fa-map-marker-alt text-red-500 mr-1"></i>
                    <span id="selected-coordinates">Koordinat: @binModel.Latitude, @binModel.Longitude</span>
                </div>
                <div class="flex space-x-3">
                    <button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-md transition-colors" @onclick="CloseLocationPickerModal">
                        İptal
                    </button>
                    <button class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors" @onclick="ConfirmLocationSelection">
                        Konumu Seç
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit/Create Modal-->
@if (showCreateModal || showEditModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[50]">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Başlık -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    @(showCreateModal ? "Yeni Atık Kutusu Ekle" : "Atık Kutusu Düzenle")
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="CloseModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Form İçeriği -->
            <div class="p-5">
                <div class="space-y-6">
                    <!-- Temel Bilgiler -->
                    <div class="space-y-4 bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                        <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 border-gray-200 dark:border-gray-700">
                            Temel Bilgiler
                        </h4>

                        <div class="space-y-3">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="label">
                                    Etiket <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="label" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                       @bind="binModel.Label" />
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="address">
                                    Adres <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="address" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                       @bind="binModel.Address" />
                            </div>

                            <div class="grid grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="latitude">
                                        Enlem <span class="text-red-500">*</span>
                                    </label>
                                    <div class="flex">
                                        <input type="number" step="0.000001" id="latitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                               @bind="binModel.Latitude" readonly />
                                        <button type="button" class="flex-shrink-0 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 px-3 py-2 border border-l-0 border-gray-300 dark:border-gray-600 rounded-r-md" @onclick="OpenLocationPicker">
                                            <i class="fas fa-map text-primary-500"></i>
                                        </button>
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="longitude">
                                        Boylam <span class="text-red-500">*</span>
                                    </label>
                                    <input type="number" step="0.000001" id="longitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                           @bind="binModel.Longitude" readonly />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Durum ve Doluluk Bilgileri -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                        <!-- Cihaz durumu -->
                        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 mb-4 border-gray-200 dark:border-gray-700">
                                Cihaz Durumu
                            </h4>
                            <div class="grid grid-cols-2 gap-3">
                                <div class="relative">
                                    <input type="radio" id="status-active" name="device-status" value="Active"
                                           checked="@(binModel.DeviceStatus == "Active")"
                                           @onchange='@(() => binModel.DeviceStatus = "Active")'
                                           class="hidden peer" />
                                    <label for="status-active" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-check-circle mr-2 text-green-500"></i>
                                        <span class="font-medium text-sm">Aktif</span>
                                    </label>
                                </div>
                                <div class="relative">
                                    <input type="radio" id="status-inactive" name="device-status" value="Inactive"
                                           checked="@(binModel.DeviceStatus == "Inactive")"
                                           @onchange='@(() => binModel.DeviceStatus = "Inactive")'
                                           class="hidden peer" />
                                    <label for="status-inactive" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-gray-400 peer-checked:border-gray-600 peer-checked:text-gray-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-ban mr-2 text-gray-500"></i>
                                        <span class="font-medium text-sm">Pasif</span>
                                    </label>
                                </div>
                                <div class="relative">
                                    <input type="radio" id="status-maintenance" name="device-status" value="Maintenance"
                                           checked="@(binModel.DeviceStatus == "Maintenance")"
                                           @onchange='@(() => binModel.DeviceStatus = "Maintenance")'
                                           class="hidden peer" />
                                    <label for="status-maintenance" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-yellow-400 peer-checked:border-yellow-600 peer-checked:text-yellow-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-wrench mr-2 text-yellow-500"></i>
                                        <span class="font-medium text-sm">Bakımda</span>
                                    </label>
                                </div>
                                <div class="relative">
                                    <input type="radio" id="status-faulty" name="device-status" value="Faulty"
                                           checked="@(binModel.DeviceStatus == "Faulty")"
                                           @onchange='@(() => binModel.DeviceStatus = "Faulty")'
                                           class="hidden peer" />
                                    <label for="status-faulty" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-red-400 peer-checked:border-red-600 peer-checked:text-red-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-exclamation-triangle mr-2 text-red-500"></i>
                                        <span class="font-medium text-sm">Arızalı</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Doluluk durumu -->
                        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 border-gray-200 dark:border-gray-700">
                                Doluluk Durumu
                            </h4>
                            <div class="space-y-4 mt-4">
                                <!-- Doluluk durumu radyo butonları -->
                                <div class="grid grid-cols-2 gap-3">
                                    <div class="relative">
                                        <input type="radio" id="filled-true" name="fill-status" value="true"
                                               checked="@(binModel.IsFilled == true)"
                                               @onchange='@(() => binModel.IsFilled = true)'
                                               class="hidden peer" />
                                        <label for="filled-true" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-red-400 peer-checked:border-red-600 peer-checked:text-red-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-trash-alt mr-2 text-red-500"></i>
                                            <span class="font-medium text-sm">Dolu</span>
                                        </label>
                                    </div>
                                    <div class="relative">
                                        <input type="radio" id="filled-false" name="fill-status" value="false"
                                               checked="@(binModel.IsFilled == false)"
                                               @onchange='@(() => binModel.IsFilled = false)'
                                               class="hidden peer" />
                                        <label for="filled-false" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-trash mr-2 text-green-500"></i>
                                            <span class="font-medium text-sm">Boş</span>
                                        </label>
                                    </div>
                                </div>

                                <!-- Doluluk seviyesi slider -->
                                <div class="mt-2">
                                    <div class="flex justify-between items-center mb-2">
                                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Doluluk Seviyesi (%)</h4>
                                        <span class="px-2 py-0.5 rounded-full text-xs @GetFillLevelBadge(binModel.FillLevel)">
                                            @(binModel.FillLevel ?? 0)%
                                        </span>
                                    </div>
                                    <div class="relative">
                                        <input type="range" min="0" max="100" step="1" id="fillLevel" class="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                                               @bind="binModel.FillLevel" @oninput="OnFillLevelInput" />
                                        <div class="w-full flex justify-between text-xs text-gray-600 dark:text-gray-400 mt-1">
                                            <span>0</span>
                                            <span>25</span>
                                            <span>50</span>
                                            <span>75</span>
                                            <span>100</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sensör Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 sm:mb-0">Sensörler</h4>
                            <span class="text-xs px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 rounded-full">
                                @(selectedSensorIds.Count) sensör seçildi
                            </span>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 max-h-48 overflow-y-auto p-3 bg-white dark:bg-gray-900 rounded-lg shadow-inner">
                            @if (availableSensors != null && availableSensors.Any())
                            {
                                foreach (var sensor in availableSensors)
                                {
                                    <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800">
                                        <input type="checkbox"
                                               id="sensor-@sensor.SensorId"
                                               value="@sensor.SensorId"
                                               checked="@(selectedSensorIds.Contains(sensor.SensorId))"
                                               @onchange="@(e => ToggleSensorSelection(sensor.SensorId, (bool)e.Value))"
                                               class="w-4 h-4 mr-2 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                        <label for="sensor-@sensor.SensorId" class="flex-1 cursor-pointer">
                                            <div class="font-medium text-gray-800 dark:text-white text-sm">@sensor.Type</div>
                                            <div class="flex items-center mt-1">
                                                <span class="@(sensor.IsActive ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300" : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300") px-2 py-0.5 rounded-full text-xs">
                                                    @(sensor.IsActive ? "Aktif" : "Pasif")
                                                </span>
                                            </div>
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="col-span-full text-center p-6 text-gray-500 dark:text-gray-400">
                                    <i class="fas fa-sensor-off text-2xl mb-2"></i>
                                    <p>Kullanılabilir sensör bulunamadı</p>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Butonlar -->
                    <div class="flex justify-end space-x-3 mt-4 pt-3 border-t border-gray-200 dark:border-gray-700">
                        <button class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" @onclick="CloseModal">
                            İptal
                        </button>
                        <button class="px-5 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors shadow-sm" @onclick="ShowSaveConfirmation">
                            @(showEditModal ? "Güncelle" : "Kaydet")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<style>
    /* Tooltip Styles */
    .tooltip-container {
        position: relative;
    }

        .tooltip-container .tooltip {
            visibility: hidden;
            background-color: rgba(0,0,0,0.8);
            color: white;
            text-align: center;
            border-radius: 4px;
            padding: 5px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            white-space: nowrap;
            font-size: 12px;
        }

            .tooltip-container .tooltip::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: rgba(0,0,0,0.8) transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

    /* Progress Bar Styles */
    .bg-stripes {
        background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
        background-size: 1rem 1rem;
    }

    /* Row Expansion Animation */
    @@keyframes expandRow {
        from {
            opacity: 0;
            max-height: 0;
            transform: scaleY(0);
            transform-origin: top;
        }

        to {
            opacity: 1;
            max-height: 500px;
            transform: scaleY(1);
            transform-origin: top;
        }
    }

    .animate-expandRow {
        animation: expandRow 0.3s ease-out forwards;
    }

    /* Modal Animation */
    @@keyframes modalShow {
        from {
            opacity: 0;
            transform: scale(0.95) translateY(10px);
        }

        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    .animate-modal-show {
        animation: modalShow 0.2s ease-out forwards;
    }

    /* Slider Thumb Styles */
    input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #3498db;
        cursor: pointer;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
        z-index: 2;
    }

    input[type=range]::-moz-range-thumb {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #3498db;
        cursor: pointer;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
        z-index: 2;
    }

    /* Map Button Styles */
    .map-button {
        transition: all 0.2s ease;
    }

        .map-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
        }

        .map-button:active {
            transform: translateY(0);
        }

    /* Map InfoWindow Styles */
    :global(.gm-style .gm-style-iw-c) {
        padding: 0 !important;
        border-radius: 8px !important;
        box-shadow: 0 6px 16px rgba(0,0,0,0.15) !important;
    }

    :global(.gm-style .gm-style-iw-d) {
        overflow: hidden !important;
    }

    /* Card hover effects */
    .detail-card {
        transition: all 0.3s ease;
        transform-origin: center;
    }

        .detail-card:hover {
            transform: translateY(-5px) scale(1.02);
            z-index: 10;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

    /* Pulse animation for critical elements */
    @@keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.7;
        }

        100% {
            opacity: 1;
        }
    }

    .pulse-animation {
        animation: pulse 1.5s infinite;
    }

    /* Marker/Pin pulsing effect */
    @@keyframes markerPulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.1);
            opacity: 0.9;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    .marker-pulse {
        animation: markerPulse 1.5s infinite;
    }

    /* Sidebar Animation */
    .sidebar-active #main-map {
        width: calc(100% - 400px);
        transition: width 0.4s ease;
    }

    #bin-sidebar.active {
        right: 0;
    }
</style>

<script>
    // Global variables
    let mainMap;
    let locationPickerMap;
    let markers = [];
    let markerCluster = null;
    let currentInfoWindow = null;
    let sidebarOpen = false;
    let dotNetRef = null;
    let selectedBinId = null;
    let userLocationMarker = null;
    let isDarkMode = false;

    // Constants
    const DEFAULT_CENTER = { lat: 41.1634, lng: 27.7951 }; // Çorlu merkez
    const DEFAULT_ZOOM = 13; // Initial zoom level for overview
    const FOCUS_ZOOM = 18; // Zoom level when focusing on a bin
    const DEFAULT_TILT = 67.7; // Default tilt for 3D view
    const MAP_ID = '8b70db4a26fb9f4cd11929e3'; // Your custom map style ID
    const PRIMARY_COLOR = '#3B82F6'; // Primary blue color
    const RECYCLING_GREEN = "#10B981"; // Theme color for recycling

    // Dark mode detection
    function detectDarkMode() {
        isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ||
                   document.documentElement.classList.contains('dark');
        return isDarkMode;
    }

    // Watch for dark mode changes
    if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            isDarkMode = e.matches || document.documentElement.classList.contains('dark');
            updateMapTheme();
        });
    }

    // Observer for dark class changes
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const newDarkMode = document.documentElement.classList.contains('dark');
                if (newDarkMode !== isDarkMode) {
                    isDarkMode = newDarkMode;
                    updateMapTheme();
                }
            }
        });
    });

    observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
    });

    function updateMapTheme() {
        if (mainMap) {
            mainMap.setOptions({
                styles: getMapStyles()
            });
        }
        if (locationPickerMap) {
            locationPickerMap.setOptions({
                styles: getMapStyles()
            });
        }
    }

    function getMapStyles() {
        detectDarkMode();

        if (isDarkMode) {
            return [
                // Genel geometri - koyu
                { elementType: "geometry", stylers: [{ color: "#0f0f0f" }] },
                { elementType: "labels.text.stroke", stylers: [{ color: "#0f0f0f" }] },
                { elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },

                // Yönetimsel bölgeler
                {
                    featureType: "administrative.locality",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#c4c4c4" }]
                },
                {
                    featureType: "administrative.country",
                    elementType: "geometry.stroke",
                    stylers: [{ color: "#4e5c6e" }]
                },

                // İlgi çekici yerler
                {
                    featureType: "poi",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#6b7280" }]
                },
                {
                    featureType: "poi.park",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#1a2e1a" }]
                },
                {
                    featureType: "poi.business",
                    stylers: [{ visibility: "off" }]
                },

                // Yollar - daha koyu
                {
                    featureType: "road",
                    elementType: "geometry",
                    stylers: [{ color: "#1f1f1f" }]
                },
                {
                    featureType: "road",
                    elementType: "geometry.stroke",
                    stylers: [{ color: "#0a0a0a" }]
                },
                {
                    featureType: "road.highway",
                    elementType: "geometry",
                    stylers: [{ color: "#2d2d2d" }]
                },
                {
                    featureType: "road.highway",
                    elementType: "geometry.stroke",
                    stylers: [{ color: "#1a1a1a" }]
                },
                {
                    featureType: "road.arterial",
                    elementType: "geometry",
                    stylers: [{ color: "#262626" }]
                },
                {
                    featureType: "road.local",
                    elementType: "geometry",
                    stylers: [{ color: "#1a1a1a" }]
                },

                // Su - koyu mavi
                {
                    featureType: "water",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#0a1a2a" }]
                },
                {
                    featureType: "water",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#4a90a4" }]
                },

                // Transit
                {
                    featureType: "transit",
                    elementType: "geometry",
                    stylers: [{ color: "#1e1e1e" }]
                },
                {
                    featureType: "transit.station",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#757575" }]
                },

                // Binalar
                {
                    featureType: "landscape.man_made",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#1a1a1a" }]
                },

                // Doğal manzara
                {
                    featureType: "landscape.natural",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#0d0d0d" }]
                }
            ];
        } else {
            return [
                {
                    "featureType": "all",
                    "elementType": "geometry",
                    "stylers": [{"color": "#f5f5f5"}]
                },
                {
                    "featureType": "landscape.man_made",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#e8f0e4"}]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#c8e6c9"}]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#bbdefb"}]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#ffffff"}]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry.stroke",
                    "stylers": [{"color": "#e0e0e0"}]
                }
            ];
        }
    }

    // Load MarkerClusterer library if not available
    function loadMarkerClusterer() {
        return new Promise((resolve, reject) => {
            // Check if MarkerClusterer is already available
            if (window.MarkerClusterer || window.markerClusterer) {
                console.log("MarkerClusterer already available");
                resolve();
                return;
            }

            // Try loading the newer version first
            const script1 = document.createElement('script');
            script1.src = 'https://unpkg.com/@@googlemaps/markerclusterer/dist/index.min.js';
            script1.onload = () => {
                console.log("New MarkerClusterer loaded successfully");
                resolve();
            };
            script1.onerror = () => {
                console.log("Failed to load new MarkerClusterer, trying legacy version");

                // Fallback to legacy version
                const script2 = document.createElement('script');
                script2.src = 'https://cdnjs.cloudflare.com/ajax/libs/js-marker-clusterer/1.0.0/markerclusterer.min.js';
                script2.onload = () => {
                    console.log("Legacy MarkerClusterer loaded successfully");
                    resolve();
                };
                script2.onerror = () => {
                    console.error("Failed to load any MarkerClusterer library");
                    reject(new Error("MarkerClusterer could not be loaded"));
                };
                document.head.appendChild(script2);
            };
            document.head.appendChild(script1);
        });
    }

    /**
     * Initialize Google Maps integration
     * @@param {DotNetReference} reference - .NET reference for calling Blazor methods
     */
    window.initializeGoogleMaps = function (reference) {
        dotNetRef = reference;
        detectDarkMode();
        console.log("Google Maps initialization started");

        // Load MarkerClusterer library
        loadMarkerClusterer().catch(error => {
            console.warn("MarkerClusterer not available:", error);
        });
    };

    /**
     * Main object containing all Google Maps related functions
     */
    window.googleMapsInterop = {
        /**
         * Initialize the main 3D map
         * @@param {string} mapElementId - HTML element ID for the map container
         */
        initializeMainMap: function (mapElementId) {
            console.log("Initializing main map in element:", mapElementId);

            // Hide loading indicator when map is fully loaded
            const hideLoading = () => {
                const loadingIndicator = document.getElementById('map-loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.style.opacity = '0';
                    setTimeout(() => {
                        loadingIndicator.style.display = 'none';
                    }, 500);
                }
            };

            try {
                // Create map centered on Çorlu with better default options
                mainMap = new google.maps.Map(document.getElementById(mapElementId), {
                    center: DEFAULT_CENTER,
                    zoom: DEFAULT_ZOOM,
                    tilt: DEFAULT_TILT,
                    heading: 0,
                    mapTypeId: 'roadmap',
                    mapId: MAP_ID,
                    // Improved UI controls
                    streetViewControl: false,
                    mapTypeControl: false,
                    rotateControl: true,
                    zoomControl: true,
                    fullscreenControl: true,
                    styles: getMapStyles()
                });

                // Add custom controls
                this.add3DToggle(mainMap);
                this.addUserLocationButton(mainMap);

                // Add map loaded event
                google.maps.event.addListenerOnce(mainMap, 'tilesloaded', () => {
                    hideLoading();
                    if (dotNetRef) {
                        dotNetRef.invokeMethodAsync('OnMapInitialized');
                    }
                });

            } catch (error) {
                console.error("Error initializing main map:", error);
                hideLoading();
            }
        },

        /**
         * Add 3D/2D toggle button to map
         * @@param {google.maps.Map} map - Map object
         */
        add3DToggle: function (map) {
            const toggleButton = document.createElement('button');
            toggleButton.className = 'custom-map-control-button toggle-view-button';
            toggleButton.innerHTML = '<i class="fas fa-cube"></i> 3D';
            toggleButton.title = 'Toggle 2D/3D view';

            let is3DMode = true; // Start in 3D mode

            toggleButton.addEventListener('click', () => {
                if (is3DMode) {
                    // Switch to 2D
                    map.setTilt(0);
                    toggleButton.innerHTML = '<i class="fas fa-map"></i> 2D';
                } else {
                    // Switch to 3D
                    map.setTilt(DEFAULT_TILT);
                    toggleButton.innerHTML = '<i class="fas fa-cube"></i> 3D';
                }
                is3DMode = !is3DMode;
            });

            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(toggleButton);

            // Add styles for the toggle button
            const style = document.createElement('style');
            style.textContent = `
                .toggle-view-button {
                    background-color: ${isDarkMode ? '#1F2937' : '#fff'};
                    border: 2px solid ${isDarkMode ? '#374151' : '#fff'};
                    border-radius: 6px;
                    box-shadow: 0 3px 8px rgba(0,0,0,.2);
                    color: ${isDarkMode ? '#E5E7EB' : '#555'};
                    cursor: pointer;
                    font-family: 'Inter', -apple-system, sans-serif;
                    font-size: 14px;
                    font-weight: 500;
                    margin: 10px;
                    padding: 10px 16px;
                    text-align: center;
                    transition: all 0.3s ease;
                }
                .toggle-view-button:hover {
                    background-color: ${isDarkMode ? '#374151' : '#f8f9fa'};
                    transform: translateY(-1px);
                    box-shadow: 0 4px 12px rgba(0,0,0,.25);
                }
                .toggle-view-button i {
                    margin-right: 6px;
                }
            `;
            document.head.appendChild(style);
        },

        /**
         * Add user location button to map
         * @@param {google.maps.Map} map - Map object
         */
        addUserLocationButton: function (map) {
            const locationButton = document.createElement('button');
            locationButton.className = 'custom-map-control-button location-button';
            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
            locationButton.title = 'Show my location';

            locationButton.addEventListener('click', () => {
                if (navigator.geolocation) {
                    locationButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            // Remove existing user location marker if any
                            if (userLocationMarker) {
                                userLocationMarker.setMap(null);
                            }

                            // Create new marker at user location
                            userLocationMarker = new google.maps.Marker({
                                position: pos,
                                map: map,
                                icon: {
                                    path: google.maps.SymbolPath.CIRCLE,
                                    fillColor: PRIMARY_COLOR,
                                    fillOpacity: 1,
                                    strokeColor: '#FFFFFF',
                                    strokeWeight: 3,
                                    scale: 10,
                                },
                                title: 'Your Location',
                                animation: google.maps.Animation.DROP
                            });

                            // Add accuracy circle
                            const accuracyCircle = new google.maps.Circle({
                                center: pos,
                                radius: position.coords.accuracy,
                                map: map,
                                fillColor: PRIMARY_COLOR,
                                fillOpacity: 0.15,
                                strokeColor: PRIMARY_COLOR,
                                strokeOpacity: 0.3,
                                strokeWeight: 1,
                            });

                            // Pan to location with smooth animation
                            this.smoothPanTo(map, pos);

                            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
                        },
                        () => {
                            alert('Error: The Geolocation service failed.');
                            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
                        }
                    );
                } else {
                    alert('Error: Your browser doesn\'t support geolocation.');
                }
            });

            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);

            // Add styles for the location button
            const style = document.createElement('style');
            style.textContent = `
                .location-button {
                    background-color: ${isDarkMode ? '#1F2937' : '#fff'};
                    border: 2px solid ${isDarkMode ? '#374151' : '#fff'};
                    border-radius: 50%;
                    box-shadow: 0 3px 8px rgba(0,0,0,.2);
                    color: ${isDarkMode ? '#E5E7EB' : '#666'};
                    cursor: pointer;
                    height: 44px;
                    width: 44px;
                    margin: 10px;
                    padding: 0;
                    text-align: center;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .location-button:hover {
                    background-color: ${isDarkMode ? '#374151' : '#f8f9fa'};
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,.25);
                }
                .location-button i {
                    font-size: 16px;
                }
            `;
            document.head.appendChild(style);
        },

        /**
         * Initialize the location picker map for bin creation/editing
         * @@param {string} mapElementId - HTML element ID for the map container
         * @@param {number} lat - Initial latitude
         * @@param {number} lng - Initial longitude
         */
        initializeLocationPickerMap: function (mapElementId, lat, lng) {
            console.log("Initializing location picker map");

            const initialPosition = { lat: lat, lng: lng };

            try {
                locationPickerMap = new google.maps.Map(document.getElementById(mapElementId), {
                    center: initialPosition,
                    zoom: 15,
                    mapTypeId: 'roadmap',
                    streetViewControl: false,
                    mapTypeControl: false,
                    fullscreenControl: false,
                    styles: getMapStyles()
                });

                // Place marker at initial position
                const marker = new google.maps.Marker({
                    position: initialPosition,
                    map: locationPickerMap,
                    draggable: true,
                    icon: this.getBinMarkerIcon('Active', 0, 1, 1.2),
                    animation: google.maps.Animation.DROP
                });

                // Update coordinates when marker is dragged
                google.maps.event.addListener(marker, 'dragend', function () {
                    const position = marker.getPosition();
                    if (dotNetRef) {
                        dotNetRef.invokeMethodAsync('UpdateCoordinates', position.lat(), position.lng());

                        // Get address from coordinates (reverse geocoding)
                        const geocoder = new google.maps.Geocoder();
                        geocoder.geocode({ location: position }, function (results, status) {
                            if (status === 'OK' && results[0]) {
                                dotNetRef.invokeMethodAsync('UpdateAddress', results[0].formatted_address);
                            }
                        });
                    }

                    // Update displayed coordinates
                    const coordsDisplay = document.getElementById('selected-coordinates');
                    if (coordsDisplay) {
                        coordsDisplay.textContent = `Koordinat: ${position.lat().toFixed(6)}, ${position.lng().toFixed(6)}`;
                    }
                });

                // Allow clicking on map to move marker
                google.maps.event.addListener(locationPickerMap, 'click', function (event) {
                    marker.setPosition(event.latLng);

                    // Trigger dragend to update coordinates
                    google.maps.event.trigger(marker, 'dragend');
                });

            } catch (error) {
                console.error("Error initializing location picker map:", error);
            }
        },

        /**
         * Show all waste bins on the main map with clustering
         * @@param {string} binsJson - JSON string of waste bin data
         */
        showAllBins: function (binsJson) {
            if (!mainMap) {
                console.error("Main map not initialized");
                return;
            }

            // Clear existing markers and clusters
            this.clearMarkers();

            try {
                const bins = JSON.parse(binsJson);
                console.log(`Showing ${bins.length} bins on map`);

                // Store the bins data globally for later use
                window.binsData = bins;

                // Create bounds object to fit all markers
                const bounds = new google.maps.LatLngBounds();

                bins.forEach(bin => {
                    if (bin.Latitude && bin.Longitude) {
                        const position = { lat: bin.Latitude, lng: bin.Longitude };

                        // Create enhanced marker
                        const marker = new google.maps.Marker({
                            position: position,
                            map: null, // Don't add to map yet, will be added via clusterer
                            title: bin.Label,
                            icon: this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 1, 1.5),
                            binId: bin.Id,
                            binData: bin,
                            animation: google.maps.Animation.DROP
                        });

                        // Add marker to markers array
                        markers.push(marker);

                        // Add marker to bounds
                        bounds.extend(position);

                        // Add enhanced click listener
                        marker.addListener('click', () => {
                            this.onMarkerClick(marker, bin);
                        });

                        // Add hover effects
                        marker.addListener('mouseover', () => {
                            marker.setIcon(this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 1, 1.7));
                        });

                        marker.addListener('mouseout', () => {
                            marker.setIcon(this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 1, 1.5));
                        });
                    }
                });

                // Initialize marker clustering
                this.initializeMarkerClustering();

                // Adjust map to fit all markers if there are any
                if (markers.length > 0) {
                    mainMap.fitBounds(bounds);

                    // If only one marker, zoom out a bit
                    if (markers.length === 1) {
                        google.maps.event.addListenerOnce(mainMap, 'bounds_changed', () => {
                            mainMap.setZoom(Math.min(15, mainMap.getZoom()));
                        });
                    }
                }

            } catch (error) {
                console.error("Error showing bins on map:", error);
            }
        },

        /**
         * Initialize marker clustering with multiple fallback methods
         */
        initializeMarkerClustering: function() {
            if (markerCluster) {
                markerCluster.clearMarkers();
                markerCluster = null;
            }

            if (markers.length === 0) {
                console.log("No markers to cluster");
                return;
            }

            // Custom cluster styles using recycling theme
            const clusterStyles = [
                {
                    textColor: 'white',
                    url: this.createClusterIcon(35, RECYCLING_GREEN),
                    height: 35,
                    width: 35,
                    textSize: 11,
                    fontFamily: 'Inter, sans-serif',
                    fontWeight: 'bold'
                },
                {
                    textColor: 'white',
                    url: this.createClusterIcon(45, '#F59E0B'),
                    height: 45,
                    width: 45,
                    textSize: 13,
                    fontFamily: 'Inter, sans-serif',
                    fontWeight: 'bold'
                },
                {
                    textColor: 'white',
                    url: this.createClusterIcon(55, '#EF4444'),
                    height: 55,
                    width: 55,
                    textSize: 15,
                    fontFamily: 'Inter, sans-serif',
                    fontWeight: 'bold'
                }
            ];

            try {
                // Try multiple approaches to find the MarkerClusterer
                if (window.markerClusterer && window.markerClusterer.MarkerClusterer) {
                    console.log("Using new MarkerClusterer (window.markerClusterer.MarkerClusterer)");
                    markerCluster = new window.markerClusterer.MarkerClusterer({
                        map: mainMap,
                        markers: markers,
                        renderer: {
                            render: ({ count, position }) => {
                                const color = count < 10 ? RECYCLING_GREEN : count < 50 ? '#F59E0B' : '#EF4444';
                                const size = count < 10 ? 35 : count < 50 ? 45 : 55;

                                return new google.maps.Marker({
                                    position,
                                    icon: {
                                        url: this.createClusterIcon(size, color),
                                        scaledSize: new google.maps.Size(size, size),
                                        anchor: new google.maps.Point(size / 2, size / 2)
                                    },
                                    label: {
                                        text: String(count),
                                        color: 'white',
                                        fontSize: '12px',
                                        fontWeight: 'bold'
                                    },
                                    title: `${count} atık kutusu`,
                                    zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,
                                });
                            }
                        }
                    });
                }
                else if (window.MarkerClusterer) {
                    console.log("Using global MarkerClusterer constructor");
                    markerCluster = new window.MarkerClusterer(mainMap, markers, {
                        styles: clusterStyles,
                        gridSize: 50,
                        maxZoom: 15,
                        minimumClusterSize: 2,
                        zoomOnClick: true,
                        averageCenter: true
                    });
                }
                else if (typeof MarkerClusterer === 'function') {
                    console.log("Using legacy MarkerClusterer constructor");
                    markerCluster = new MarkerClusterer(mainMap, markers, {
                        styles: clusterStyles,
                        gridSize: 50,
                        maxZoom: 15,
                        minimumClusterSize: 2,
                        zoomOnClick: true,
                        averageCenter: true
                    });
                }
                else {
                    console.warn("MarkerClusterer library not found, displaying individual markers");
                    // Fallback: display individual markers
                    markers.forEach(marker => marker.setMap(mainMap));
                }

                if (markerCluster) {
                    console.log("MarkerClusterer initialized successfully with", markers.length, "markers");
                }
            } catch (error) {
                console.error("Error creating marker clusterer:", error);
                // Fallback: display individual markers
                markers.forEach(marker => marker.setMap(mainMap));
            }
        },

        /**
         * Create cluster icon SVG
         * @@param {number} size - Icon size
         * @@param {string} color - Icon color
         * @@returns {string} - Data URL for the icon
         */
        createClusterIcon: function(size, color) {
            const svg = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" width="${size}" height="${size}">
                    <defs>
                        <filter id="shadow-${size}" x="-50%" y="-50%" width="200%" height="200%">
                            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3"/>
                        </filter>
                        <radialGradient id="grad-${size}" cx="30%" cy="30%" r="70%">
                            <stop offset="0%" style="stop-color:${color};stop-opacity:1" />
                            <stop offset="100%" style="stop-color:${this.darkenColor(color, 20)};stop-opacity:1" />
                        </radialGradient>
                    </defs>
                    <circle cx="${size/2}" cy="${size/2}" r="${size/2-2}"
                            fill="url(#grad-${size})"
                            stroke="white"
                            stroke-width="3"
                            opacity="0.95"
                            filter="url(#shadow-${size})"/>
                    <circle cx="${size/2}" cy="${size/2}" r="${size/2-8}" fill="white" opacity="0.2"/>
                    <g transform="translate(${size/2}, ${size/2}) scale(${size/50})">
                        <path d="M-8,-8 L-8,8 L8,8 L8,-8 Z" fill="white" opacity="0.9"/>
                        <path d="M-6,-6 L-6,6 L6,6 L6,-6 Z" fill="${color}"/>
                        <circle cx="0" cy="0" r="3" fill="white" opacity="0.8"/>
                    </g>
                </svg>
            `;
            return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
        },

        /**
         * Darken a color by a percentage
         * @@param {string} color - Hex color
         * @@param {number} percent - Percentage to darken
         * @@returns {string} - Darkened hex color
         */
        darkenColor: function(color, percent) {
            // Remove # if present
            const hex = color.replace('#', '');

            // Convert to RGB
            const num = parseInt(hex, 16);
            const amt = Math.round(2.55 * percent);

            // Extract RGB components
            const R = Math.max(0, Math.min(255, (num >> 16) - amt));
            const G = Math.max(0, Math.min(255, (num >> 8 & 0x00FF) - amt));
            const B = Math.max(0, Math.min(255, (num & 0x0000FF) - amt));

            // Convert back to hex
            return "#" + (0x1000000 + R * 0x10000 + G * 0x100 + B).toString(16).slice(1);
        },

        /**
         * Handle marker click with enhanced animations
         * @@param {google.maps.Marker} marker - Clicked marker
         * @@param {object} bin - Bin data
         */
        onMarkerClick: function(marker, bin) {
            // Close currently open info window if any
            if (currentInfoWindow) {
                currentInfoWindow.close();
                currentInfoWindow = null;
            }

            // Get position from marker
            const position = marker.getPosition();

            // Enhanced zoom animation
            const currentZoom = mainMap.getZoom();
            if (currentZoom < FOCUS_ZOOM) {
                // Smooth zoom animation
                let zoom = currentZoom;
                const zoomInterval = setInterval(() => {
                    if (zoom >= FOCUS_ZOOM) {
                        clearInterval(zoomInterval);
                        mainMap.setZoom(FOCUS_ZOOM);
                    } else {
                        zoom += 1;
                        mainMap.setZoom(zoom);
                    }
                }, 100);
            }

            // Ensure 3D mode with correct tilt
            mainMap.setTilt(DEFAULT_TILT);

            // Enhanced smooth pan to marker position
            this.smoothPanTo(mainMap, {
                lat: position.lat(),
                lng: position.lng()
            });

            // Enhanced marker animation
            marker.setAnimation(google.maps.Animation.BOUNCE);
            setTimeout(() => {
                marker.setAnimation(null);
                // Add pulsing effect
                this.addMarkerPulseEffect(marker, bin);
            }, 1500);

            // Open enhanced sidebar with detailed information
            this.openEnhancedBinSidebar(bin);

            // Store selected bin ID
            selectedBinId = bin.Id;

            // Notify Blazor of bin selection
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('OpenBinDetail', bin.Id);
            }
        },

        /**
         * Add pulsing effect to marker
         * @@param {google.maps.Marker} marker - Marker to animate
         * @@param {object} bin - Bin data
         */
        addMarkerPulseEffect: function(marker, bin) {
            let pulseCount = 0;
            const pulseInterval = setInterval(() => {
                if (pulseCount >= 3) {
                    clearInterval(pulseInterval);
                    marker.setIcon(this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 1, 1.5));
                    return;
                }

                // Pulse animation
                const scale = pulseCount % 2 === 0 ? 1.8 : 1.5;
                marker.setIcon(this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 1, scale));
                pulseCount++;
            }, 300);
        },

        /**
         * Open enhanced sidebar with better animations and content
         * @@param {object} bin - Bin data
         */
        openEnhancedBinSidebar: function (bin) {
            // Get sidebar element
            const sidebar = document.getElementById('bin-sidebar');
            if (!sidebar) return;

            // Calculate estimates with improved algorithm
            const getEstimatedFillDate = (fillLevel) => {
                if (!fillLevel || fillLevel >= 100) return "Bilinmiyor";

                const DAILY_FILL_RATE = 5.0;
                const remainingCapacity = 100 - fillLevel;
                const daysUntilFull = Math.ceil(remainingCapacity / DAILY_FILL_RATE);

                const estimatedDate = new Date();
                estimatedDate.setDate(estimatedDate.getDate() + daysUntilFull);

                return estimatedDate.toLocaleDateString('tr-TR');
            };

            const getEstimatedFillRate = (fillLevel, days) => {
                if (!fillLevel) return 0;
                const DAILY_FILL_RATE = 5.0;
                const estimatedFill = fillLevel + (DAILY_FILL_RATE * days);
                return Math.min(estimatedFill, 100).toFixed(0);
            };

            // Enhanced styling functions
            const getFillLevelColor = (level) => {
                if (!level) return '#6B7280';
                if (level >= 90) return '#EF4444';
                if (level >= 70) return '#F97316';
                if (level >= 50) return '#F59E0B';
                if (level >= 30) return '#3B82F6';
                return '#10B981';
            };

            // Get device status with icons
            const getDeviceStatusDisplay = (status) => {
                const statusMap = {
                    'Active': { text: "Aktif", icon: "fa-check-circle", color: "#10B981" },
                    'Inactive': { text: "Pasif", icon: "fa-ban", color: "#6B7280" },
                    'Maintenance': { text: "Bakımda", icon: "fa-wrench", color: "#F59E0B" },
                    'Faulty': { text: "Arızalı", icon: "fa-exclamation-triangle", color: "#EF4444" }
                };
                return statusMap[status] || { text: status, icon: "fa-question", color: "#6B7280" };
            };

            const deviceStatus = getDeviceStatusDisplay(bin.DeviceStatus);

            // Build enhanced sensor list
            const sensorsList = bin.Sensors && bin.Sensors.length > 0
                ? bin.Sensors.map(sensor => `
                    <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border-l-4 ${sensor.IsActive ? 'border-green-500' : 'border-red-500'} mb-2 transition-transform duration-300 hover:translate-x-1">
                        <div class="flex justify-between items-center mb-1">
                            <span class="font-medium text-gray-800 dark:text-white">${sensor.Type}</span>
                            <span class="${sensor.IsActive ? 'text-green-500' : 'text-red-500'} text-xs flex items-center">
                                <i class="fas ${sensor.IsActive ? 'fa-check-circle' : 'fa-times-circle'} mr-1 ${sensor.IsActive ? 'animate-pulse' : ''}"></i>
                                ${sensor.IsActive ? 'Aktif' : 'Pasif'}
                            </span>
                        </div>
                        <div class="text-xs text-gray-500 dark:text-gray-400">
                            Son Güncelleme: ${sensor.LastUpdate ? new Date(sensor.LastUpdate).toLocaleDateString('tr-TR') : '-'}
                        </div>
                    </div>
                `).join('')
                : `<div class="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                      <p class="text-sm text-gray-500 dark:text-gray-400">Sensör bulunamadı</p>
                   </div>`;

            // Enhanced sidebar content with better UX
            sidebar.innerHTML = `
                <div class="h-full flex flex-col">
                    <div class="p-4 bg-primary-500 text-white flex justify-between items-center">
                        <h2 class="text-xl font-bold flex items-center">
                            <i class="fas fa-dumpster mr-2"></i> ${bin.Label}
                        </h2>
                        <button class="p-2 hover:bg-primary-600 rounded" onclick="googleMapsInterop.closeBinSidebar()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <div class="p-4 bg-white dark:bg-gray-800 shadow-md">
                        <div class="bg-${deviceStatus.color.includes('10B981') ? 'green' : deviceStatus.color.includes('EF4444') ? 'red' : deviceStatus.color.includes('F59E0B') ? 'yellow' : 'gray'}-100 text-${deviceStatus.color.includes('10B981') ? 'green' : deviceStatus.color.includes('EF4444') ? 'red' : deviceStatus.color.includes('F59E0B') ? 'yellow' : 'gray'}-800 dark:bg-${deviceStatus.color.includes('10B981') ? 'green' : deviceStatus.color.includes('EF4444') ? 'red' : deviceStatus.color.includes('F59E0B') ? 'yellow' : 'gray'}-900/20 dark:text-${deviceStatus.color.includes('10B981') ? 'green' : deviceStatus.color.includes('EF4444') ? 'red' : deviceStatus.color.includes('F59E0B') ? 'yellow' : 'gray'}-300 px-3 py-1 inline-block rounded-full text-sm font-medium mb-2">
                            ${deviceStatus.text}
                        </div>
                        <p class="text-gray-700 dark:text-gray-300 mb-2 flex items-start">
                            <i class="fas fa-map-marker-alt text-red-500 mr-2 mt-1"></i>
                            <span>${bin.Address}</span>
                        </p>
                    </div>

                    <div class="flex-1 overflow-y-auto p-4">
                        <!-- Doluluk Durumu -->
                        <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105 mb-4">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                    <i class="fas fa-chart-line mr-2 text-amber-500"></i>
                                    Doluluk Durumu
                                </h3>
                            </div>

                            <div class="flex flex-col items-center justify-center space-y-3 py-2">
                                <div class="relative w-32 h-32">
                                    <svg class="w-full h-full" viewBox="0 0 36 36">
                                        <path class="stroke-current text-gray-200 dark:text-gray-700" fill="none" stroke-width="3.8" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                        <path style="stroke: ${getFillLevelColor(bin.FillLevel)}" fill="none" stroke-width="3.8" stroke-linecap="round"
                                              stroke-dasharray="${(bin.FillLevel || 0) * 100 / 100}, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831">
                                            <animate attributeName="stroke-dasharray"
                                                     from="0, 100"
                                                     to="${(bin.FillLevel || 0) * 100 / 100}, 100"
                                                     dur="1s"
                                                     fill="freeze"
                                                     calcMode="spline"
                                                     keyTimes="0; 1"
                                                     keySplines="0.42 0 0.58 1" />
                                        </path>
                                        <text x="18" y="20.5" class="fill-current font-bold text-gray-700 dark:text-gray-200" text-anchor="middle" font-size="${bin.FillLevel >= 100 ? '6' : '7'}">${bin.FillLevel || 0}%</text>
                                    </svg>
                                </div>

                                <div class="mt-2 space-y-2 w-full">
                                    <div class="flex justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-2">
                                        <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini dolma tarihi:</span>
                                        <span class="font-medium text-gray-700 dark:text-gray-300">${getEstimatedFillDate(bin.FillLevel)}</span>
                                    </div>

                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-gray-500 dark:text-gray-400">3 Gün Sonra Doluluk:</span>
                                        <span class="font-medium" style="color: ${getFillLevelColor(getEstimatedFillRate(bin.FillLevel, 3))}">
                                            %${getEstimatedFillRate(bin.FillLevel, 3)}
                                        </span>
                                    </div>

                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-gray-500 dark:text-gray-400">7 Gün Sonra Doluluk:</span>
                                        <span class="font-medium" style="color: ${getFillLevelColor(getEstimatedFillRate(bin.FillLevel, 7))}">
                                            %${getEstimatedFillRate(bin.FillLevel, 7)}
                                        </span>
                                    </div>
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                                    Son güncelleme: ${bin.UpdatedAt ? new Date(bin.UpdatedAt).toLocaleString('tr-TR') : '-'}
                                </div>
                            </div>
                        </div>

                        <!-- Sensörler -->
                        <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105 mb-4">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                    <i class="fas fa-microchip mr-2 text-green-500"></i>
                                    Sensörler
                                </h3>
                                <span class="bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 px-2 py-1 rounded-full text-xs">
                                    ${bin.Sensors ? bin.Sensors.length : 0} adet
                                </span>
                            </div>

                            <div class="space-y-3 max-h-60 overflow-y-auto">
                                ${sensorsList}
                            </div>
                        </div>

                        <!-- Yakındaki Noktalar -->
                        <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                            <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-3 flex items-center">
                                <i class="fas fa-map-marked-alt mr-2 text-amber-500"></i> Yakındaki Atık Kutuları
                            </h3>

                            <div class="space-y-2 max-h-48 overflow-y-auto overflow-x-hidden">
                                ${this.getNearbyBins(bin)}
                            </div>
                        </div>
                    </div>

                    <!-- Bottom actions -->
                    <div class="p-4 bg-gray-100 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 flex justify-between">
                        <button onclick="googleMapsInterop.editBin('${bin.Id}')" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center">
                            <i class="fas fa-edit mr-2"></i> Düzenle
                        </button>
                        <button onclick="googleMapsInterop.focusOnBin('${bin.Id}')" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded flex items-center">
                            <i class="fas fa-search-location mr-2"></i> 3D Görünüm
                        </button>
                    </div>
                </div>
            `;

            // Show sidebar
            sidebar.classList.add('active');
            document.body.classList.add('sidebar-active');
        },

        /**
         * Get nearby bins sorted by distance with improved styling
         * @@param {object} currentBin - Current bin data
         * @@returns {string} - HTML for nearby bins list
         */
        getNearbyBins: function(currentBin) {
            // Find nearby bins based on actual distance from current bin
            if (!currentBin || !markers || markers.length === 0) {
                return `<div class="text-center text-gray-500 dark:text-gray-400 p-4">
                          <i class="fas fa-map-marked-alt text-2xl mb-2 opacity-50"></i>
                          <p>Yakında atık kutusu bulunamadı</p>
                        </div>`;
            }

            try {
                // Get current bin's position
                const currentPosition = { lat: currentBin.Latitude, lng: currentBin.Longitude };

                // Calculate distances for all other bins
                const nearbyBins = [];
                markers.forEach(marker => {
                    // Skip the current bin
                    if (marker.binId === currentBin.Id) return;

                    const markerPosition = marker.getPosition();

                    // Use the Google Maps geometry library to calculate distance
                    const distance = google.maps.geometry.spherical.computeDistanceBetween(
                        new google.maps.LatLng(currentPosition),
                        markerPosition
                    );

                    // Find the bin data for this marker
                    const bin = this.findBinById(marker.binId);
                    if (bin && distance <= 2000) { // Only show bins within 2km
                        nearbyBins.push({
                            bin: bin,
                            distance: distance,
                            marker: marker
                        });
                    }
                });

                // Sort by distance and take the closest 4
                nearbyBins.sort((a, b) => a.distance - b.distance);
                const closestBins = nearbyBins.slice(0, 4);

                if (closestBins.length === 0) {
                    return `<div class="text-center text-gray-500 dark:text-gray-400 p-4">
                              <i class="fas fa-search-location text-2xl mb-2 opacity-50"></i>
                              <p>2km içinde atık kutusu bulunamadı</p>
                            </div>`;
                }

                // Create HTML for the closest bins with improved styling
                let html = '';
                closestBins.forEach((item, index) => {
                    const bin = item.bin;
                    const distanceInMeters = Math.round(item.distance);
                    let distanceText = distanceInMeters < 1000 ?
                        `${distanceInMeters}m` :
                        `${(distanceInMeters / 1000).toFixed(1)}km`;

                    // Get color and icon based on bin's fill level
                    let fillColor = '#10B981';
                    let fillIcon = 'fa-battery-quarter';
                    let fillText = 'Az Dolu';

                    if (bin.FillLevel >= 90) {
                        fillColor = '#EF4444';
                        fillIcon = 'fa-exclamation-triangle';
                        fillText = 'Kritik';
                    } else if (bin.FillLevel >= 70) {
                        fillColor = '#F97316';
                        fillIcon = 'fa-fill';
                        fillText = 'Yüksek';
                    } else if (bin.FillLevel >= 50) {
                        fillColor = '#F59E0B';
                        fillIcon = 'fa-fill-drip';
                        fillText = 'Orta';
                    } else if (bin.FillLevel >= 30) {
                        fillColor = '#3B82F6';
                        fillIcon = 'fa-battery-half';
                        fillText = 'Az Dolu';
                    }

                    html += `
                        <div class="group flex items-center justify-between p-3 bg-white dark:bg-gray-700 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-600 cursor-pointer mb-3
                                   transition-all duration-300 ease-out hover:scale-[1.02] hover:shadow-md border border-gray-100 dark:border-gray-600 hover:border-gray-200 dark:hover:border-gray-500"
                             onclick="googleMapsInterop.smoothFocusOnBin('${bin.Id}', ${index})"
                             style="animation-delay: ${index * 100}ms">
                            <div class="flex items-center min-w-0 flex-1">
                                <div class="relative">
                                    <div class="w-10 h-10 rounded-full flex items-center justify-center text-white shadow-sm transition-transform duration-300 group-hover:scale-110"
                                         style="background: linear-gradient(135deg, ${fillColor}, ${this.darkenColor(fillColor, 15)})">
                                        <i class="fas ${fillIcon} text-sm"></i>
                                    </div>
                                    ${bin.FillLevel >= 90 ? `
                                        <div class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse">
                                            <div class="absolute inset-0 bg-red-500 rounded-full animate-ping"></div>
                                        </div>
                                    ` : ''}
                                </div>
                                <div class="ml-3 min-w-0 flex-1">
                                    <div class="font-semibold text-gray-900 dark:text-white truncate text-sm group-hover:text-${fillColor.includes('10B981') ? 'green' : fillColor.includes('EF4444') ? 'red' : fillColor.includes('F97316') ? 'orange' : fillColor.includes('F59E0B') ? 'yellow' : 'blue'}-600 transition-colors duration-300">
                                        ${bin.Label}
                                    </div>
                                    <div class="flex items-center text-xs text-gray-500 dark:text-gray-400 mt-1 space-x-2">
                                        <span class="flex items-center">
                                            <i class="fas fa-route mr-1"></i>
                                            ${distanceText}
                                        </span>
                                        <span class="flex items-center" style="color: ${fillColor}">
                                            <i class="fas fa-percentage mr-1"></i>
                                            ${bin.FillLevel || 0}% ${fillText}
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-all duration-300 group-hover:translate-x-1">
                                <i class="fas fa-arrow-right text-sm"></i>
                            </div>
                        </div>
                    `;
                });

                return html;
            } catch (error) {
                console.error("Error finding nearby bins:", error);
                return `<div class="text-center text-gray-500 dark:text-gray-400 p-4">
                          <i class="fas fa-exclamation-triangle text-2xl mb-2 text-red-400"></i>
                          <p>Yakın atık kutuları hesaplanırken hata oluştu</p>
                        </div>`;
            }
        },

        /**
         * Smooth focus on nearby bin with enhanced animation and delay
         * @@param {string} binId - ID of the bin to focus on
         * @@param {number} animationDelay - Animation delay for staggered effects
         */
        smoothFocusOnBin: function(binId, animationDelay = 0) {
            const marker = markers.find(m => m.binId === binId);
            if (!marker) return;

            // Add click feedback animation
            const clickedElement = event.currentTarget;
            if (clickedElement) {
                clickedElement.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    clickedElement.style.transform = '';
                }, 150);
            }

            // Close current sidebar with smooth animation
            this.closeBinSidebar();

            setTimeout(() => {
                const position = marker.getPosition();

                // Enhanced smooth zoom and pan with easing
                const currentZoom = mainMap.getZoom();
                if (currentZoom < FOCUS_ZOOM) {
                    this.smoothZoomTo(mainMap, FOCUS_ZOOM);
                }

                // Smooth pan with custom timing
                this.smoothPanTo(mainMap, {
                    lat: position.lat(),
                    lng: position.lng()
                });

                // Enhanced marker highlight with multiple effects
                setTimeout(() => {
                    // Bounce animation
                    marker.setAnimation(google.maps.Animation.BOUNCE);

                    // Scale animation
                    const originalIcon = marker.getIcon();
                    marker.setIcon(this.getBinMarkerIcon(
                        marker.binData.DeviceStatus,
                        marker.binData.FillLevel,
                        1,
                        2.0
                    ));

                    setTimeout(() => {
                        marker.setAnimation(null);
                        marker.setIcon(originalIcon);

                        // Trigger click to open sidebar
                        google.maps.event.trigger(marker, 'click');
                    }, 1000);
                }, 400);

            }, 300 + (animationDelay * 50)); // Staggered animation delay
        },

        /**
         * Smooth zoom animation
         * @@param {google.maps.Map} map - Map object
         * @@param {number} targetZoom - Target zoom level
         */
        smoothZoomTo: function(map, targetZoom) {
            const currentZoom = map.getZoom();
            if (currentZoom === targetZoom) return;

            const zoomStep = currentZoom < targetZoom ? 1 : -1;
            let zoom = currentZoom;

            const zoomInterval = setInterval(() => {
                zoom += zoomStep;
                map.setZoom(zoom);

                if (zoom === targetZoom) {
                    clearInterval(zoomInterval);
                }
            }, 150);
        },

        /**
         * Smoothly pan to a location with enhanced easing
         * @@param {google.maps.Map} map - Map object
         * @@param {google.maps.LatLng} position - Position to pan to
         */
        smoothPanTo: function (map, position) {
            if (!position || !isFinite(position.lat) || !isFinite(position.lng)) {
                console.error("Invalid coordinates for smoothPanTo:", position);
                return;
            }

            const currentCenter = map.getCenter();
            const currentLat = currentCenter.lat();
            const currentLng = currentCenter.lng();
            const targetLat = position.lat;
            const targetLng = position.lng;

            if (!isFinite(currentLat) || !isFinite(currentLng) ||
                !isFinite(targetLat) || !isFinite(targetLng)) {
                console.error("Invalid coordinate calculation in smoothPanTo");
                return;
            }

            // Enhanced animation with better easing
            const frames = 60;
            const duration = 1200;
            let frame = 0;

            const animate = () => {
                if (frame >= frames) {
                    try {
                        map.panTo(position);
                    } catch (e) {
                        console.error("Error in final panTo:", e);
                    }
                    return;
                }

                // Cubic bezier easing (ease-in-out)
                const t = frame / frames;
                const progress = t < 0.5 ?
                    4 * t * t * t :
                    1 - Math.pow(-2 * t + 2, 3) / 2;

                const lat = currentLat + (targetLat - currentLat) * progress;
                const lng = currentLng + (targetLng - currentLng) * progress;

                if (!isFinite(lat) || !isFinite(lng)) {
                    console.error("Animation calculated invalid coordinates:", { lat, lng });
                    return;
                }

                try {
                    map.panTo({ lat, lng });
                } catch (e) {
                    console.error("Error during animation panTo:", e);
                    return;
                }

                frame++;
                requestAnimationFrame(animate);
            };

            animate();
        },

        /**
         * Show waste bins on the location picker map (for reference)
         * @@param {string} binsJson - JSON string of waste bin data
         */
        showBinsOnPickerMap: function (binsJson) {
            if (!locationPickerMap) {
                console.error("Location picker map not initialized");
                return;
            }

            try {
                const bins = JSON.parse(binsJson);

                bins.forEach(bin => {
                    if (bin.Latitude && bin.Longitude) {
                        const position = { lat: bin.Latitude, lng: bin.Longitude };

                        // Create marker with semi-transparent icon
                        const marker = new google.maps.Marker({
                            position: position,
                            map: locationPickerMap,
                            title: bin.Label,
                            icon: this.getBinMarkerIcon(bin.DeviceStatus, bin.FillLevel, 0.6, 1.0),
                            clickable: false
                        });
                    }
                });

            } catch (error) {
                console.error("Error showing bins on picker map:", error);
            }
        },

        /**
         * Focus on a specific bin in the main map
         * @@param {string} binId - ID of the bin to focus on
         */
        focusOnBin: function (binId) {
            if (!binId) {
                console.error("Invalid binId provided to focusOnBin");
                return;
            }

            const marker = markers.find(m => m.binId === binId);

            if (!marker) {
                console.error("No marker found with binId:", binId);
                return;
            }

            try {
                const position = marker.getPosition();

                if (!position || !isFinite(position.lat()) || !isFinite(position.lng())) {
                    console.error("Invalid marker position:", position);
                    return;
                }

                // Enhanced focus animation
                this.smoothZoomTo(mainMap, FOCUS_ZOOM);
                mainMap.setTilt(DEFAULT_TILT);

                this.smoothPanTo(mainMap, {
                    lat: position.lat(),
                    lng: position.lng()
                });

                // Enhanced marker animation
                marker.setAnimation(google.maps.Animation.BOUNCE);
                setTimeout(() => {
                    marker.setAnimation(null);
                    google.maps.event.trigger(marker, 'click');
                }, 1500);

            } catch (e) {
                console.error("Error in focusOnBin:", e);
            }
        },

        /**
         * Reset the map state
         */
        resetMapState: function () {
            if (currentInfoWindow) {
                currentInfoWindow.close();
                currentInfoWindow = null;
            }

            this.closeBinSidebar();
            selectedBinId = null;
        },

        /**
         * Clear all markers from the map
         */
        clearMarkers: function () {
            if (markerCluster) {
                markerCluster.clearMarkers();
                markerCluster = null;
            }

            markers.forEach(marker => {
                marker.setMap(null);
            });
            markers = [];
        },

        /**
         * Close the bin sidebar
         */
        closeBinSidebar: function () {
            const sidebar = document.getElementById('bin-sidebar');
            if (sidebar) {
                sidebar.classList.remove('active');
                document.body.classList.remove('sidebar-active');
            }
        },

        /**
         * Edit a bin (call .NET method)
         * @@param {string} binId - ID of the bin to edit
         */
        editBin: function (binId) {
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('EditBin', binId);
            }
        },

        /**
         * Find bin data by ID
         * @@param {string} binId - Bin ID to find
         * @@returns {object|null} - Bin data or null if not found
         */
        findBinById: function(binId) {
            if (!window.binsData || !binId) return null;
            return window.binsData.find(bin => bin.Id === binId) || null;
        },

        /**
         * Get enhanced marker icon based on bin status and fill level
         * @@param {string} status - Bin status
         * @@param {number} fillLevel - Fill level percentage
         * @@param {number} opacity - Icon opacity (0-1)
         * @@param {number} scale - Icon scale multiplier
         * @@returns {object} - Marker icon configuration
         */
        getBinMarkerIcon: function (status, fillLevel, opacity = 1, scale = 1.5) {
            // Determine colors based on fill level
            let fillColor, strokeColor;

            if (fillLevel >= 90) {
                fillColor = '#EF4444'; // Red
                strokeColor = '#B91C1C';
            } else if (fillLevel >= 70) {
                fillColor = '#F97316'; // Orange
                strokeColor = '#C2410C';
            } else if (fillLevel >= 50) {
                fillColor = '#F59E0B'; // Amber
                strokeColor = '#B45309';
            } else if (fillLevel >= 30) {
                fillColor = PRIMARY_COLOR; // Blue
                strokeColor = '#1D4ED8';
            } else {
                fillColor = '#10B981'; // Green
                strokeColor = '#059669';
            }

            // Adjust for status
            if (status === 'Inactive') {
                fillColor = '#9CA3AF';
                strokeColor = '#6B7280';
            } else if (status === 'Maintenance') {
                fillColor = '#FBBF24';
                strokeColor = '#D97706';
            } else if (status === 'Faulty') {
                fillColor = '#F87171';
                strokeColor = '#DC2626';
            }

            const size = 32 * scale;
            const iconSize = 16 * scale;

            // Enhanced SVG with better design and animations
            const svg = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size + 16} ${size + 20}" width="${size + 16}" height="${size + 20}">
                    <defs>
                        <filter id="shadow-${status}-${fillLevel}" x="-50%" y="-50%" width="200%" height="200%">
                            <feDropShadow dx="0" dy="2" stdDeviation="3" flood-opacity="0.3"/>
                        </filter>
                        <radialGradient id="grad-${status}-${fillLevel}" cx="50%" cy="30%" r="70%">
                            <stop offset="0%" style="stop-color:${fillColor};stop-opacity:1" />
                            <stop offset="100%" style="stop-color:${strokeColor};stop-opacity:1" />
                        </radialGradient>
                        ${fillLevel >= 90 ? `
                        <animate attributeName="r" values="0;12;0" dur="2s" repeatCount="indefinite" begin="0s"/>
                        ` : ''}
                    </defs>

                    <!-- Pulse ring for critical bins -->
                    ${fillLevel >= 90 ? `
                    <circle cx="${(size + 16) / 2}" cy="${size / 2 + 8}" r="0" fill="${fillColor}" opacity="0.3">
                        <animate attributeName="r" values="0;${size/2 + 8};0" dur="2s" repeatCount="indefinite"/>
                        <animate attributeName="opacity" values="0.3;0;0.3" dur="2s" repeatCount="indefinite"/>
                    </circle>
                    ` : ''}

                    <!-- Main pin circle -->
                    <circle cx="${(size + 16) / 2}" cy="${size / 2 + 8}" r="${size / 2}"
                            fill="url(#grad-${status}-${fillLevel})"
                            stroke="white"
                            stroke-width="3"
                            opacity="${opacity}"
                            filter="url(#shadow-${status}-${fillLevel})"/>

                    <!-- Pin point -->
                    <path d="M${(size + 16) / 2},${size + 8} L${(size + 16) / 2 + 6},${size + 18} L${(size + 16) / 2 - 6},${size + 18} Z"
                          fill="url(#grad-${status}-${fillLevel})"
                          stroke="white"
                          stroke-width="2"
                          opacity="${opacity}"/>

                    <!-- Trash bin icon -->
                    <g transform="translate(${(size + 16) / 2 - iconSize / 2}, ${size / 2 + 8 - iconSize / 2}) scale(${iconSize / 16})">
                        <!-- Bin body -->
                        <rect x="2" y="5" width="12" height="9" rx="1" fill="white" opacity="0.9"/>
                        <!-- Bin lid -->
                        <rect x="1" y="4" width="14" height="2" rx="1" fill="white" opacity="0.9"/>
                        <!-- Handle -->
                        <rect x="6" y="2" width="4" height="3" rx="1" fill="white" opacity="0.7"/>

                        <!-- Fill level indicator -->
                        <rect x="3" y="${14 - (fillLevel / 100) * 8}" width="10" height="${(fillLevel / 100) * 8}"
                              fill="${fillColor}" opacity="0.3" rx="0.5"/>

                        <!-- Recycling symbol -->
                        <g transform="translate(8, 9) scale(0.4)" fill="white" opacity="0.8">
                            <path d="M0,-3 L-1.5,-1 L1.5,-1 Z M-3,1.5 L-4.5,0 L-1.5,0 Z M3,1.5 L1.5,0 L4.5,0 Z"/>
                        </g>
                    </g>

                    <!-- Status indicator -->
                    ${status === 'Faulty' ? `<circle cx="${size + 8}" cy="8" r="6" fill="#DC2626" stroke="white" stroke-width="2"/>
                                            <path d="M${size + 5},5 L${size + 11},11 M${size + 11},5 L${size + 5},11" stroke="white" stroke-width="2" stroke-linecap="round"/>` : ''}
                    ${status === 'Maintenance' ? `<circle cx="${size + 8}" cy="8" r="6" fill="#D97706" stroke="white" stroke-width="2"/>
                                                  <path d="M${size + 5},8 L${size + 11},8 M${size + 8},5 L${size + 8},11" stroke="white" stroke-width="2" stroke-linecap="round"/>` : ''}
                    ${status === 'Inactive' ? `<circle cx="${size + 8}" cy="8" r="6" fill="#6B7280" stroke="white" stroke-width="2"/>
                                              <circle cx="${size + 8}" cy="8" r="2" fill="white"/>` : ''}
                </svg>
            `;

            const svgBase64 = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));

            return {
                url: svgBase64,
                scaledSize: new google.maps.Size(size + 16, size + 20),
                anchor: new google.maps.Point((size + 16) / 2, size + 18),
                labelOrigin: new google.maps.Point((size + 16) / 2, -8)
            };
        }
    };

    /**
     * Reset filter dropdowns (called from Blazor)
     */
    window.resetFilterDropdowns = function () {
        const statusDropdown = document.querySelector('select[onchange*="FilterByStatus"]');
        const fillLevelDropdown = document.querySelector('select[onchange*="FilterByFillLevel"]');

        if (statusDropdown) statusDropdown.value = '';
        if (fillLevelDropdown) fillLevelDropdown.value = '';
    };

    /**
     * Enhanced search functionality for Blazor integration has been removed.
     * Map search feature is no longer available.
     *
     * To fix search functionality in Blazor table, use this pattern:
     *
     * HTML:
     * <input type="text"
     *        placeholder="Etiket veya adres ara..."
     *        class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
     *        @@bind="searchText"
     *        @@bind:event="oninput"
     *        @@oninput="OnSearchChanged" />
     *
     * C#:
     * private void OnSearchChanged(ChangeEventArgs e)
     * {
     *     searchText = e.Value?.ToString() ?? string.Empty;
     *     ApplyFilters();
     * }
     *
     * private void ApplyFilters()
     * {
     *     if (wasteBins == null)
     *     {
     *         filteredBins = new List<ResultWasteBinDto>();
     *         return;
     *     }
     *
     *     var query = wasteBins.AsEnumerable();
     *
     *     // Apply search text with Turkish culture support
     *     if (!string.IsNullOrEmpty(searchText))
     *     {
     *         var search = searchText.ToLower(new CultureInfo("tr-TR"));
     *         query = query.Where(b =>
     *             (b.Label?.ToLower(new CultureInfo("tr-TR")).Contains(search) == true) ||
     *             (b.Address?.ToLower(new CultureInfo("tr-TR")).Contains(search) == true));
     *     }
     *
     *     // Apply other filters...
     *     filteredBins = query.ToList();
     *     StateHasChanged();
     * }
     *
     * For the "Yakındaki Atık Kutuları" section, update the container as follows:
     *
     * <!-- Yakındaki Noktalar -->
     * <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
     *     <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-3 flex items-center">
     *         <i class="fas fa-map-marked-alt mr-2 text-amber-500"></i> Yakındaki Atık Kutuları
     *     </h3>
     *
     *     <!-- Add overflow-x-hidden to prevent horizontal scrolling -->
     *     <div class="space-y-2 max-h-48 overflow-y-auto overflow-x-hidden">
     *         @* JS-generated list content *@
     *     </div>
     * </div>
     *
     * Enhanced Dark Mode Styles:
     * Dark mode now provides a much darker map experience with:
     * - Very dark backgrounds (#0f0f0f)
     * - Dark roads and highways
     * - Dark water bodies (#0a1a2a)
     * - Reduced visual clutter
     * - Better contrast for markers and text
     *
     * Additional CSS for smooth animations (add to your main CSS file):
     *
     * .group:hover .group-hover\:scale-110 {
     *     transform: scale(1.1);
     * }
     *
     * .group:hover .group-hover\:translate-x-1 {
     *     transform: translateX(0.25rem);
     * }
     *
     * .transition-all {
     *     transition-property: all;
     *     transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
     * }
     *
     * .duration-300 {
     *     transition-duration: 300ms;
     * }
     *
     * .ease-out {
     *     transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
     * }
     *
     * @@keyframes pulse {
     *     0%, 100% { opacity: 1; }
     *     50% { opacity: 0.5; }
     * }
     *
     * @@keyframes ping {
     *     75%, 100% {
     *         transform: scale(2);
     *         opacity: 0;
     *     }
     * }
     *
     * .animate-pulse {
     *     animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
     * }
     *
     * .animate-ping {
     *     animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
     * }
     */
</script>

@code {
    private List<ResultWasteBinDto> wasteBins;
    private List<ResultWasteBinDto> filteredBins = new List<ResultWasteBinDto>();
    private List<ResultWasteBinDto> displayedBins => GetDisplayedBins();
    private CreateWasteBinDto binModel = new();
    private ResultWasteBinDto selectedBin;

    private List<ResultSensorDto> availableSensors;
    private List<Guid> selectedSensorIds = new List<Guid>();

    private Guid editingId;
    private Guid expandedRowId;
    private Guid binIdToDelete;
    private string searchText = "";
    private string statusFilter = "";
    private string fillLevelFilter = "";

    // UI state
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showLocationModal = false;
    private bool showLocationPickerModal = false;
    private bool showDeleteConfirmation = false;
    private bool showSaveConfirmation = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => filteredBins == null ? 0 : (int)Math.Ceiling(filteredBins.Count / (double)pageSize);
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    // Sorting
    private string sortField = "Index";
    private bool sortAscending = true;

    // Map flags
    private bool mainMapInitialized = false;
    private bool locationPickerMapInitialized = false;
    private Guid _lastExpandedRowId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadSensors();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await JS.InvokeVoidAsync("initializeGoogleMaps", DotNetObjectReference.Create(this));
                await Task.Delay(500);
                await InitializeMainMap();
            }

            // Handle location picker modal
            if (showLocationPickerModal && !locationPickerMapInitialized)
            {
                await InitializeLocationPickerMap();
            }

            // Handle expanded rows
            if (expandedRowId != Guid.Empty && expandedRowId != _lastExpandedRowId)
            {
                _lastExpandedRowId = expandedRowId;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            toastService.ShowError($"Render hatası: {ex.Message}");
        }
    }

    private async Task InitializeMainMap()
    {
        try
        {
            // Initialize the main map
            await JS.InvokeVoidAsync("googleMapsInterop.initializeMainMap", "main-map");

            // Show all bins on map
            await ShowAllBinsOnMap();

            mainMapInitialized = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing main map: {ex.Message}");
            toastService.ShowError($"Harita yüklenemedi: {ex.Message}");
        }
    }

    private async Task InitializeLocationPickerMap()
    {
        if (showLocationPickerModal)
        {
            try
            {
                // Give the DOM time to render the map container
                await Task.Delay(200);

                // Initialize map with current coordinates or default
                double lat = binModel.Latitude != 0 ? binModel.Latitude : 41.1634; // Çorlu default
                double lng = binModel.Longitude != 0 ? binModel.Longitude : 27.7951;

                await JS.InvokeVoidAsync("googleMapsInterop.initializeLocationPickerMap",
                    "location-picker-map", lat, lng);

                // Show existing bins on picker map
                if (wasteBins?.Any() == true)
                {
                    var binsJson = System.Text.Json.JsonSerializer.Serialize(
                        showEditModal
                            ? wasteBins.Where(b => b.Id != editingId).ToList()
                            : wasteBins
                    );
                    await JS.InvokeVoidAsync("googleMapsInterop.showBinsOnPickerMap", binsJson);
                }

                locationPickerMapInitialized = true;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error initializing location picker map: {ex.Message}");
                toastService.ShowError($"Konum seçici yüklenemedi: {ex.Message}");
            }
        }
    }

    private List<ResultWasteBinDto> GetDisplayedBins()
    {
        if (filteredBins == null) return new List<ResultWasteBinDto>();

        return filteredBins
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task LoadData()
    {
        wasteBins = await WasteBinService.GetAllWasteBinsAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (wasteBins == null)
        {
            filteredBins = new List<ResultWasteBinDto>();
            return;
        }

        var query = wasteBins.AsEnumerable();

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            query = query.Where(b => b.DeviceStatus == statusFilter);
        }

        // Apply fill level filter
        if (!string.IsNullOrEmpty(fillLevelFilter))
        {
            var parts = fillLevelFilter.Split('-');
            if (parts.Length == 2 &&
                double.TryParse(parts[0], out double min) &&
                double.TryParse(parts[1], out double max))
            {
                query = query.Where(b => b.FillLevel >= min && b.FillLevel <= max);
            }
        }

        // Apply search text
        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            query = query.Where(b =>
                (b.Label?.ToLower().Contains(search) == true) ||
                (b.Address?.ToLower().Contains(search) == true));
        }

        // Apply sorting
        query = ApplySorting(query);

        filteredBins = query.ToList();

        // Reset to first page when filters change
        if (currentPage > 1 &&
            (currentPage - 1) * pageSize >= filteredBins.Count)
        {
            currentPage = 1;
        }
    }

    private IEnumerable<ResultWasteBinDto> ApplySorting(IEnumerable<ResultWasteBinDto> query)
    {
        switch (sortField)
        {
            case "Index":
                return sortAscending
                    ? query.Select((item, index) => new { Item = item, Index = index })
                            .OrderBy(x => x.Index)
                            .Select(x => x.Item)
                    : query.Select((item, index) => new { Item = item, Index = index })
                            .OrderByDescending(x => x.Index)
                            .Select(x => x.Item);
            case "Label":
                return sortAscending ? query.OrderBy(b => b.Label) : query.OrderByDescending(b => b.Label);
            case "Address":
                return sortAscending ? query.OrderBy(b => b.Address) : query.OrderByDescending(b => b.Address);
            case "LastUpdate":
                return sortAscending ? query.OrderBy(b => b.UpdatedAt) : query.OrderByDescending(b => b.UpdatedAt);
            case "DeviceStatus":
                return sortAscending ? query.OrderBy(b => b.DeviceStatus) : query.OrderByDescending(b => b.DeviceStatus);
            case "FillLevel":
                return sortAscending ? query.OrderBy(b => b.FillLevel ?? 0) : query.OrderByDescending(b => b.FillLevel ?? 0);
            default:
                return query;
        }
    }

    private async Task LoadSensors()
    {
        availableSensors = await SensorService.GetAllSensorsAsync();
    }

    private async Task RefreshData()
    {
        expandedRowId = Guid.Empty;
        await LoadData();
        await ShowAllBinsOnMap();
        toastService.ShowSuccess("Veriler yenilendi");
    }

    private void FilterByStatus(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void FilterByFillLevel(ChangeEventArgs e)
    {
        fillLevelFilter = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void SearchBins(KeyboardEventArgs e)
    {
        ApplyFilters();
    }

    private async Task ClearFilters()
    {
        searchText = "";
        statusFilter = "";
        fillLevelFilter = "";

        // Call JavaScript to reset dropdown UI values
        await JS.InvokeVoidAsync("resetFilterDropdowns");

        // Apply the filters to update the displayed list
        ApplyFilters();

        StateHasChanged(); // Force UI update
    }

    // Sidebar'ı açmak için JS tarafından çağrılacak metot
    [JSInvokable]
    public async Task OpenBinSidebar(string binId)
    {
        if (Guid.TryParse(binId, out Guid Id))
        {
            // İlgili çöp kutusunu bul
            var bin = wasteBins?.FirstOrDefault(b => b.Id == Id);
            if (bin != null)
            {
                // Bin bilgilerini JS'ye gönder
                var binJson = System.Text.Json.JsonSerializer.Serialize(bin);
                await JS.InvokeVoidAsync("googleMapsInterop.showBinSidebar", bin);

                // Ayrıca detay satırını da aç (opsiyonel)
                expandedRowId = Id;
                StateHasChanged();
            }
        }
    }

    // Bin düzenleme için
    [JSInvokable]
    public void EditBin(string binId)
    {
        if (Guid.TryParse(binId, out Guid Id))
        {
            var bin = wasteBins?.FirstOrDefault(b => b.Id == Id);
            if (bin != null)
            {
                OpenEditModal(bin);
            }
        }
    }

    private void SortTable(string field)
    {
        // Sıralama öncesi açık detay satırını kapat
        expandedRowId = Guid.Empty;

        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplyFilters();
    }

    private void ToggleSensorSelection(Guid sensorId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedSensorIds.Contains(sensorId))
                selectedSensorIds.Add(sensorId);
        }
        else
        {
            selectedSensorIds.Remove(sensorId);
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        expandedRowId = Guid.Empty; // Close any expanded rows when changing page
    }

    private void ToggleRowExpansion(Guid id)
    {
        if (expandedRowId == id)
        {
            expandedRowId = Guid.Empty;
        }
        else
        {
            expandedRowId = id;
        }
        _lastExpandedRowId = Guid.Empty; // Reset flag to force reload
    }

    private void OnFillLevelInput(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value.ToString(), out double value))
        {
            binModel.FillLevel = value;
            // Update IsFilled based on fill level
            binModel.IsFilled = value >= 90;
        }
    }

    private async Task OpenCreateModal()
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error resetting map: {ex.Message}");
        }

        binModel = new CreateWasteBinDto
            {
                DeviceStatus = "Active",
                Latitude = 41.1634, // Çorlu Merkezi
                Longitude = 27.7951,
                FillLevel = 0,
                IsFilled = false
            };

        selectedSensorIds.Clear();
        showCreateModal = true;
        showEditModal = false;
    }

    private void OpenEditModal(ResultWasteBinDto bin)
    {
        // Harita durumunu sıfırlayın
        try
        {
            JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error resetting map state before opening edit modal: {ex.Message}");
        }

        binModel = new CreateWasteBinDto
            {
                Label = bin.Label,
                Address = bin.Address,
                Latitude = bin.Latitude,
                Longitude = bin.Longitude,
                IsFilled = bin.IsFilled,
                FillLevel = bin.FillLevel,
                DeviceStatus = bin.DeviceStatus,
                CreatedAt = bin.CreatedAt,
                UpdatedAt = DateTime.Now
            };

        // Bağlı sensörleri seç
        selectedSensorIds = bin.Sensors?.Select(s => s.SensorId).ToList() ?? new List<Guid>();

        editingId = bin.Id;
        showEditModal = true;
        showCreateModal = false;
    }

    private async Task OpenLocationPicker()
    {
        showLocationPickerModal = true;
        locationPickerMapInitialized = false;

        StateHasChanged();
        await Task.Delay(100);
        await InitializeLocationPickerMap();
    }

    // Doluluk hesaplaması için sabitler
    private const double DAILY_FILL_RATE = 5.0; // Günlük ortalama doluluk artışı yüzdesi

    // Belirli bir tarihteki tahmini doluluk oranı
    private double GetEstimatedFillRate(double? currentFillLevel, int daysFromNow)
    {
        if (!currentFillLevel.HasValue)
            return 0;

        // Mevcut doluluk + günlük artış * gün sayısı
        double estimatedFill = currentFillLevel.Value + (DAILY_FILL_RATE * daysFromNow);

        // Maksimum 100%
        return Math.Min(estimatedFill, 100);
    }

    // Tahmini dolma tarihi
    private string GetEstimatedFillDate(double? fillLevel)
    {
        if (!fillLevel.HasValue || fillLevel >= 100)
            return "Bilinmiyor";

        // Kalan doluluk yüzdesi
        double remainingCapacity = 100 - fillLevel.Value;

        // Tahmini gün sayısı
        int daysUntilFull = (int)Math.Ceiling(remainingCapacity / DAILY_FILL_RATE);

        // Tahmini dolma tarihi
        DateTime estimatedDate = DateTime.Now.AddDays(daysUntilFull);

        return estimatedDate.ToString("dd.MM.yyyy");
    }

    private void CloseLocationPickerModal()
    {
        showLocationPickerModal = false;
        locationPickerMapInitialized = false;
    }

    private void ConfirmLocationSelection()
    {
        // Coordinates are updated by JS interop, we just need to close the modal
        showLocationPickerModal = false;
        locationPickerMapInitialized = false;
    }

    private async Task CloseModal()
    {
        showCreateModal = false;
        showEditModal = false;

        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error resetting map: {ex.Message}");
        }

        binModel = new();
        selectedSensorIds.Clear();
    }

    private void DeleteBinConfirmation(Guid id)
    {
        binIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        binIdToDelete = Guid.Empty;
    }

    private async Task ConfirmDelete()
    {
        var success = await WasteBinService.DeleteWasteBinAsync(binIdToDelete);
        if (success)
        {
            toastService.ShowSuccess("Atık kutusu başarıyla silindi.");
            await LoadData();
            await ShowAllBinsOnMap();

            if (expandedRowId == binIdToDelete)
            {
                expandedRowId = Guid.Empty;
            }
        }
        else
        {
            toastService.ShowError("Silme işlemi sırasında bir hata oluştu.");
        }
        showDeleteConfirmation = false;
    }

    private void ShowSaveConfirmation()
    {
        // Validate required fields
        if (string.IsNullOrWhiteSpace(binModel.Label) || string.IsNullOrWhiteSpace(binModel.Address) ||
            binModel.Latitude == 0 || binModel.Longitude == 0)
        {
            toastService.ShowWarning("Lütfen tüm zorunlu alanları doldurun.");
            return;
        }

        showSaveConfirmation = true;
    }

    private async Task SaveBin()
    {
        bool success;

        // Bin modeline seçilen sensör ID'lerini ata
        binModel.SensorIds = selectedSensorIds;

        if (showEditModal)
        {
            var updateDto = new UpdateWasteBinDto
                {
                    WasteBinId = editingId,
                    Label = binModel.Label,
                    Address = binModel.Address,
                    Latitude = binModel.Latitude,
                    Longitude = binModel.Longitude,
                    IsFilled = binModel.IsFilled,
                    DeviceStatus = binModel.DeviceStatus,
                    FillLevel = binModel.FillLevel,
                    SensorIds = selectedSensorIds,
                    UpdatedAt = DateTime.Now
                };
            success = await WasteBinService.UpdateWasteBinAsync(updateDto);
        }
        else
        {
            binModel.CreatedAt = DateTime.Now;
            binModel.UpdatedAt = DateTime.Now;
            success = await WasteBinService.CreateWasteBinAsync(binModel);
        }

        if (success)
        {
            toastService.ShowSuccess(showEditModal ? "Atık kutusu başarıyla güncellendi." : "Atık kutusu başarıyla eklendi.");
            showSaveConfirmation = false;

            // Harita durumunu sıfırla ve formu kapat
            try
            {
                await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error resetting map state after save: {ex.Message}");
            }

            // Formu kapat
            showCreateModal = false;
            showEditModal = false;
            binModel = new();
            selectedSensorIds.Clear();

            // Verileri yenile
            await LoadData();
            await ShowAllBinsOnMap();
        }
        else
        {
            toastService.ShowError("İşlem sırasında bir hata oluştu.");
            showSaveConfirmation = false;
        }
    }

    private async Task ShowAllBinsOnMap()
    {
        try
        {
            if (wasteBins == null || !wasteBins.Any())
            {
                wasteBins = await WasteBinService.GetAllWasteBinsAsync();
            }

            if (wasteBins != null && wasteBins.Any())
            {
                // JSON'a dönüştür
                var binsJson = System.Text.Json.JsonSerializer.Serialize(wasteBins);

                // JavaScript fonksiyonunu çağır
                await JS.InvokeVoidAsync("googleMapsInterop.showAllBins", binsJson);
            }
            else
            {
                toastService.ShowWarning("Gösterilecek atık kutusu bulunamadı");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Atık kutuları haritada gösterilirken hata oluştu: {ex.Message}");
            Console.Error.WriteLine($"Error showing bins on map: {ex}");
        }
    }

    private async Task FocusOnBin(Guid binId)
    {
        await JS.InvokeVoidAsync("googleMapsInterop.focusOnBin", binId.ToString());
    }

    // Helper methods for UI styling
    private string GetDeviceStatusColor(string status)
    {
        return status switch
        {
            "Active" => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            "Inactive" => "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300",
            "Maintenance" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300",
            "Faulty" => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetDeviceStatusTextColor(string status)
    {
        return status switch
        {
            "Active" => "text-green-600 dark:text-green-400",
            "Inactive" => "text-gray-600 dark:text-gray-400",
            "Maintenance" => "text-yellow-600 dark:text-yellow-400",
            "Faulty" => "text-red-600 dark:text-red-400",
            _ => "text-gray-600 dark:text-gray-400"
        };
    }

    private string GetDeviceStatusText(string status)
    {
        return status switch
        {
            "Active" => "Aktif",
            "Inactive" => "Pasif",
            "Maintenance" => "Bakımda",
            "Faulty" => "Arızalı",
            _ => status
        };
    }

    private string GetFillLevelColor(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "bg-gray-500";

        return fillLevel switch
        {
            >= 90 => "bg-red-500",
            >= 70 => "bg-orange-500",
            >= 50 => "bg-yellow-500",
            >= 30 => "bg-blue-500",
            _ => "bg-green-500"
        };
    }

    private string GetFillLevelBadge(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "bg-gray-100 text-gray-800";

        return fillLevel switch
        {
            >= 90 => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400",
            >= 70 => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400",
            >= 50 => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
            >= 30 => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400",
            _ => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
        };
    }

    private string GetFillStatusBadge(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "bg-gray-100 text-gray-800";

        return fillLevel switch
        {
            >= 90 => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400",
            >= 70 => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400",
            >= 50 => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
            _ => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
        };
    }

    private string GetFillStatusText(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "Durum Bilinmiyor";

        return fillLevel switch
        {
            >= 90 => "Acil Boşaltılmalı",
            >= 70 => "Yakında Boşaltılmalı",
            >= 50 => "Orta Doluluk",
            _ => "Boşaltma Gerekmiyor"
        };
    }

    private string GetTextColorByFillLevel(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "text-gray-500";

        return fillLevel switch
        {
            >= 90 => "text-red-500",
            >= 70 => "text-orange-500",
            >= 50 => "text-yellow-500",
            >= 30 => "text-blue-500",
            _ => "text-green-500"
        };
    }

    private string GetBinIconColor(ResultWasteBinDto bin)
    {
        return bin.DeviceStatus switch
        {
            "Active" => "text-green-500",
            "Inactive" => "text-gray-500",
            "Maintenance" => "text-yellow-500",
            "Faulty" => "text-red-500",
            _ => "text-gray-500"
        };
    }

    private string GetSensorBorderColor(bool isActive)
    {
        return isActive ? "border-green-500" : "border-red-500";
    }

    private string GetStrokeFillColor(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "text-gray-500";

        return fillLevel switch
        {
            >= 90 => "text-red-500",
            >= 70 => "text-orange-500",
            >= 50 => "text-yellow-500",
            >= 30 => "text-blue-500",
            _ => "text-green-500"
        };
    }

    [JSInvokable]
    public void OnMapInitialized()
    {
        Console.WriteLine("Map initialized from JS");
    }

    [JSInvokable]
    public void UpdateCoordinates(double lat, double lng)
    {
        binModel.Latitude = lat;
        binModel.Longitude = lng;
        StateHasChanged();
    }

    [JSInvokable]
    public void UpdateAddress(string address)
    {
        binModel.Address = address;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OpenBinDetail(string binId)
    {
        if (Guid.TryParse(binId, out Guid Id))
        {
            var binInCurrentPage = displayedBins.FirstOrDefault(b => b.Id == Id);

            if (binInCurrentPage != null)
            {
                expandedRowId = Id;
                StateHasChanged();
            }
            else
            {
                var bin = wasteBins?.FirstOrDefault(b => b.Id == Id);
                if (bin != null)
                {
                    searchText = "";
                    statusFilter = "";
                    fillLevelFilter = "";
                    ApplyFilters();

                    int binIndex = filteredBins.IndexOf(bin);
                    if (binIndex >= 0)
                    {
                        currentPage = (binIndex / pageSize) + 1;
                        await Task.Delay(100);
                        expandedRowId = Id;
                        StateHasChanged();
                    }
                }
            }
        }   
    }
}
