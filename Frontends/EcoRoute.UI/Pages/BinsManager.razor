@page "/bins"
@using Microsoft.AspNetCore.Authorization
@inject IToastService toastService
@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden mb-6">
    <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Atık Kutusu Yönetimi</h2>
        <div class="flex space-x-2">
            <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300" @onclick="RefreshData">
                <i class="fas fa-sync-alt mr-2"></i> Yenile
            </button>
            <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300" @onclick="OpenCreateModal">
                <i class="fas fa-plus mr-2"></i> Yeni Atık Kutusu Ekle
            </button>
        </div>
    </div>

    <div class="p-6">
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                <thead class="bg-gray-100 dark:bg-gray-700">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Index")'>
                            <div class="flex items-center">
                                No
                                @if (sortField == "Index")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Label")'>
                            <div class="flex items-center">
                                Label
                                @if (sortField == "Label")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Location")'>
                            <div class="flex items-center">
                                Konum
                                @if (sortField == "Location")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("LastUpdate")'>
                            <div class="flex items-center">
                                Son Güncelleme
                                @if (sortField == "LastUpdate")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("DeviceStatus")'>
                            <div class="flex items-center">
                                Cihaz Durumu
                                @if (sortField == "DeviceStatus")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("FillLevel")'>
                            <div class="flex items-center">
                                Doluluk Oranı
                                @if (sortField == "FillLevel")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort ml-1 text-gray-400"></i>
                                }
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">İşlemler</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                    @if (wasteBins != null)
                    {
                        @for (int i = 0; i < wasteBins.Count; i++)
                        {
                            var bin = wasteBins[i];
                            var rowIndex = i + 1;
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer @(expandedRowId == bin.Id ? "bg-gray-50 dark:bg-gray-700" : "")"
                                @onclick="() => ToggleRowExpansion(bin.Id)">
                                <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@rowIndex</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@bin.Label</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@bin.Latitude, @bin.Longitude</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@bin.LastUpdate?.ToString("dd.MM.yyyy HH:mm")</td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm">
                                    <span class="@GetDeviceStatusColor(bin.DeviceStatus) px-2 py-1 rounded-full text-xs">
                                        @bin.DeviceStatus
                                    </span>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap">
                                    <div class="relative w-full h-5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden bg-stripes">
                                        <div class="@GetFillLevelColor(bin.FillLevel) h-full transition-all duration-500 ease-in-out flex items-center justify-center"
                                             style="width: @(bin.FillLevel)%">
                                            <span class="text-xs font-bold text-white">@bin.FillLevel%</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm">
                                    <div class="flex space-x-3">
                                        <button class="text-blue-500 hover:text-blue-700 text-lg" @onclick="@(() => OpenEditModal(bin))" @onclick:stopPropagation="true">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="@(bin.IsActive ? "text-red-500 hover:text-red-700" : "text-green-500 hover:text-green-700") text-lg" 
                                                @onclick="@(() => ShowToggleConfirmation(bin))" @onclick:stopPropagation="true">
                                            <i class="fas @(bin.IsActive ? "fa-toggle-on" : "fa-toggle-off")"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>

                            @if (expandedRowId == bin.Id)
                            {
                                <tr class="bg-gray-50 dark:bg-gray-700">
                                    <td colspan="7" class="px-6 py-6">
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                                                        Genel Bilgiler
                                                    </h3>
                                                    <span class="@(bin.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 rounded-full text-xs">
                                                        @(bin.IsActive ? "Aktif" : "Pasif")
                                                    </span>
                                                </div>
                                                
                                                <div class="space-y-3">
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Oluşturulma Tarihi:</span>
                                                        <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@bin.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                                    </div>
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Güncellenme Tarihi:</span>
                                                        <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@(bin.UpdatedAt?.ToString("dd.MM.yyyy HH:mm") ?? "-")</span>
                                                    </div>
                                                    <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Doluluk Seviyesi:</span>
                                                        <span class="text-sm font-medium @GetTextColorByFillLevel(bin.FillLevel)">@bin.FillLevel%</span>
                                                    </div>
                                                    <div class="flex justify-between items-center">
                                                        <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Doluluk:</span>
                                                        <span class="text-sm font-medium @GetTextColorByFillLevel(bin.EstimatedFillLevel)">@bin.EstimatedFillLevel%</span>
                                                    </div>
                                                </div>
                                                
                                                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                                                    <div class="inline-flex items-center text-blue-500 cursor-pointer hover:text-blue-700" @onclick="() => OpenLocationModal(bin)" @onclick:stopPropagation="true">
                                                        <i class="fas fa-map-marker-alt mr-1"></i>
                                                        <span class="text-sm">Konumu Görüntüle</span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-microchip mr-2 text-purple-500"></i>
                                                        Sensörler
                                                    </h3>
                                                    <span class="bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 px-2 py-1 rounded-full text-xs">
                                                        @(bin.Sensors?.Count ?? 0) adet
                                                    </span>
                                                </div>
                                                
                                                <div class="space-y-4 max-h-60 overflow-y-auto pr-2">
                                                    @if (bin.Sensors != null && bin.Sensors.Any())
                                                    {
                                                        foreach (var sensor in bin.Sensors)
                                                        {
                                                            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border-l-4 @GetSensorBorderColor(sensor.IsActive)">
                                                                <div class="flex justify-between items-center mb-2">
                                                                    <span class="font-medium text-gray-800 dark:text-white">@sensor.Type</span>
                                                                    <span class="@(sensor.IsActive ? "text-green-500" : "text-red-500") text-xs">
                                                                        <i class="fas @(sensor.IsActive ? "fa-check-circle" : "fa-times-circle") mr-1"></i>
                                                                        @(sensor.IsActive ? "Aktif" : "Pasif")
                                                                    </span>
                                                                </div>
                                                                <div class="text-xs text-gray-500 dark:text-gray-400">
                                                                    Son Güncelleme: @(sensor.LastUpdate?.ToString("dd.MM.yyyy") ?? "-")
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                                                            <p class="text-sm text-gray-500 dark:text-gray-400">Sensör bulunamadı</p>
                                                        </div>
                                                    }
                                                </div>
                                            </div>

                                            <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                <div class="flex justify-between items-center mb-4">
                                                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                        <i class="fas fa-history mr-2 text-amber-500"></i>
                                                        Son Loglar
                                                    </h3>
                                                    <button class="text-blue-500 hover:text-blue-700 text-sm" @onclick:stopPropagation="true">
                                                        <i class="fas fa-external-link-alt mr-1"></i>
                                                        Tümünü Gör
                                                    </button>
                                                </div>
                                                
                                                <div class="space-y-3 max-h-60 overflow-y-auto pr-2">
                                                    @if (bin.BinLogs != null && bin.BinLogs.Any())
                                                    {
                                                        foreach (var log in bin.BinLogs.OrderByDescending(l => l.CreatedAt).Take(3))
                                                        {
                                                            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg flex items-center justify-between">
                                                                <div>
                                                                    <div class="text-sm font-medium text-gray-800 dark:text-white">
                                                                        @log.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                                                    </div>
                                                                    <div class="text-xs text-gray-500 dark:text-gray-400">
                                                                        Durum: <span class="@GetDeviceStatusColor(log.DeviceStatus) px-1 py-0.5 rounded text-xs">@log.DeviceStatus</span>
                                                                    </div>
                                                                </div>
                                                                <div>
                                                                    <div class="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-600 relative flex items-center justify-center">
                                                                        <div class="absolute inset-1 rounded-full @GetFillLevelColor(log.FillLevel) opacity-80"></div>
                                                                        <span class="text-xs font-bold text-white z-10">@log.FillLevel%</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                                                            <p class="text-sm text-gray-500 dark:text-gray-400">Log bulunamadı</p>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                Yükleniyor...
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (wasteBins != null && totalPages > 1)
        {
            <div class="flex justify-center mt-4">
                <div class="flex space-x-1">
                    <button @onclick="() => ChangePage(1)" 
                            disabled="@(currentPage == 1)"
                            class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-double-left"></i>
                    </button>
                    <button @onclick="() => ChangePage(currentPage - 1)" 
                            disabled="@(currentPage == 1)"
                            class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-left"></i>
                    </button>

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button @onclick="() => ChangePage(pageNumber)" 
                                class="@(currentPage == pageNumber ? "bg-primary-500 text-white" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            @pageNumber
                        </button>
                    }

                    <button @onclick="() => ChangePage(currentPage + 1)" 
                            disabled="@(currentPage == totalPages)"
                            class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-right"></i>
                    </button>
                    <button @onclick="() => ChangePage(totalPages)" 
                            disabled="@(currentPage == totalPages)"
                            class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                        <i class="fas fa-angle-double-right"></i>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@if (showCreateModal || showEditModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-screen overflow-y-auto">
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    @(showCreateModal ? "Yeni Atık Kutusu Ekle" : "Atık Kutusu Düzenle")
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="CloseModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="label">
                                    Etiket
                                </label>
                                <input type="text" id="label" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                       @bind="currentBin.Label" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="deviceStatus">
                                    Cihaz Durumu
                                </label>
                                <select id="deviceStatus" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                        @bind="currentBin.DeviceStatus">
                                    <option value="Online">Online</option>
                                    <option value="Offline">Offline</option>
                                    <option value="Maintenance">Bakımda</option>
                                    <option value="Error">Hata</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="latitude">
                                    Enlem
                                </label>
                                <input type="number" step="0.000001" id="latitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                       @bind="currentBin.Latitude" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="longitude">
                                    Boylam
                                </label>
                                <input type="number" step="0.000001" id="longitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                       @bind="currentBin.Longitude" />
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="fillLevel">
                                    Doluluk Seviyesi (%)
                                </label>
                                <input type="number" min="0" max="100" id="fillLevel" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                       @bind="currentBin.FillLevel" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="isActive">
                                    Durum
                                </label>
                                <select id="isActive" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" 
                                        @bind="currentBin.IsActive">
                                    <option value="true">Aktif</option>
                                    <option value="false">Pasif</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-4 min-h-64">
                        <div class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Konum Seçimi</div>
                        <div class="bg-blue-50 dark:bg-gray-600 p-3 mb-3 rounded text-sm text-blue-700 dark:text-blue-200">
                            <i class="fas fa-info-circle mr-1"></i> Haritada bir konuma tıklayarak enlem ve boylam değerlerini otomatik doldurabilirsiniz.
                        </div>
                        <div class="bg-gray-200 dark:bg-gray-800 h-64 flex items-center justify-center border border-gray-300 dark:border-gray-600 rounded-lg">
                            <div class="text-center">
                                <i class="fas fa-map-marked-alt text-4xl text-gray-400 dark:text-gray-500 mb-2"></i>
                                <p class="text-sm text-gray-500 dark:text-gray-400">Burada harita görüntüsü yer alacak</p>
                                <button class="mt-3 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition-colors">
                                    <i class="fas fa-map-pin mr-1"></i> Konumu İşaretle
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700" @onclick="CloseModal">
                        İptal
                    </button>
                    <button class="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600" @onclick="SaveBin">
                        Kaydet
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showLocationModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl">
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    Atık Kutusu Konumu
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="CloseLocationModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-4">
                    <div class="flex items-center mb-4">
                        <div class="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 px-3 py-1 rounded-full text-sm mr-2">
                            <i class="fas fa-info-circle mr-1"></i> Konum Bilgisi
                        </div>
                        <div class="text-sm text-gray-700 dark:text-gray-300">
                            @selectedBin?.Label (@selectedBin?.Latitude, @selectedBin?.Longitude)
                        </div>
                    </div>
                    <div class="bg-white dark:bg-gray-800 h-96 rounded-lg border border-gray-300 dark:border-gray-600 relative">
                        <!-- Map container -->
                        <div id="mapContainer" class="w-full h-full rounded-lg"></div>
                    </div>
                </div>

                <div class="flex justify-end mt-4">
                    <button class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600" @onclick="CloseLocationModal">
                        Kapat
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showToggleConfirmation)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
            <div class="text-center mb-6">
                <div class="w-16 h-16 rounded-full bg-yellow-100 flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-exclamation-triangle text-3xl text-yellow-500"></i>
                </div>
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">
                    Onay Gerekli
                </h3>
                <p class="text-gray-600 dark:text-gray-300">
                    @(confirmBin?.IsActive == true
                        ? $"'{confirmBin.Label}' etiketli atık kutusunu pasif duruma getirmek istediğinize emin misiniz?"
                        : $"'{confirmBin?.Label}' etiketli atık kutusunu aktif duruma getirmek istediğinize emin misiniz?")
                </p>
            </div>
            <div class="flex justify-center space-x-3">
                <button class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors" @onclick="CloseToggleConfirmation">
                    İptal
                </button>
                <button class="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors" @onclick="ToggleBinStatus">
                    Onayla
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<WasteBin> wasteBins;
    private List<WasteBin> allWasteBins; // For filtering and sorting
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => allWasteBins == null ? 0 : (int)Math.Ceiling(allWasteBins.Count / (double)pageSize);
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    private Guid? expandedRowId;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showLocationModal = false;
    private bool showToggleConfirmation = false;
    private WasteBin currentBin = new WasteBin();
    private WasteBin selectedBin;
    private WasteBin confirmBin;

    // Sorting
    private string sortField = "Index";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Simulating API call with delay
        await Task.Delay(500);

        // Sample data
        allWasteBins = new List<WasteBin>
        {
            new WasteBin
            {
                Id = Guid.NewGuid(),
                Label = "Atık Kutusu 1",
                DeviceStatus = "Online",
                FillLevel = 75,
                EstimatedFillLevel = 85,
                Latitude = 41.015137,
                Longitude = 28.979530,
                LastUpdate = DateTime.Now.AddHours(-2),
                CreatedAt = DateTime.Now.AddMonths(-3),
                UpdatedAt = DateTime.Now.AddDays(-1),
                IsActive = true,
                Sensors = new List<Sensor>
                {
                    new Sensor { Type = "Doluluk Sensörü", IsActive = true, LastUpdate = DateTime.Now.AddDays(-1) },
                    new Sensor { Type = "Sıcaklık Sensörü", IsActive = true, LastUpdate = DateTime.Now.AddDays(-1) },
                    new Sensor { Type = "Koku Sensörü", IsActive = false, LastUpdate = DateTime.Now.AddDays(-5) }
                },
                BinLogs = new List<BinLog>
                {
                    new BinLog { CreatedAt = DateTime.Now.AddHours(-2), DeviceStatus = "Online", FillLevel = 75 },
                    new BinLog { CreatedAt = DateTime.Now.AddHours(-12), DeviceStatus = "Online", FillLevel = 65 },
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-1), DeviceStatus = "Online", FillLevel = 50 }
                }
            },
            new WasteBin
            {
                Id = Guid.NewGuid(),
                Label = "Atık Kutusu 2",
                DeviceStatus = "Offline",
                FillLevel = 30,
                EstimatedFillLevel = 40,
                Latitude = 41.035137,
                Longitude = 28.989530,
                LastUpdate = DateTime.Now.AddDays(-1),
                CreatedAt = DateTime.Now.AddMonths(-2),
                UpdatedAt = DateTime.Now.AddDays(-1),
                IsActive = true,
                Sensors = new List<Sensor>
                {
                    new Sensor { Type = "Doluluk Sensörü", IsActive = true, LastUpdate = DateTime.Now.AddDays(-1) },
                    new Sensor { Type = "Sıcaklık Sensörü", IsActive = true, LastUpdate = DateTime.Now.AddDays(-1) }
                },
                BinLogs = new List<BinLog>
                {
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-1), DeviceStatus = "Offline", FillLevel = 30 },
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-2), DeviceStatus = "Online", FillLevel = 25 },
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-3), DeviceStatus = "Online", FillLevel = 20 }
                }
            },
            new WasteBin
            {
                Id = Guid.NewGuid(),
                Label = "Atık Kutusu 3",
                DeviceStatus = "Maintenance",
                FillLevel = 95,
                EstimatedFillLevel = 100,
                Latitude = 41.025137,
                Longitude = 28.969530,
                LastUpdate = DateTime.Now.AddHours(-5),
                CreatedAt = DateTime.Now.AddMonths(-1),
                UpdatedAt = DateTime.Now.AddHours(-5),
                IsActive = false,
                Sensors = new List<Sensor>
                {
                    new Sensor { Type = "Doluluk Sensörü", IsActive = false, LastUpdate = DateTime.Now.AddDays(-5) }
                },
                BinLogs = new List<BinLog>
                {
                    new BinLog { CreatedAt = DateTime.Now.AddHours(-5), DeviceStatus = "Maintenance", FillLevel = 95 },
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-1), DeviceStatus = "Error", FillLevel = 90 },
                    new BinLog { CreatedAt = DateTime.Now.AddDays(-2), DeviceStatus = "Online", FillLevel = 85 }
                }
            }
        };

        ApplySorting();
        ApplyPaging();
    }

    private async Task RefreshData()
    {
        expandedRowId = null;
        await LoadData();
        toastService.ShowSuccess("Veriler yenilendi");
    }

    private void ApplySorting()
    {
        if (allWasteBins == null) return;

        switch (sortField)
        {
            case "Index":
                // No sorting needed for index, it's the default order
                break;
            case "Label":
                allWasteBins = sortAscending
                    ? allWasteBins.OrderBy(b => b.Label).ToList()
                    : allWasteBins.OrderByDescending(b => b.Label).ToList();
                break;
            case "Location":
                allWasteBins = sortAscending
                    ? allWasteBins.OrderBy(b => b.Latitude).ThenBy(b => b.Longitude).ToList()
                    : allWasteBins.OrderByDescending(b => b.Latitude).ThenByDescending(b => b.Longitude).ToList();
                break;
            case "LastUpdate":
                allWasteBins = sortAscending
                    ? allWasteBins.OrderBy(b => b.LastUpdate).ToList()
                    : allWasteBins.OrderByDescending(b => b.LastUpdate).ToList();
                break;
            case "DeviceStatus":
                allWasteBins = sortAscending
                    ? allWasteBins.OrderBy(b => b.DeviceStatus).ToList()
                    : allWasteBins.OrderByDescending(b => b.DeviceStatus).ToList();
                break;
            case "FillLevel":
                allWasteBins = sortAscending
                    ? allWasteBins.OrderBy(b => b.FillLevel).ToList()
                    : allWasteBins.OrderByDescending(b => b.FillLevel).ToList();
                break;
        }
    }

    private void ApplyPaging()
    {
        if (allWasteBins == null) return;

        wasteBins = allWasteBins
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void SortTable(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplySorting();
        ApplyPaging();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        ApplyPaging();
    }

    private void ToggleRowExpansion(Guid id)
    {
        if (expandedRowId == id)
        {
            expandedRowId = null;
        }
        else
        {
            expandedRowId = id;
        }
    }

    private void OpenCreateModal()
    {
        currentBin = new WasteBin
            {
                Id = Guid.NewGuid(),
                DeviceStatus = "Online",
                FillLevel = 0,
                EstimatedFillLevel = 0,
                CreatedAt = DateTime.Now,
                IsActive = true
            };
        showCreateModal = true;
    }

    private void OpenEditModal(WasteBin bin)
    {
        currentBin = new WasteBin
            {
                Id = bin.Id,
                Label = bin.Label,
                DeviceStatus = bin.DeviceStatus,
                FillLevel = bin.FillLevel,
                EstimatedFillLevel = bin.EstimatedFillLevel,
                Latitude = bin.Latitude,
                Longitude = bin.Longitude,
                LastUpdate = bin.LastUpdate,
                CreatedAt = bin.CreatedAt,
                UpdatedAt = bin.UpdatedAt,
                IsActive = bin.IsActive,
                Sensors = bin.Sensors,
                BinLogs = bin.BinLogs
            };
        showEditModal = true;
    }

    private void CloseModal()
    {
        showCreateModal = false;
        showEditModal = false;
    }

    private void OpenLocationModal(WasteBin bin)
    {
        selectedBin = bin;
        showLocationModal = true;
        // In a real application, we would initialize the map here
    }

    private void CloseLocationModal()
    {
        showLocationModal = false;
    }

    private void ShowToggleConfirmation(WasteBin bin)
    {
        confirmBin = bin;
        showToggleConfirmation = true;
    }

    private void CloseToggleConfirmation()
    {
        showToggleConfirmation = false;
    }

    private void ToggleBinStatus()
    {
        if (confirmBin != null)
        {
            var bin = allWasteBins.FirstOrDefault(b => b.Id == confirmBin.Id);
            if (bin != null)
            {
                bin.IsActive = !bin.IsActive;
                bin.UpdatedAt = DateTime.Now;

                // Update the expanded item if it's the one we're toggling
                if (wasteBins.Any(b => b.Id == bin.Id))
                {
                    var displayBin = wasteBins.First(b => b.Id == bin.Id);
                    displayBin.IsActive = bin.IsActive;
                    displayBin.UpdatedAt = bin.UpdatedAt;
                }

                toastService.ShowSuccess($"Atık kutusu durumu {(bin.IsActive ? "aktif" : "pasif")} olarak güncellendi");
            }
        }

        CloseToggleConfirmation();
    }

    private async Task SaveBin()
    {
        // Validate inputs
        if (string.IsNullOrWhiteSpace(currentBin.Label))
        {
            toastService.ShowError("Etiket alanı boş olamaz");
            return;
        }

        // Simulating API call with delay
        await Task.Delay(500);

        if (showCreateModal)
        {
            // Add new bin
            currentBin.CreatedAt = DateTime.Now;
            allWasteBins.Add(currentBin);
            toastService.ShowSuccess("Yeni atık kutusu başarıyla eklendi");
        }
        else
        {
            // Update existing bin
            var bin = allWasteBins.FirstOrDefault(b => b.Id == currentBin.Id);
            if (bin != null)
            {
                bin.Label = currentBin.Label;
                bin.DeviceStatus = currentBin.DeviceStatus;
                bin.FillLevel = currentBin.FillLevel;
                bin.Latitude = currentBin.Latitude;
                bin.Longitude = currentBin.Longitude;
                bin.IsActive = currentBin.IsActive;
                bin.UpdatedAt = DateTime.Now;

                // Update the visible item if it's in the current page
                if (wasteBins.Any(b => b.Id == bin.Id))
                {
                    var displayBin = wasteBins.First(b => b.Id == bin.Id);
                    displayBin.Label = bin.Label;
                    displayBin.DeviceStatus = bin.DeviceStatus;
                    displayBin.FillLevel = bin.FillLevel;
                    displayBin.Latitude = bin.Latitude;
                    displayBin.Longitude = bin.Longitude;
                    displayBin.IsActive = bin.IsActive;
                    displayBin.UpdatedAt = bin.UpdatedAt;
                }

                toastService.ShowSuccess("Atık kutusu başarıyla güncellendi");
            }
        }

        // Close modal and sort/page data
        CloseModal();
        ApplySorting();
        ApplyPaging();
    }

    private string GetDeviceStatusColor(string status)
    {
        return status switch
        {
            "Online" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "Offline" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            "Maintenance" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            "Error" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetFillLevelColor(int fillLevel)
    {
        return fillLevel switch
        {
            >= 90 => "bg-red-500 bg-stripes",
            >= 70 => "bg-orange-500 bg-stripes",
            >= 50 => "bg-yellow-500 bg-stripes",
            >= 30 => "bg-blue-500 bg-stripes",
            _ => "bg-green-500 bg-stripes"
        };
    }

    private string GetTextColorByFillLevel(int fillLevel)
    {
        return fillLevel switch
        {
            >= 90 => "text-red-500",
            >= 70 => "text-orange-500",
            >= 50 => "text-yellow-500",
            >= 30 => "text-blue-500",
            _ => "text-green-500"
        };
    }

    private string GetSensorBorderColor(bool isActive)
    {
        return isActive ? "border-green-500" : "border-red-500";
    }

    // Model classes
    public class WasteBin
    {
        public Guid Id { get; set; }
        public string Label { get; set; }
        public string DeviceStatus { get; set; }
        public int FillLevel { get; set; }
        public int EstimatedFillLevel { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public DateTime? LastUpdate { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public bool IsActive { get; set; }
        public List<Sensor> Sensors { get; set; } = new List<Sensor>();
        public List<BinLog> BinLogs { get; set; } = new List<BinLog>();
    }

    public class Sensor
    {
        public string Type { get; set; }
        public bool IsActive { get; set; }
        public DateTime? LastUpdate { get; set; }
    }
        
    public class BinLog
    {
        public DateTime CreatedAt { get; set; }
        public string DeviceStatus { get; set; }
        public int FillLevel { get; set; }
    }
}

<style>
    .bg-stripes {
        background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
        background-size: 1rem 1rem;
    }
</style>