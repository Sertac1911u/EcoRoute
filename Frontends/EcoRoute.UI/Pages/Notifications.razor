@page "/notifications"
@using EcoRoute.UI.Pages.Components.Notifications
@using Microsoft.AspNetCore.Authorization
@using EcoRoute.DtoLayer.NotificationDtos
@using EcoRoute.UI.Services.NotificationServices
@using Microsoft.AspNetCore.Components.Authorization
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden">
    <!-- Üst Bar (Arama ve Filtreler) -->
    <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Bildirimler</h2>
        <NotificationFilterBar @ref="filterBarRef"
                               SearchTerm="@searchTerm"
                               SearchTermChanged="@((string value) => { searchTerm = value; StateHasChanged(); })"
                               SelectedType="@selectedType"
                               SelectedTypeChanged="@((string value) => { selectedType = value; StateHasChanged(); })"
                               ReadStatus="@readStatus"
                               ReadStatusChanged="@((string value) => { readStatus = value; StateHasChanged(); })"
                               OnMarkAllAsRead="@MarkAllAsRead"
                               HasUnreadNotifications="@filteredNotifications.Any(n => !n.IsRead)" />
    </div>

    <div class="overflow-hidden">
        @if (isLoading)
        {
            <div class="p-8 text-center">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
                <p class="mt-2 text-gray-500 dark:text-gray-400">Bildirimler yükleniyor...</p>
            </div>
        }
        else if (!filteredNotifications.Any())
        {
            <NotificationEmptyState HasSearchFilter="@HasFilter" />
        }
        else
        {
            <NotificationList Notifications="filteredNotifications"
                              OnMarkAsRead="MarkAsRead"
                              OnClickNotification="HandleNotificationClick" />
        }
    </div>
</div>

@code {
    private List<ResultNotificationDto> notifications = new();
    private NotificationFilterBar filterBarRef;

    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedType = "";
    private string readStatus = "";

    private List<ResultNotificationDto> filteredNotifications => notifications
        .Where(n => string.IsNullOrEmpty(searchTerm) ||
                    n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    n.Message.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(n => string.IsNullOrEmpty(selectedType) || n.Type == selectedType)
        .Where(n => string.IsNullOrEmpty(readStatus) ||
                   (readStatus == "read" && n.IsRead) ||
                   (readStatus == "unread" && !n.IsRead))
        .ToList();

    private bool HasFilter =>
        !string.IsNullOrEmpty(searchTerm) ||
        !string.IsNullOrEmpty(selectedType) ||
        !string.IsNullOrEmpty(readStatus);

    protected override async Task OnInitializedAsync()
    {
        notificationService.OnNotificationsUpdated += OnNotificationsUpdated;

        if (!notificationService.IsConnected)
        {
            await notificationService.InitializeAsync();
        }

        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        isLoading = true;
        await notificationService.GetNotificationsAsync();
        notifications = notificationService.Notifications;
        isLoading = false;
    }

    private void OnNotificationsUpdated()
    {
        InvokeAsync(() =>
        {
            notifications = notificationService.Notifications;
            StateHasChanged();
        });
    }

    private async Task MarkAsRead(Guid id)
    {
        await notificationService.MarkAsReadAsync(id);
    }

    private async Task MarkAllAsRead()
    {
        Console.WriteLine("MarkAllAsRead metodu çağrıldı");

        try
        {
            // NotificationService'yi çağır
            await notificationService.MarkAllAsReadAsync();

            // Force refresh from API instead of cache
            isLoading = true;

            // This is a cleaner approach than the manual update
            await notificationService.GetNotificationsAsync();
            notifications = notificationService.Notifications;

            isLoading = false;
            StateHasChanged();

            Console.WriteLine("MarkAllAsRead tamamlandı");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hata oluştu: {ex.Message}");
        }
    }
    private async Task HandleNotificationClick(ResultNotificationDto notification)
    {
        if (!notification.IsRead)
        {
            await notificationService.MarkAsReadAsync(notification.Id);
        }
    }

    public void Dispose()
    {
        notificationService.OnNotificationsUpdated -= OnNotificationsUpdated;
    }

}
