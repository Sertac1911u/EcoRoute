@page "/notifications"
@using EcoRoute.UI.Pages.Components.Notifications
@using Microsoft.AspNetCore.Authorization
@using EcoRoute.DtoLayer.NotificationDtos
@using EcoRoute.UI.Services.NotificationServices
@using Microsoft.AspNetCore.Components.Authorization
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="bg-white dark:bg-gray-900 rounded-xl overflow-hidden shadow-lg transition-all duration-300 border border-gray-100 dark:border-gray-800">
    <!-- Üst Bar (Arama ve Filtreler) -->
    <div class="flex flex-col md:flex-row md:justify-between md:items-center p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-850">
        <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-4 md:mb-0 flex items-center">
            <span class="inline-flex items-center justify-center w-10 h-10 mr-3 rounded-full bg-primary-100 text-primary-600 dark:bg-primary-900 dark:text-primary-300">
                <i class="fas fa-bell"></i>
            </span>
            Bildirimler
        </h2>
        <NotificationFilterBar @ref="filterBarRef"
                               SearchTerm="@searchTerm"
                               SearchTermChanged="@((string value) => { searchTerm = value; StateHasChanged(); })"
                               SelectedType="@selectedType"
                               SelectedTypeChanged="@((string value) => { selectedType = value; StateHasChanged(); })"
                               ReadStatus="@readStatus"
                               ReadStatusChanged="@((string value) => { readStatus = value; StateHasChanged(); })"
                               OnMarkAllAsRead="@MarkAllAsRead"
                               HasUnreadNotifications="@filteredNotifications.Any(n => !n.IsRead)" />
    </div>

    <div class="max-h-[calc(100vh-250px)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">
        @if (isLoading)
        {
            <div class="p-12 text-center">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-gray-200 dark:border-gray-700 border-t-primary-500 dark:border-t-primary-400"></div>
                <p class="mt-4 text-gray-600 dark:text-gray-400 font-medium">Bildirimler yükleniyor...</p>
            </div>
        }
        else if (!filteredNotifications.Any())
        {
            <NotificationEmptyState HasSearchFilter="@HasFilter" />
        }
        else
        {
            <div class="p-2">
                <NotificationList Notifications="filteredNotifications"
                                  OnMarkAsRead="MarkAsRead"
                                  OnClickNotification="HandleNotificationClick" />
            </div>
        }
    </div>

    @if (filteredNotifications.Any() && !isLoading)
    {
        <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 text-sm text-gray-500 dark:text-gray-400">
            <div class="flex justify-between items-center">
                <span>Toplam: @filteredNotifications.Count bildirim</span>
                <span>Okunmamış: @filteredNotifications.Count(n => !n.IsRead) bildirim</span>
            </div>
        </div>
    }
</div>

@code {
    private List<ResultNotificationDto> notifications = new();
    private NotificationFilterBar filterBarRef;

    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedType = "";
    private string readStatus = "";

    private List<ResultNotificationDto> filteredNotifications => notifications
        .Where(n => string.IsNullOrEmpty(searchTerm) ||
                    n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    n.Message.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(n => string.IsNullOrEmpty(selectedType) || n.Type == selectedType)
        .Where(n => string.IsNullOrEmpty(readStatus) ||
                   (readStatus == "read" && n.IsRead) ||
                   (readStatus == "unread" && !n.IsRead))
        .OrderByDescending(n => n.CreatedDate)
        .ToList();

    private bool HasFilter =>
        !string.IsNullOrEmpty(searchTerm) ||
        !string.IsNullOrEmpty(selectedType) ||
        !string.IsNullOrEmpty(readStatus);

    protected override async Task OnInitializedAsync()
    {
        notificationService.OnNotificationsUpdated += OnNotificationsUpdated;

        if (!notificationService.IsConnected)
        {
            await notificationService.InitializeAsync();
        }

        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        isLoading = true;
        await notificationService.GetNotificationsAsync();
        notifications = notificationService.Notifications;
        isLoading = false;
    }

    private void OnNotificationsUpdated()
    {
        InvokeAsync(() =>
        {
            notifications = notificationService.Notifications;
            StateHasChanged();
        });
    }

    private async Task MarkAsRead(Guid id)
    {
        await notificationService.MarkAsReadAsync(id);
    }

    private async Task MarkAllAsRead()
    {
        try
        {
            isLoading = true;
            await notificationService.MarkAllAsReadAsync();
            await notificationService.GetNotificationsAsync();
            notifications = notificationService.Notifications;
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hata oluştu: {ex.Message}");
            isLoading = false;
        }
    }

    private async Task HandleNotificationClick(ResultNotificationDto notification)
    {
        if (!notification.IsRead)
        {
            await notificationService.MarkAsReadAsync(notification.Id);
        }
    }

    public void Dispose()
    {
        notificationService.OnNotificationsUpdated -= OnNotificationsUpdated;
    }
}
