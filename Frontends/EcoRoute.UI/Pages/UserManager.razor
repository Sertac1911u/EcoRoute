@page "/users"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Pages.Components.Users
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject IToastService toastService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "SuperAdmin")]

<div class="min-h-screen p-4 md:p-6 lg:p-8">
    <!-- Header Section -->
    <div class="mb-8 animate-fadeIn">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
                <h1 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary-600 to-primary-400 bg-clip-text text-transparent">
                    Kullanıcı Yönetimi
                </h1>
                <p class="text-gray-500 dark:text-gray-400 mt-2">Sistem kullanıcılarını yönetin</p>
            </div>
            <button class="group relative overflow-hidden px-6 py-3 bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-xl font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
                    @onclick="OpenCreateModal">
                <span class="relative z-10 flex items-center">
                    <i class="fas fa-plus mr-2"></i>
                    Yeni Kullanıcı
                </span>
                <div class="absolute inset-0 bg-gradient-to-r from-primary-600 to-primary-700 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm">Toplam Kullanıcı</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count ?? 0)</p>
                </div>
                <div class="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center">
                    <i class="fas fa-users text-white"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm">Aktif Kullanıcı</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.IsActive) ?? 0)</p>
                </div>
                <div class="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center">
                    <i class="fas fa-user-check text-white"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm">Yöneticiler</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.Roles.Contains("Manager")) ?? 0)</p>
                </div>
                <div class="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center">
                    <i class="fas fa-user-tie text-white"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm">Sürücüler</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.Roles.Contains("Driver")) ?? 0)</p>
                </div>
                <div class="w-12 h-12 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-xl flex items-center justify-center">
                    <i class="fas fa-truck text-white"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden border border-gray-100 dark:border-gray-700 animate-slideIn">
        <UsersTable 
            Users="users" 
            SortColumn="@sortColumn" 
            Ascending="@ascending" 
            OnSort="SortTable" 
            OnEditUser="ShowEditModal" 
            OnDeleteUser="DeleteUserConfirmation" />
    </div>
</div>

<style>
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .animate-fadeIn {
        animation: fadeIn 0.5s ease-out;
    }

    .animate-slideIn {
        animation: slideIn 0.5s ease-out;
    }

    /* Gradient text animation */
    @@keyframes gradient {
        0% {
            background-position: 0% 50%;
        }
        50% {
            background-position: 100% 50%;
        }
        100% {
            background-position: 0% 50%;
        }
    }

    .bg-gradient-to-r {
        background-size: 200% 200%;
        animation: gradient 6s ease infinite;
    }
</style>

<!-- Edit User Modal -->
<EditUser 
    User="editingUser" 
    IsOpen="editingUser != null" 
    OnClose="() => editingUser = null" 
    OnSave="ShowUpdateConfirmation" 
    PasswordError="@passwordError" 
    ConfirmPassword="@confirmPassword" 
    ConfirmPasswordChanged="(value) => confirmPassword = value" />

<!-- Create User Modal -->
<CreateUser 
    User="newUser" 
    IsOpen="isCreateModalOpen" 
    OnClose="CloseCreateModal" 
    OnSave="ShowCreateConfirmation" 
    PasswordError="@newPasswordError" 
    ConfirmPassword="@newConfirmPassword" 
    ConfirmPasswordChanged="(value) => newConfirmPassword = value" />

<!-- Confirmation Dialogs -->
<ConfirmationDialog 
    IsOpen="showDeleteConfirmation" 
    Title="Kullanıcıyı Sil" 
    Message="Bu kullanıcıyı silmek istediğinize emin misiniz? Bu işlem geri alınamaz." 
    ConfirmButtonText="Sil" 
    ConfirmButtonClass="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700" 
    OnConfirm="ConfirmDelete" 
    OnCancel="CancelDelete" 
    Icon="fa-exclamation-triangle" 
    IconClass="bg-red-100 text-red-500 dark:bg-red-900/20 dark:text-red-400" />

<ConfirmationDialog 
    IsOpen="showUpdateConfirmation" 
    Title="Kullanıcıyı Güncelle" 
    Message="Kullanıcı bilgilerini güncellemek istediğinize emin misiniz?" 
    ConfirmButtonText="Güncelle" 
    ConfirmButtonClass="bg-gradient-to-r from-secondary-500 to-secondary-600 hover:from-secondary-600 hover:to-secondary-700" 
    OnConfirm="UpdateUser" 
    OnCancel="() => showUpdateConfirmation = false" 
    Icon="fa-question-circle" 
    IconClass="bg-blue-100 text-blue-500 dark:bg-blue-900/20 dark:text-blue-400" />

<ConfirmationDialog 
    IsOpen="showCreateConfirmation" 
    Title="Yeni Kullanıcı Ekle" 
    Message="Yeni kullanıcı eklemek istediğinize emin misiniz?" 
    ConfirmButtonText="Ekle" 
    ConfirmButtonClass="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700" 
    OnConfirm="CreateUser" 
    OnCancel="() => showCreateConfirmation = false" 
    Icon="fa-user-plus" 
    IconClass="bg-green-100 text-green-500 dark:bg-green-900/20 dark:text-green-400" />

@code {
    private List<ResultUserDto> users;
    private ResultUserDto? editingUser;
    private CreateUserDto newUser = new();
    private bool isCreateModalOpen = false;
    private string confirmPassword = "";
    private string newConfirmPassword = "";
    private string passwordError = "";
    private string newPasswordError = "";
    private bool showDeleteConfirmation = false;
    private bool showUpdateConfirmation = false;
    private bool showCreateConfirmation = false;
    private string userIdToDelete;

    // Sorting properties
    private string sortColumn = "Id";
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetAllUsersAsync();
    }

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }
        StateHasChanged();
    }

    private void ShowEditModal(ResultUserDto user)
    {
        confirmPassword = "";
        passwordError = "";
        editingUser = new ResultUserDto
        {
            Id = user.Id,
            Name = user.Name,
            Surname = user.Surname,
            Email = user.Email,
            UserName = user.UserName,
            Roles = user.Roles,
            SelectedRole = user.Roles.FirstOrDefault(),
            Password = "",
            PhoneNumber = user.PhoneNumber,
            LastLoginDate = user.LastLoginDate,
            CreateDate = user.CreateDate,
            IsActive = user.IsActive
        };
    }

    private void OpenCreateModal()
    {
        newUser = new CreateUserDto
        {
            IsActive = true
        };
        newConfirmPassword = "";
        newPasswordError = "";
        isCreateModalOpen = true;
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
        newPasswordError = "";
    }

    private void ShowUpdateConfirmation()
    {
        if (!IsValidEmail(editingUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        if (!string.IsNullOrEmpty(editingUser.Password))
        {
            if (editingUser.Password != confirmPassword)
            {
                passwordError = "Şifreler eşleşmiyor!";
                return;
            }

            if (editingUser.Password.Length < 6)
            {
                passwordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
                return;
            }

            if (!editingUser.Password.Any(char.IsDigit) || !editingUser.Password.Any(char.IsLetter))
            {
                passwordError = "Şifre en az bir harf ve bir rakam içermelidir.";
                return;
            }
        }

        passwordError = "";
        showUpdateConfirmation = true;
    }

    private void ShowCreateConfirmation()
    {
        if (string.IsNullOrEmpty(newUser.Name) || string.IsNullOrEmpty(newUser.Surname) ||
            string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUser.UserName) ||
            string.IsNullOrEmpty(newUser.Password) || string.IsNullOrEmpty(newUser.Role))
        {
            toastService.ShowWarning("Lütfen tüm alanları doldurun");
            return;
        }
        
        if (!IsValidEmail(newUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        if (newUser.Password != newConfirmPassword)
        {
            newPasswordError = "Şifreler eşleşmiyor!";
            return;
        }

        if (newUser.Password.Length < 6)
        {
            newPasswordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
            return;
        }

        if (!newUser.Password.Any(char.IsDigit) || !newUser.Password.Any(char.IsLetter))
        {
            newPasswordError = "Şifre en az bir harf ve bir rakam içermelidir.";
            return;
        }

        newPasswordError = "";
        showCreateConfirmation = true;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void DeleteUserConfirmation(string id)
    {
        userIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        userIdToDelete = null;
    }

    private async Task UpdateUser()
    {
        if (editingUser != null)
        {
            var updateDto = new UpdateUserDto
            {
                Id = editingUser.Id,
                Name = editingUser.Name,
                Surname = editingUser.Surname,
                Email = editingUser.Email,
                UserName = editingUser.UserName,
                Role = editingUser.SelectedRole,
                Password = editingUser.Password,
                PhoneNumber = editingUser.PhoneNumber,
                IsActive = editingUser.IsActive
            };

            var success = await UserService.UpdateUserAsync(updateDto);
            if (success)
            {
                toastService.ShowSuccess("Kullanıcı başarıyla güncellendi");
                showUpdateConfirmation = false;
                editingUser = null;
                await LoadUsers();
            }
            else
            {
                toastService.ShowError("Kullanıcı güncellenirken hata oluştu");
                showUpdateConfirmation = false;
            }
        }
    }

    private async Task CreateUser()
    {
        if (await UserService.CreateUserAsync(newUser))
        {
            toastService.ShowSuccess("Kullanıcı başarıyla eklendi.");
            await LoadUsers();
            showCreateConfirmation = false;
            CloseCreateModal();
        }
        else
        {
            toastService.ShowError("Kullanıcı eklenirken hata oluştu");
            showCreateConfirmation = false;
        }
    }

    private async Task ConfirmDelete()
    {
        if (await UserService.DeleteUserAsync(userIdToDelete))
        {
            toastService.ShowSuccess("Kullanıcı başarıyla silindi.");
            await LoadUsers();
        }
        else
        {
            toastService.ShowError("Kullanıcı silinirken hata oluştu");
        }
        showDeleteConfirmation = false;
    }
}