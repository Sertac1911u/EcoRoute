@page "/users"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Pages.Components.Users
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject IToastService toastService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "SuperAdmin")]

<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden">
    <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Kullanıcı Yönetimi</h2>
        <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300" 
                @onclick="OpenCreateModal">
            <i class="fas fa-plus mr-2"></i> Yeni Kullanıcı Ekle
        </button>
    </div>

    <UsersTable 
    Users="users" 
    SortColumn="@sortColumn" 
    Ascending="@ascending" 
    OnSort="SortTable" 
    OnShowDetails="ShowUserDetails" 
    OnEditUser="ShowEditModal" 
    OnDeleteUser="DeleteUserConfirmation" />
</div>

<!-- User Details Modal -->
<UserDetails 
    User="selectedUser" 
    IsOpen="selectedUser != null" 
    OnClose="CloseModal" />

<!-- Edit User Modal -->
<EditUser 
    User="editingUser" 
    IsOpen="editingUser != null" 
    OnClose="() => editingUser = null" 
    OnSave="ShowUpdateConfirmation" 
    PasswordError="@passwordError" 
    ConfirmPassword="@confirmPassword" 
    ConfirmPasswordChanged="(value) => confirmPassword = value" />

<!-- Create User Modal -->
<CreateUser 
    User="newUser" 
    IsOpen="isCreateModalOpen" 
    OnClose="CloseCreateModal" 
    OnSave="ShowCreateConfirmation" 
    PasswordError="@newPasswordError" 
    ConfirmPassword="@newConfirmPassword" 
    ConfirmPasswordChanged="(value) => newConfirmPassword = value" />

<!-- Confirmation Dialogs -->
<ConfirmationDialog 
    IsOpen="showDeleteConfirmation" 
    Title="Kullanıcıyı Sil" 
    Message="Bu kullanıcıyı silmek istediğinize emin misiniz? Bu işlem geri alınamaz." 
    ConfirmButtonText="Sil" 
    ConfirmButtonClass="bg-danger hover:bg-red-700" 
    OnConfirm="ConfirmDelete" 
    OnCancel="CancelDelete" 
    Icon="fa-exclamation-triangle" 
    IconClass="bg-red-100 text-red-500" />

<ConfirmationDialog 
    IsOpen="showUpdateConfirmation" 
    Title="Kullanıcıyı Güncelle" 
    Message="Kullanıcı bilgilerini güncellemek istediğinize emin misiniz?" 
    ConfirmButtonText="Güncelle" 
    ConfirmButtonClass="bg-secondary-500 hover:bg-secondary-600" 
    OnConfirm="UpdateUser" 
    OnCancel="() => showUpdateConfirmation = false" 
    Icon="fa-question-circle" 
    IconClass="bg-blue-100 text-blue-500" />

<ConfirmationDialog 
    IsOpen="showCreateConfirmation" 
    Title="Yeni Kullanıcı Ekle" 
    Message="Yeni kullanıcı eklemek istediğinize emin misiniz?" 
    ConfirmButtonText="Ekle" 
    ConfirmButtonClass="bg-success hover:bg-green-700" 
    OnConfirm="CreateUser" 
    OnCancel="() => showCreateConfirmation = false" 
    Icon="fa-question-circle" 
    IconClass="bg-green-100 text-green-500" />

<style>
    /* Sadece ortak stiller burada kalabilir */
    .tooltip-container {
        position: relative;
    }

        .tooltip-container .tooltip {
            visibility: hidden;
            background-color: rgba(0,0,0,0.8);
            color: white;
            text-align: center;
            border-radius: 4px;
            padding: 5px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            white-space: nowrap;
            font-size: 12px;
        }

            .tooltip-container .tooltip::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: rgba(0,0,0,0.8) transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

    /* Animation for adding/editing/deleting */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-animation {
        animation: fadeIn 0.3s ease-out;
    }
</style>

@code {
    private List<ResultUserDto> users;
    private ResultUserDto? selectedUser;
    private ResultUserDto? editingUser;
    private CreateUserDto newUser = new();
    private bool isCreateModalOpen = false;
    private string confirmPassword = "";
    private string newConfirmPassword = "";
    private string passwordError = "";
    private string newPasswordError = "";
    private bool showDeleteConfirmation = false;
    private bool showUpdateConfirmation = false;
    private bool showCreateConfirmation = false;
    private string userIdToDelete;

    // Sorting properties
    private string sortColumn = "Id";
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetAllUsersAsync();
    }

    private List<ResultUserDto> SortUsers()
    {
        if (users == null)
            return new List<ResultUserDto>();

        switch (sortColumn)
        {
            case "Id":
                return ascending
                    ? users.OrderBy(u => u.Id).ToList()
                    : users.OrderByDescending(u => u.Id).ToList();
            case "Name":
                return ascending
                    ? users.OrderBy(u => u.Name).ThenBy(u => u.Surname).ToList()
                    : users.OrderByDescending(u => u.Name).ThenByDescending(u => u.Surname).ToList();
            case "Email":
                return ascending
                    ? users.OrderBy(u => u.Email).ToList()
                    : users.OrderByDescending(u => u.Email).ToList();
            case "Role":
                return ascending
                    ? users.OrderBy(u => u.Roles.FirstOrDefault()).ToList()
                    : users.OrderByDescending(u => u.Roles.FirstOrDefault()).ToList();
            default:
                return users;
        }
    }

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        // Önemli: Burada sıralanmış listeyi güncellememiz gerekiyor
        StateHasChanged();
    }

    private void ShowUserDetails(ResultUserDto user)
    {
        selectedUser = user;
    }

    private void CloseModal()
    {
        selectedUser = null;
    }

    private void ShowEditModal(ResultUserDto user)
    {
        confirmPassword = "";
        passwordError = "";
        editingUser = new ResultUserDto
            {
                Id = user.Id,
                Name = user.Name,
                Surname = user.Surname,
                Email = user.Email,
                UserName = user.UserName,
                Roles = user.Roles,
                SelectedRole = user.Roles.FirstOrDefault(),
                Password = "",
                PhoneNumber = user.PhoneNumber,
                LastLoginDate = user.LastLoginDate,
                RegistrationDate = user.RegistrationDate,
                IsActive = user.IsActive
            };
    }

    private void OpenCreateModal()
    {
        newUser = new CreateUserDto
            {
                IsActive = true // Varsayılan olarak aktif
            };
        newConfirmPassword = "";
        newPasswordError = "";
        isCreateModalOpen = true;
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
        newPasswordError = "";
    }

    private void ShowUpdateConfirmation()
    {
        if (!IsValidEmail(editingUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        // Şifre doğrulama
        if (!string.IsNullOrEmpty(editingUser.Password))
        {
            if (editingUser.Password != confirmPassword)
            {
                passwordError = "Şifreler eşleşmiyor!";
                return;
            }

            if (editingUser.Password.Length < 6)
            {
                passwordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
                return;
            }

            // Ek olarak özel karakter, rakam gibi gereksinim de eklenebilir
            if (!editingUser.Password.Any(char.IsDigit) || !editingUser.Password.Any(char.IsLetter))
            {
                passwordError = "Şifre en az bir harf ve bir rakam içermelidir.";
                return;
            }
        }

        passwordError = ""; // Başka hata yoksa
        showUpdateConfirmation = true;
    }

    private void ShowCreateConfirmation()
    {
        // Alanlar boş mu kontrol et
        if (string.IsNullOrEmpty(newUser.Name) || string.IsNullOrEmpty(newUser.Surname) ||
            string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUser.UserName) ||
            string.IsNullOrEmpty(newUser.Password) || string.IsNullOrEmpty(newUser.Role))
        {
            toastService.ShowWarning("Lütfen tüm alanları doldurun");
            return;
        }
        if (!IsValidEmail(newUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        if (newUser.Password != newConfirmPassword)
        {
            newPasswordError = "Şifreler eşleşmiyor!";
            return;
        }

        if (newUser.Password.Length < 6)
        {
            newPasswordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
            return;
        }

        // Ek olarak özel karakter, rakam gibi gereksinim de eklenebilir
        if (!newUser.Password.Any(char.IsDigit) || !newUser.Password.Any(char.IsLetter))
        {
            newPasswordError = "Şifre en az bir harf ve bir rakam içermelidir.";
            return;
        }

        newPasswordError = ""; // Başka hata yoksa
        showCreateConfirmation = true;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            // System.Net.Mail.MailAddress sınıfını kullanarak e-posta doğrulama
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void DeleteUserConfirmation(string id)
    {
        userIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        userIdToDelete = null;
    }

    private async Task UpdateUser()
    {
        if (editingUser != null)
        {
            var updateDto = new UpdateUserDto
                {
                    Id = editingUser.Id,
                    Name = editingUser.Name,
                    Surname = editingUser.Surname,
                    Email = editingUser.Email,
                    UserName = editingUser.UserName,
                    Role = editingUser.SelectedRole,
                    Password = editingUser.Password,
                    PhoneNumber = editingUser.PhoneNumber,
                    IsActive = editingUser.IsActive
                };

            var success = await UserService.UpdateUserAsync(updateDto);
            if (success)
            {
                toastService.ShowSuccess("Kullanıcı başarıyla güncellendi");
                showUpdateConfirmation = false;
                editingUser = null;
                await LoadUsers();
            }
            else
            {
                toastService.ShowError("Kullanıcı güncellenirken hata oluştu");
                showUpdateConfirmation = false;
            }
        }
    }

    private async Task CreateUser()
    {
        if (await UserService.CreateUserAsync(newUser))
        {
            toastService.ShowSuccess("Kullanıcı başarıyla eklendi.");
            await LoadUsers();
            showCreateConfirmation = false;
            CloseCreateModal();
        }
        else
        {
            toastService.ShowError("Kullanıcı eklenirken hata oluştu");
            showCreateConfirmation = false;
        }
    }

    private async Task ConfirmDelete()
    {
        if (await UserService.DeleteUserAsync(userIdToDelete))
        {
            toastService.ShowSuccess("Kullanıcı başarıyla silindi.");
            await LoadUsers();
        }
        else
        {
            toastService.ShowError("Kullanıcı silinirken hata oluştu");
        }
        showDeleteConfirmation = false;
    }
}