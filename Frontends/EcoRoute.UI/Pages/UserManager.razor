@page "/users"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Pages.Components.Users
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject IToastService toastService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "SuperAdmin")]

<div class="min-h-screen p-4 md:p-6 lg:p-8">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
                <h1 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary-600 to-primary-400 bg-clip-text text-transparent">
                    Kullanıcı Yönetimi
                </h1>
                <p class="text-gray-500 dark:text-gray-400 mt-2">Sistem kullanıcılarını yönetin ve düzenleyin</p>
            </div>
            <button class="px-6 py-3 bg-primary-500 hover:bg-primary-600 text-white rounded-xl font-medium shadow-lg"
                    @onclick="OpenCreateModal">
                <i class="fas fa-user-plus mr-2"></i>
                Yeni Kullanıcı Ekle
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm font-medium">Toplam Kullanıcı</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count ?? 0)</p>
                    <span class="text-xs text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/20 px-2 py-1 rounded-full mt-2 inline-block">
                        Aktif sistem
                    </span>
                </div>
                <div class="w-14 h-14 bg-primary-500 rounded-xl flex items-center justify-center">
                    <i class="fas fa-users text-white text-lg"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm font-medium">Aktif Kullanıcı</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.IsActive) ?? 0)</p>
                    <span class="text-xs text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/20 px-2 py-1 rounded-full mt-2 inline-block">
                        Çevrimiçi
                    </span>
                </div>
                <div class="w-14 h-14 bg-green-500 rounded-xl flex items-center justify-center">
                    <i class="fas fa-user-check text-white text-lg"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm font-medium">Yöneticiler</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.Roles.Contains("Manager")) ?? 0)</p>
                    <span class="text-xs text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/20 px-2 py-1 rounded-full mt-2 inline-block">
                        Yönetim
                    </span>
                </div>
                <div class="w-14 h-14 bg-blue-500 rounded-xl flex items-center justify-center">
                    <i class="fas fa-user-tie text-white text-lg"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 text-sm font-medium">Sürücüler</p>
                    <p class="text-2xl font-bold text-gray-800 dark:text-white mt-1">@(users?.Count(u => u.Roles.Contains("Driver")) ?? 0)</p>
                    <span class="text-xs text-orange-600 dark:text-orange-400 bg-orange-100 dark:bg-orange-900/20 px-2 py-1 rounded-full mt-2 inline-block">
                        Sahada
                    </span>
                </div>
                <div class="w-14 h-14 bg-orange-500 rounded-xl flex items-center justify-center">
                    <i class="fas fa-truck text-white text-lg"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700">
        <!-- Table Header -->
        <div class="bg-gray-50 dark:bg-gray-700 px-6 py-4 border-b border-gray-200 dark:border-gray-600">
            <div class="flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Kullanıcı Listesi</h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Tüm sistem kullanıcılarını görüntüleyin ve yönetin</p>
                </div>
                <span class="px-3 py-1 bg-primary-100 dark:bg-primary-900/20 text-primary-800 dark:text-primary-300 rounded-full text-sm font-medium">
                    @(users?.Count ?? 0) kullanıcı
                </span>
            </div>
        </div>

        <!-- Table Content -->
        <UsersTable Users="users"
                    SortColumn="@sortColumn"
                    Ascending="@ascending"
                    OnSort="SortTable"
                    OnEditUser="ShowEditModal"
                    OnDeleteUser="DeleteUserConfirmation" />
    </div>
</div>

<!-- Modals -->
<CreateUser User="newUser"
            IsOpen="isCreateModalOpen"
            OnClose="CloseCreateModal"
            OnSave="ShowCreateConfirmation"
            PasswordError="@newPasswordError"
            ConfirmPassword="@newConfirmPassword"
            ConfirmPasswordChanged="(value) => newConfirmPassword = value" />

<EditUser User="editingUser"
          IsOpen="editingUser != null"
          OnClose="() => editingUser = null"
          OnSave="ShowUpdateConfirmation"
          PasswordError="@passwordError"
          ConfirmPassword="@confirmPassword"
          ConfirmPasswordChanged="(value) => confirmPassword = value" />

<!-- Confirmation Dialogs -->
<ConfirmationDialog IsOpen="showDeleteConfirmation"
                    Title="Kullanıcıyı Sil"
                    Message="Bu kullanıcıyı silmek istediğinize emin misiniz? Bu işlem geri alınamaz."
                    ConfirmButtonText="Sil"
                    ConfirmButtonClass="bg-red-500 hover:bg-red-600"
                    OnConfirm="ConfirmDelete"
                    OnCancel="CancelDelete"
                    Icon="fa-exclamation-triangle"
                    IsLoading="@isDeleting" />

<ConfirmationDialog IsOpen="showUpdateConfirmation"
                    Title="Kullanıcıyı Güncelle"
                    Message="Kullanıcı bilgilerini güncellemek istediğinize emin misiniz?"
                    ConfirmButtonText="Güncelle"
                    ConfirmButtonClass="bg-primary-500 hover:bg-primary-600"
                    OnConfirm="UpdateUser"
                    OnCancel="() => showUpdateConfirmation = false"
                    Icon="fa-question-circle"
                    IsLoading="@isUpdating" />

<ConfirmationDialog IsOpen="showCreateConfirmation"
                    Title="Yeni Kullanıcı Ekle"
                    Message="Yeni kullanıcı eklemek istediğinize emin misiniz?"
                    ConfirmButtonText="Ekle"
                    ConfirmButtonClass="bg-green-500 hover:bg-green-600"
                    OnConfirm="CreateUser"
                    OnCancel="() => showCreateConfirmation = false"
                    Icon="fa-user-plus"
                    IsLoading="@isCreating" />

@code {
    private List<ResultUserDto> users;
    private ResultUserDto? editingUser;
    private CreateUserDto newUser = new();
    private bool isCreateModalOpen = false;
    private string confirmPassword = "";
    private string newConfirmPassword = "";
    private string passwordError = "";
    private string newPasswordError = "";
    private bool showDeleteConfirmation = false;
    private bool showUpdateConfirmation = false;
    private bool showCreateConfirmation = false;
    private string userIdToDelete;

    // Loading states
    private bool isDeleting = false;
    private bool isUpdating = false;
    private bool isCreating = false;

    // Sorting properties
    private string sortColumn = "Id";
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetAllUsersAsync();
    }

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }
        StateHasChanged();
    }

    private void ShowEditModal(ResultUserDto user)
    {
        confirmPassword = "";
        passwordError = "";
        editingUser = new ResultUserDto
            {
                Id = user.Id,
                Name = user.Name,
                Surname = user.Surname,
                Email = user.Email,
                UserName = user.UserName,
                Roles = user.Roles,
                SelectedRole = user.Roles.FirstOrDefault(),
                Password = "",
                PhoneNumber = user.PhoneNumber,
                LastLoginDate = user.LastLoginDate,
                CreateDate = user.CreateDate,
                IsActive = user.IsActive
            };
    }

    private void OpenCreateModal()
    {
        newUser = new CreateUserDto
            {
                IsActive = true
            };
        newConfirmPassword = "";
        newPasswordError = "";
        isCreateModalOpen = true;
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
        newPasswordError = "";
    }

    private void ShowUpdateConfirmation()
    {
        if (!IsValidEmail(editingUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        if (!string.IsNullOrEmpty(editingUser.Password))
        {
            if (editingUser.Password != confirmPassword)
            {
                passwordError = "Şifreler eşleşmiyor!";
                return;
            }

            if (editingUser.Password.Length < 6)
            {
                passwordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
                return;
            }

            if (!editingUser.Password.Any(char.IsDigit) || !editingUser.Password.Any(char.IsLetter))
            {
                passwordError = "Şifre en az bir harf ve bir rakam içermelidir.";
                return;
            }
        }

        passwordError = "";
        showUpdateConfirmation = true;
    }

    private void ShowCreateConfirmation()
    {
        if (string.IsNullOrEmpty(newUser.Name) || string.IsNullOrEmpty(newUser.Surname) ||
            string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUser.UserName) ||
            string.IsNullOrEmpty(newUser.Password) || string.IsNullOrEmpty(newUser.Role))
        {
            toastService.ShowWarning("Lütfen tüm alanları doldurun");
            return;
        }

        if (!IsValidEmail(newUser.Email))
        {
            toastService.ShowWarning("Lütfen geçerli bir e-posta adresi girin");
            return;
        }

        if (newUser.Password != newConfirmPassword)
        {
            newPasswordError = "Şifreler eşleşmiyor!";
            return;
        }

        if (newUser.Password.Length < 6)
        {
            newPasswordError = "Şifre en az 6 karakter uzunluğunda olmalıdır.";
            return;
        }

        if (!newUser.Password.Any(char.IsDigit) || !newUser.Password.Any(char.IsLetter))
        {
            newPasswordError = "Şifre en az bir harf ve bir rakam içermelidir.";
            return;
        }

        newPasswordError = "";
        showCreateConfirmation = true;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void DeleteUserConfirmation(string id)
    {
        userIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        userIdToDelete = null;
    }

    private async Task UpdateUser()
    {
        if (editingUser != null)
        {
            isUpdating = true;
            StateHasChanged();

            try
            {
                var updateDto = new UpdateUserDto
                    {
                        Id = editingUser.Id,
                        Name = editingUser.Name,
                        Surname = editingUser.Surname,
                        Email = editingUser.Email,
                        UserName = editingUser.UserName,
                        Role = editingUser.SelectedRole,
                        Password = editingUser.Password,
                        PhoneNumber = editingUser.PhoneNumber,
                        IsActive = editingUser.IsActive
                    };

                var success = await UserService.UpdateUserAsync(updateDto);
                if (success)
                {
                    toastService.ShowSuccess("Kullanıcı başarıyla güncellendi");
                    showUpdateConfirmation = false;
                    editingUser = null;
                    await LoadUsers();
                }
                else
                {
                    toastService.ShowError("Kullanıcı güncellenirken hata oluştu");
                    showUpdateConfirmation = false;
                }
            }
            finally
            {
                isUpdating = false;
                StateHasChanged();
            }
        }
    }

    private async Task CreateUser()
    {
        isCreating = true;
        StateHasChanged();

        try
        {
            if (await UserService.CreateUserAsync(newUser))
            {
                toastService.ShowSuccess("Kullanıcı başarıyla eklendi.");
                await LoadUsers();
                showCreateConfirmation = false;
                CloseCreateModal();
            }
            else
            {
                toastService.ShowError("Kullanıcı eklenirken hata oluştu");
                showCreateConfirmation = false;
            }
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        isDeleting = true;
        StateHasChanged();

        try
        {
            if (await UserService.DeleteUserAsync(userIdToDelete))
            {
                toastService.ShowSuccess("Kullanıcı başarıyla silindi.");
                await LoadUsers();
            }
            else
            {
                toastService.ShowError("Kullanıcı silinirken hata oluştu");
            }
            showDeleteConfirmation = false;
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }
}