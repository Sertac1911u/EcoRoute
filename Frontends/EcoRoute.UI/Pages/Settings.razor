@page "/settings"
@attribute [Authorize]

@using Blazored.LocalStorage
@using EcoRoute.UI.Services.SettingsServices
@using Microsoft.AspNetCore.Authorization
@using EcoRoute.DtoLayer.SettingDtos
@using EcoRoute.UI.Pages.Components.Settings
@using Microsoft.AspNetCore.Components.Authorization
@inject SettingsService SettingsService
@inject ILocalStorageService localStorage
@inject IToastService toastService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden">
    <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Sistem Ayarları</h2>
        <div class="flex space-x-2">
            <button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white rounded-md transition duration-300"
                    @onclick="ResetToDefaults">
                <i class="fas fa-undo mr-2"></i> Varsayılan Ayarlara Dön
            </button>
            <button class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition duration-300"
                    @onclick="SaveSettings">
                <i class="fas fa-save mr-2"></i> Kaydet
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="p-12 text-center">
            <div class="w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
            <p class="mt-3 text-gray-600 dark:text-gray-300">Yükleniyor...</p>
        </div>
    }
    else
    {
        <div class="p-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
            <SettingsAppearance Settings="@settings"
                                ThemeColors="@themeColors"
                                SelectedShades="@selectedColorShades"
                                OnColorSelect="SelectThemeColor" />


            <SettingsProfileAndNotifications Settings="@settings"
                                             OnAvatarClick="@(() => showAvatarModal = true)" />


            @if (IsAdmin)
            {
                <SettingsIntegrations Settings="@settings"
                                      OnTestApi="TestGoogleMapsApi" />
            }
        </div>
    }
</div>

<AvatarModal @bind-Show="showAvatarModal"
             Avatars="@avatars"
             SelectedAvatarUrl="@settings.AvatarUrl"
             OnSave="OnAvatarChanged"
             OnCancel="@(() => showAvatarModal = false)" />


<ResetConfirmationModal Show="@showResetConfirmation"
                        OnConfirm="ConfirmReset"
                        OnCancel="CancelReset" />

@if (showSavedToast)
{
    <ToastMessage Message="Ayarlar başarıyla kaydedildi" Type="success" Visible="true" />
}

@code {
    // State
    private bool isLoading = true;
    private bool showAvatarModal = false;
    private bool showResetConfirmation = false;
    private bool showSavedToast = false;

    // Models
    private SettingsViewModel settings = new();
    private List<ThemeColorDto> themeColors = new();
    private List<AvatarDto> avatars = new();
    private Dictionary<string, string> selectedColorShades;

    private string currentUserId = string.Empty;
    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        IsAdmin = authState.User.IsInRole("SuperAdmin");

        themeColors = await SettingsService.GetThemeColorsAsync();
        avatars = await SettingsService.GetAvatarsAsync();
        await LoadUserSettings();
        SetSelectedColorShades();

        isLoading = false;
    }

    private void SetSelectedColorShades()
    {
        selectedColorShades = themeColors.FirstOrDefault(c => c.Value == settings.ThemeColor)?.Shades;
    }

    private async Task SelectThemeColor(ThemeColorDto color)
    {
        settings.ThemeColor = color.Value;
        selectedColorShades = color.Shades;
        await JS.InvokeVoidAsync("themeManager.applyTheme", color.Value, color.Shades);
    }

    private async Task OnAvatarChanged(string url)
    {
        settings.AvatarUrl = url;
        showAvatarModal = false; // Bu satır zaten var, kalsın

        await localStorage.SetItemAsync("avatarUrl", url);
        toastService.ShowSuccess("Profil avatarı başarıyla güncellendi");
    }


    private async Task SaveSettings()
    {
        var dto = new UpdateSystemSettingDto
            {
                DarkMode = settings.DarkMode,
                ThemeColor = settings.ThemeColor,
                FontSize = settings.FontSize,
                EnableAnimations = settings.EnableAnimations,
                AvatarUrl = settings.AvatarUrl,
                EmailNotifications = settings.EmailNotifications,
                SmsNotifications = settings.SmsNotifications,
                PushNotifications = settings.PushNotifications,
                GoogleMapsApiKey = settings.GoogleMapsApiKey
            };

        if (await SettingsService.UpdateSettingsAsync(dto))
        {
            await localStorage.SetItemAsync("darkMode", settings.DarkMode.ToString().ToLower());
            await JS.InvokeVoidAsync("eval", $"document.documentElement.classList.{(settings.DarkMode ? "add" : "remove")}('dark')");
            await localStorage.SetItemAsync("avatarUrl", settings.AvatarUrl);
            showSavedToast = true;
                StateHasChanged(); 
            await Task.Delay(3000);
            showSavedToast = false;
        }
        else
        {
            toastService.ShowError("Ayarlar kaydedilemedi.");
        }
    }

    private async Task LoadUserSettings()
    {
        var dto = await SettingsService.GetSettingsAsync();
        if (dto is null) return;

        settings = new SettingsViewModel
            {
                DarkMode = dto.DarkMode,
                ThemeColor = dto.ThemeColor ?? "#3B82F6",
                FontSize = dto.FontSize,
                EnableAnimations = dto.EnableAnimations,
                AvatarUrl = dto.AvatarUrl ?? "https://api.dicebear.com/9.x/adventurer/svg?seed=Easton",
                EmailNotifications = dto.EmailNotifications,
                SmsNotifications = dto.SmsNotifications,
                PushNotifications = dto.PushNotifications,
                GoogleMapsApiKey = dto.GoogleMapsApiKey ?? ""
            };

        await localStorage.SetItemAsync("darkMode", settings.DarkMode.ToString().ToLower());
        await localStorage.SetItemAsync("avatarUrl", settings.AvatarUrl);
    }

    private void ResetToDefaults() => showResetConfirmation = true;
    private void CancelReset() => showResetConfirmation = false;

    private async Task ConfirmReset()
    {
        showResetConfirmation = false;
        var result = await SettingsService.ResetToDefaultsAsync();
        if (result)
        {
            var defaultColor = themeColors.FirstOrDefault(c => c.Name == "Orijinal" || c.Value == "#2ba86d");
            settings.ThemeColor = defaultColor?.Value ?? "#2ba86d";
            selectedColorShades = defaultColor?.Shades;

            settings.DarkMode = false;
            settings.FontSize = 14;
            settings.EnableAnimations = true;

            await JS.InvokeVoidAsync("eval", $"document.documentElement.classList.remove('dark')");
            await localStorage.SetItemAsync("darkMode", "false");
            toastService.ShowSuccess("Ayarlar varsayılan değerlere döndürüldü.");
        }
        else
        {
            toastService.ShowError("Ayarlar sıfırlanırken hata oluştu.");
        }
    }

    private async Task TestGoogleMapsApi()
    {
        if (string.IsNullOrWhiteSpace(settings.GoogleMapsApiKey))
        {
            toastService.ShowWarning("API anahtarı boş olamaz.");
            return;
        }

        var success = await SettingsService.TestGoogleMapsApiAsync(settings.GoogleMapsApiKey);
        if (success)
            toastService.ShowSuccess("Google Maps API bağlantısı başarılı.");
        else
            toastService.ShowError("Google Maps API bağlantısı başarısız.");
    }

    public class SettingsViewModel
    {
        public bool DarkMode { get; set; }
        public string ThemeColor { get; set; }
        public int FontSize { get; set; }
        public bool EnableAnimations { get; set; }
        public string AvatarUrl { get; set; }
        public bool EmailNotifications { get; set; }
        public bool SmsNotifications { get; set; }
        public bool PushNotifications { get; set; }
        public string GoogleMapsApiKey { get; set; }
    }
}
