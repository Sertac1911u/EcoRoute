@page "/supports"
@using EcoRoute.UI.Pages.Components.Supports
@using Microsoft.AspNetCore.Authorization
@using EcoRoute.DtoLayer.SupportDtos
@using EcoRoute.UI.Services.SupportsServices
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService
@inject SupportTicketService SupportTicketService
@attribute [Authorize]

<div class="bg-white dark:bg-gray-900 rounded-xl shadow-xl overflow-hidden transition-all duration-300">
    <PageHeader 
        Title="Destek Talepleri" 
        IsAdmin="IsAdmin" 
        IsManager="IsManager" 
        OnCreateTicket="OpenCreateTicketModal" />

    <TicketList 
        Tickets="sortedTickets" 
        IsLoading="isLoading" 
        SortColumn="sortColumn"
        Ascending="ascending"
        OnSort="SortTable"
        OnTicketSelect="ShowTicketDetails" />
</div>

@if (selectedTicket != null)
{
    <TicketDetails 
        Ticket="selectedTicket" 
        TicketId="currentTicketId"
        IsAdmin="IsAdmin" 
        IsManager="IsManager" 
        IsDriver="IsDriver" 
        OnClose="CloseTicketDetailsModal" 
        OnSubmitReply="HandleReplySubmit"
        OnCloseTicket="ShowCloseTicketConfirmation" />
}

@if (isCreateTicketModalOpen)
{
    <CreateTicketModal  
        OnClose="CloseCreateTicketModal" 
        OnSubmit="CreateSupportTicket" 
        IsSubmitting="isSubmittingTicket" />
}

@if (showCloseTicketConfirmation)
{
    <ConfirmationModal 
        Title="Destek Talebini Kapat" 
        Message="Bu destek talebini kapatmak istediğinize emin misiniz? Kapatılan taleplere yanıt veremezsiniz."
        ConfirmText="Kapat"
        CancelText="İptal"
        ConfirmButtonClass="bg-danger hover:bg-red-700"
        IsLoading="isClosingTicket"
        OnConfirm="CloseTicket"
        OnCancel="CancelCloseTicket" />
}

@code {
    private List<ResultSupportTicketDto> supportTickets;
    private List<ResultSupportTicketDto> sortedTickets => SortTickets();
    private GetByIdSupportTicketDto selectedTicket;
    private bool isCreateTicketModalOpen = false;
    private bool showCloseTicketConfirmation = false;
    private Guid ticketIdToClose;
    private Guid currentTicketId;

    private bool isLoading = true;
    private bool isSubmittingTicket = false;
    private bool isClosingTicket = false;

    private bool IsAdmin = false;
    private bool IsManager = false;
    private bool IsDriver = false;

    private string sortColumn = "CreateDate";
    private bool ascending = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAdmin = user.IsInRole("Admin") || user.IsInRole("SuperAdmin");
        IsManager = user.IsInRole("Manager");
        IsDriver = user.IsInRole("Driver");

        await LoadSupportTickets();
    }

    private async Task LoadSupportTickets()
    {
        try
        {
            isLoading = true;
            supportTickets = await SupportTicketService.GetAllSupportTicketsAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Destek talepleri yüklenirken hata oluştu: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<ResultSupportTicketDto> SortTickets()
    {
        if (supportTickets == null)
            return new List<ResultSupportTicketDto>();

        switch (sortColumn)
        {
            case "Id":
                return ascending
                    ? supportTickets.OrderBy(t => t.Id).ToList()
                    : supportTickets.OrderByDescending(t => t.Id).ToList();
            case "Subject":
                return ascending
                    ? supportTickets.OrderBy(t => t.Subject).ToList()
                    : supportTickets.OrderByDescending(t => t.Subject).ToList();
            case "Status":
                return ascending
                    ? supportTickets.OrderBy(t => t.Status).ToList()
                    : supportTickets.OrderByDescending(t => t.Status).ToList();
            case "Priority":
                return ascending
                    ? supportTickets.OrderBy(t => GetPriorityWeight(t.Priority)).ToList()
                    : supportTickets.OrderByDescending(t => GetPriorityWeight(t.Priority)).ToList();
            case "CreateDate":
                return ascending
                    ? supportTickets.OrderBy(t => t.CreateDate).ToList()
                    : supportTickets.OrderByDescending(t => t.CreateDate).ToList();
            default:
                return supportTickets;
        }
    }

    private int GetPriorityWeight(string priority)
    {
        return priority switch
        {
            "Düşük" => 1,
            "Orta" => 2,
            "Yüksek" => 3,
            "Acil" => 4,
            _ => 0
        };
    }

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }
    }

    private async Task ShowTicketDetails(ResultSupportTicketDto ticket)
    {
        try
        {
            currentTicketId = ticket.Id;
            
            selectedTicket = await SupportTicketService.GetSupportTicketByIdAsync(ticket.Id);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Destek talebi detayları yüklenirken hata oluştu: {ex.Message}");
        }
    }

    private void CloseTicketDetailsModal()
    {
        selectedTicket = null;
    }

    private void OpenCreateTicketModal()
    {
        isCreateTicketModalOpen = true;
    }

    private void CloseCreateTicketModal()
    {
        isCreateTicketModalOpen = false;
    }

    private async Task CreateSupportTicket(MultipartFormDataContent content)
    {
        if (isSubmittingTicket) return;

        isSubmittingTicket = true;
        try
        {
            await SupportTicketService.CreateSupportTicketAsync(content);
            ToastService.ShowSuccess("Destek talebiniz başarıyla oluşturuldu.");
            isCreateTicketModalOpen = false;
            await LoadSupportTickets();
        }
        catch (HttpRequestException ex)
        {
            ToastService.ShowError($"İstek hatası: {ex.Message}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Destek talebi oluşturulurken bir hata oluştu: {ex.Message}");
        }
        finally
        {
            isSubmittingTicket = false;
        }
    }

    private async Task HandleReplySubmit(MultipartFormDataContent content)
    {
        try
        {
            await SupportTicketService.AddResponseAsync(content);
            ToastService.ShowSuccess("Yanıtınız başarıyla gönderildi.");
            
            if (currentTicketId != Guid.Empty)
            {
                selectedTicket = await SupportTicketService.GetSupportTicketByIdAsync(currentTicketId);
            }
            
            await LoadSupportTickets();
        }
        catch (HttpRequestException ex)
        {
            ToastService.ShowError($"İstek hatası: {ex.Message}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Yanıt gönderilirken bir hata oluştu: {ex.Message}");
        }
    }

    private void ShowCloseTicketConfirmation(Guid ticketId)
    {
        if (ticketId != Guid.Empty)
        {
            ticketIdToClose = ticketId;
            showCloseTicketConfirmation = true;
        }
        else
        {
            ToastService.ShowError("Geçersiz bilet kimliği! Lütfen sayfayı yenileyin ve tekrar deneyin.");
        }
    }

    private void CancelCloseTicket()
    {
        showCloseTicketConfirmation = false;
    }

    private async Task CloseTicket()
    {
        if (isClosingTicket) return;

        if (ticketIdToClose == Guid.Empty)
        {
            ToastService.ShowError("Geçersiz bilet kimliği! Lütfen sayfayı yenileyin ve tekrar deneyin.");
            showCloseTicketConfirmation = false;
            return;
        }

        isClosingTicket = true;
        try
        {
            Console.WriteLine($"Attempting to close ticket with ID: {ticketIdToClose}");
            
            var success = await SupportTicketService.CloseTicketAsync(ticketIdToClose);
            ToastService.ShowSuccess("Destek talebi başarıyla kapatıldı.");
            showCloseTicketConfirmation = false;
            
            await LoadSupportTickets();
            
            if (selectedTicket != null && selectedTicket.Id == ticketIdToClose)
            {
                selectedTicket = await SupportTicketService.GetSupportTicketByIdAsync(ticketIdToClose);
            }
        }
        catch (HttpRequestException ex)
        {
            ToastService.ShowError($"İstek hatası: {ex.Message}");
            Console.WriteLine($"HTTP Error closing ticket: {ex.Message}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Destek talebi kapatılırken bir hata oluştu: {ex.Message}");
            Console.WriteLine($"General error closing ticket: {ex.Message}");
        }
        finally
        {
            isClosingTicket = false;
        }
    }
}