@page "/routes"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.DtoLayer.RouteOptimizationDtos
@using EcoRoute.DtoLayer.WasteBinDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Services.RouteOptimizationServices
@using EcoRoute.UI.Services.WasteBinServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IRouteService RouteService
@inject WasteBinService WasteBinService
@inject UserService UserService
@inject VehicleService VehicleService
@inject AuthenticationStateProvider AuthProvider
@inject IToastService toastService
@inject IJSRuntime JS
@implements IAsyncDisposable

@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<!-- Main Container -->
<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden mb-6">
    @if (routes == null || filteredRoutes == null)
    {
        <div class="flex justify-center items-center p-8">
            <div class="text-center">
                <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-4"></i>
                <p class="text-gray-600 dark:text-gray-300">Veriler yükleniyor...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header Section -->
        <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Rota Yönetimi</h2>
            <div class="flex space-x-2">
                <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300" @onclick="RefreshData">
                    <i class="fas fa-sync-alt mr-2"></i> Yenile
                </button>
                <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300" @onclick="OpenCreateModal">
                    <i class="fas fa-plus mr-2"></i> Yeni Rota Ekle
                </button>
            </div>
        </div>

        <!-- Map Section -->
        <div class="p-4 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div class="rounded-lg overflow-hidden shadow-md">
                <div id="admin-observer-map" class="w-full h-96 relative">
                    <!-- Loading Indicator -->
                    <div id="map-loading-indicator" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800 bg-opacity-75 dark:bg-opacity-75 z-10">
                        <div class="text-center">
                            <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-2"></i>
                            <p class="text-gray-600 dark:text-gray-300">Harita yükleniyor...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="p-4 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 filter-section">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sürücü</label>
                    <select @bind="driverFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        @foreach (var driver in drivers)
                        {
                            <option value="@driver.Id">@driver.Name @driver.Surname</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Durum</label>
                    <select @bind="statusFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        <option value="@RouteStatus.Scheduled">Planlanmış</option>
                        <option value="@RouteStatus.Active">Aktif</option>
                        <option value="@RouteStatus.Completed">Tamamlanmış</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Arama</label>
                    <div class="relative">
                        <input type="text" placeholder="Ara..." @bind="searchText" @bind:event="oninput" @onkeyup="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tarih Aralığı</label>
                    <div class="flex space-x-2">
                        <input type="date" @bind="startDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <input type="date" @bind="endDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                    </div>
                </div>

                <div class="md:col-span-4 flex justify-end mt-4">
                    <button class="flex items-center justify-center bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition duration-300"
                            @onclick="ClearFilters">
                        <i class="fas fa-filter-circle-xmark mr-2"></i> Filtreleri Temizle
                    </button>
                </div>
            </div>
        </div>
        <!-- Routes Table Section -->
        <div class="p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                    <thead class="bg-gray-100 dark:bg-gray-700">
                        <tr>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("StartTime")'>
                                <div class="flex items-center">
                                    Başlangıç
                                    @if (sortField == "StartTime")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Driver")'>
                                <div class="flex items-center">
                                    Sürücü
                                    @if (sortField == "Driver")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Vehicle")'>
                                <div class="flex items-center">
                                    Araç
                                    @if (sortField == "Vehicle")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Status")'>
                                <div class="flex items-center">
                                    Durum
                                    @if (sortField == "Status")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Distance")'>
                                <div class="flex items-center">
                                    Mesafe (km)
                                    @if (sortField == "Distance")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Duration")'>
                                <div class="flex items-center">
                                    Süre (dk)
                                    @if (sortField == "Duration")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                        @if (filteredRoutes == null)
                        {
                            <tr>
                                <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                    <div class="flex justify-center items-center">
                                        <i class="fas fa-circle-notch fa-spin mr-2"></i> Yükleniyor...
                                    </div>
                                </td>
                            </tr>
                        }
                        else if (!filteredRoutes.Any())
                        {
                            <tr>
                                <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                    <div class="flex flex-col justify-center items-center p-6">
                                        <i class="fas fa-route text-4xl mb-2 text-gray-400"></i>
                                        <p>Görüntülenecek rota bulunamadı.</p>
                                        <p class="text-sm text-gray-500 dark:text-gray-500 mt-2">Yeni bir rota ekleyin veya farklı filtreler deneyin.</p>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @for (int i = 0; i < displayedRoutes.Count; i++)
                            {
                                var route = displayedRoutes[i];
                                var rowIndex = ((currentPage - 1) * pageSize) + i + 1;
                                <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer @(expandedRouteId == route.Id ? "bg-gray-50 dark:bg-gray-700" : "")"
                                    @onclick="@(() => ToggleExpand(route.Id))">
                                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@FormatDateTime(route.StartTime)</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                        <div class="flex items-center">
                                            <i class="fas fa-user-hard-hat text-lg mr-3 text-primary-500"></i>
                                            <span>@GetDriverName(route.DriverId)</span>
                                        </div>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                        <div class="flex items-center">
                                            <i class="fas fa-truck text-lg mr-3 text-blue-500"></i>
                                            <span>@GetVehiclePlate(route.VehicleId)</span>
                                        </div>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm">
                                        <span class="@GetStatusBadgeClass(route.Status) px-2 py-1 rounded-full text-xs">
                                            @GetStatusText(route.Status)
                                        </span>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@route.TotalDistanceKm.ToString("F1")</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@route.EstimatedDurationMin</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm">
                                        <div class="flex space-x-3" @onclick:stopPropagation>
                                            @if (route.Status != RouteStatus.Completed)
                                            {
                                                <button class="text-green-500 hover:text-green-700 text-lg tooltip-container" @onclick="() => CompleteRoute(route.Id)">
                                                    <i class="fas fa-check-circle"></i>
                                                    <span class="tooltip">Tamamla</span>
                                                </button>
                                            }
                                            <button class="text-blue-500 hover:text-blue-700 text-lg tooltip-container" @onclick="() => ShowDetails(route)">
                                                <i class="fas fa-info-circle"></i>
                                                <span class="tooltip">Detay</span>
                                            </button>
                                            <button class="text-primary-500 hover:text-primary-700 text-lg tooltip-container" @onclick="() => FocusRouteOnMap(route.Id)">
                                                <i class="fas fa-map-marker"></i>
                                                <span class="tooltip">Haritada Göster</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>

                                @if (expandedRouteId == route.Id)
                                {
                                    <tr class="@(route.Status == RouteStatus.Completed ? "bg-gray-50 dark:bg-gray-800/50" : "bg-gray-50 dark:bg-gray-800") border-t animate-expandRow">
                                        <td colspan="7" class="px-6 py-6">
                                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                                <!-- Genel Bilgiler -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                                                            Genel Bilgiler
                                                        </h3>
                                                        <span class="@GetStatusBadgeClass(route.Status) px-2 py-1 rounded-full text-xs">
                                                            @GetStatusText(route.Status)
                                                        </span>
                                                    </div>

                                                    <div class="space-y-3">
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Başlangıç Tarihi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.StartTime.ToString("dd.MM.yyyy HH:mm")</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Mesafe:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.TotalDistanceKm.ToString("F1") km</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Süre:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedDurationMin dk</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Yakıt:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedFuelL.ToString("F2") L</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini CO2:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedCO2Kg.ToString("F2") kg</span>
                                                        </div>
                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Atık Tipi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                                                                @route.WasteType
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Rota Özeti -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="!text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-route mr-2 text-amber-500"></i>
                                                            Rota Özeti
                                                        </h3>
                                                    </div>

                                                    <div class="space-y-3">
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Adım Sayısı:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.Steps.Count() adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tamamlanan Adımlar:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.Steps.Count(s => s.IsCompleted) adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Kalan Adımlar:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.Steps.Count(s => !s.IsCompleted) adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Optimizasyon Tipi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                                                                @GetOptimizationTypeText(route.OptimizationType)
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- İlerleme Durumu -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-chart-line mr-2 text-green-500"></i>
                                                            İlerleme Durumu
                                                        </h3>
                                                        <button class="text-primary-500 hover:text-primary-700 px-2 py-1 rounded text-xs border border-primary-500"
                                                                @onclick:stopPropagation="true"
                                                                @onclick="() => ShowDetails(route)">
                                                            <i class="fas fa-play mr-1"></i> Simüle Et
                                                        </button>
                                                    </div>

                                                    <div class="space-y-4">
                                                        <!-- Progress Circle -->
                                                        <div class="flex justify-center">
                                                            @{
                                                                double progressPercentage = route.Steps.Any()
                                                                ? (double)route.Steps.Count(s => s.IsCompleted) / route.Steps.Count * 100
                                                                : 0;
                                                            }
                                                            <div class="relative w-24 h-24">
                                                                <svg class="w-full h-full" viewBox="0 0 36 36">
                                                                    <path class="stroke-current text-gray-200 dark:text-gray-700" fill="none" stroke-width="3.8" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                                    <path class="@GetProgressColor(progressPercentage) stroke-current" fill="none" stroke-width="3.8" stroke-linecap="round"
                                                                          stroke-dasharray="@(progressPercentage), 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                                    <text x="18" y="20.5" class="fill-current font-bold text-gray-700 dark:text-gray-200" text-anchor="middle" font-size="7">@progressPercentage.ToString("F0")%</text>
                                                                </svg>
                                                            </div>
                                                        </div>

                                                        <!-- Progress Bar -->
                                                        <div>
                                                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-2">
                                                                <div class="@GetProgressColor(progressPercentage) h-2.5 rounded-full" style="width: @progressPercentage%"></div>
                                                            </div>
                                                            <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                                                                <span>0%</span>
                                                                <span>50%</span>
                                                                <span>100%</span>
                                                            </div>
                                                        </div>

                                                        @if (route.Status != RouteStatus.Completed)
                                                        {
                                                            <button class="w-full mt-2 py-1.5 bg-green-500 hover:bg-green-600 text-white rounded-md transition-colors flex items-center justify-center"
                                                                    @onclick:stopPropagation="true"
                                                                    @onclick="() => CompleteRoute(route.Id)">
                                                                <i class="fas fa-check-circle mr-2"></i> Rotayı Tamamla
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <div class="w-full mt-2 py-1.5 bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 rounded-md flex items-center justify-center">
                                                                <i class="fas fa-check-double mr-2"></i> Rota Tamamlandı
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Adımlar Listesi -->
                                            <div class="mt-6">
                                                <h4 class="font-semibold text-gray-800 dark:text-white mb-3 flex items-center">
                                                    <i class="fas fa-list-check mr-2 text-primary-500"></i> Rota Adımları
                                                </h4>
                                                <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                                                    <table class="min-w-full">
                                                        <thead class="bg-gray-50 dark:bg-gray-700">
                                                            <tr>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">No</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Adres</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Konum</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Durum</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                                                            @foreach (var step in route.Steps.OrderBy(s => s.Order))
                                                            {
                                                                <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                                                                    <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@step.Order</td>
                                                                    <td class="px-4 py-2 text-sm text-gray-700 dark:text-gray-300">@step.Address</td>
                                                                    <td class="px-4 py-2 text-sm text-gray-500 dark:text-gray-400">(@step.Latitude.ToString("F4"), @step.Longitude.ToString("F4"))</td>
                                                                    <td class="px-4 py-2 whitespace-nowrap">
                                                                        <span class="@(step.IsCompleted ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300") px-2 py-0.5 rounded-full text-xs">
                                                                            @(step.IsCompleted ? "Tamamlandı" : "Beklemede")
                                                                        </span>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (filteredRoutes != null && totalPages > 1)
            {
                <div class="flex justify-center mt-4">
                    <div class="flex space-x-1">
                        <button @onclick="() => ChangePage(1)"
                                disabled="@(currentPage == 1)"
                                class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                        <button @onclick="() => ChangePage(currentPage - 1)"
                                disabled="@(currentPage == 1)"
                                class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-left"></i>
                        </button>

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            var pageNumber = i;
                            <button @onclick="() => ChangePage(pageNumber)"
                                    class="@(currentPage == pageNumber ? "bg-primary-500 text-white" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                                @pageNumber
                            </button>
                        }

                        <button @onclick="() => ChangePage(currentPage + 1)"
                                disabled="@(currentPage == totalPages)"
                                class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-right"></i>
                        </button>
                        <button @onclick="() => ChangePage(totalPages)"
                                disabled="@(currentPage == totalPages)"
                                class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </div>
                </div>
            }

            <div class="text-xs text-gray-500 dark:text-gray-400 mt-4 text-center">
                Toplam @(filteredRoutes?.Count ?? 0) rota
            </div>
        </div>
    }
</div>

<!-- Route Details Modal -->
@if (isModalOpen && selectedRoute != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                    <i class="fas fa-route mr-3 text-primary-500"></i>
                    @(GetDriverName(selectedRoute.DriverId) + " - " + FormatDateTime(selectedRoute.StartTime))
                </h2>
                <button class="text-gray-500 hover:text-red-600" @onclick="CloseModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Modal Content -->
            <div class="p-6">
                <!-- Route Info Overview -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-user-hard-hat mr-2 text-primary-500"></i>
                            <span class="text-sm">Sürücü:</span>
                            <span class="ml-auto font-medium">@GetDriverName(selectedRoute.DriverId)</span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-truck mr-2 text-blue-500"></i>
                            <span class="text-sm">Araç:</span>
                            <span class="ml-auto font-medium">@GetVehiclePlate(selectedRoute.VehicleId)</span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300">
                            <i class="fas fa-trash-alt mr-2 text-green-500"></i>
                            <span class="text-sm">Atık Tipi:</span>
                            <span class="ml-auto font-medium">@selectedRoute.WasteType</span>
                        </div>
                    </div>
                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-calendar-alt mr-2 text-yellow-500"></i>
                            <span class="text-sm">Başlangıç:</span>
                            <span class="ml-auto font-medium">@selectedRoute.StartTime.ToString("dd.MM.yyyy HH:mm")</span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-road mr-2 text-purple-500"></i>
                            <span class="text-sm">Mesafe:</span>
                            <span class="ml-auto font-medium">@selectedRoute.TotalDistanceKm.ToString("F1") km</span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300">
                            <i class="fas fa-clock mr-2 text-orange-500"></i>
                            <span class="text-sm">Süre:</span>
                            <span class="ml-auto font-medium">@selectedRoute.EstimatedDurationMin dk</span>
                        </div>
                    </div>
                    <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex flex-col justify-between">
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-chart-pie mr-2 text-red-500"></i>
                            <span class="text-sm">Durum:</span>
                            <span class="ml-auto">
                                <span class="@GetStatusBadgeClass(selectedRoute.Status) px-2 py-1 rounded-full text-xs">
                                    @GetStatusText(selectedRoute.Status)
                                </span>
                            </span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300 mb-2">
                            <i class="fas fa-sort-amount-down mr-2 text-indigo-500"></i>
                            <span class="text-sm">Optimizasyon:</span>
                            <span class="ml-auto font-medium">@GetOptimizationTypeText(selectedRoute.OptimizationType)</span>
                        </div>
                        <div class="flex items-center text-gray-700 dark:text-gray-300">
                            <i class="fas fa-map-marked-alt mr-2 text-teal-500"></i>
                            <span class="text-sm">Adımlar:</span>
                            <span class="ml-auto font-medium">@selectedRoute.Steps.Count() adet</span>
                        </div>
                    </div>
                </div>

                <!-- Çevresel Etki -->
                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md mb-6">
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                        <i class="fas fa-leaf mr-2 text-green-500"></i> Çevresel Etki
                    </h3>

                    <div class="space-y-3">
                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Yakıt Tüketimi:</span>
                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@selectedRoute.EstimatedFuelL.ToString("F2") L</span>
                        </div>
                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini CO2 Emisyonu:</span>
                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@selectedRoute.EstimatedCO2Kg.ToString("F2") kg</span>
                        </div>
                    </div>
                </div>

                <!-- Map -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mb-6">
                    <div class="p-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 flex justify-between items-center">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                            <i class="fas fa-map-marked-alt mr-2 text-primary-500"></i> Rota Haritası
                        </h3>
                        <div class="text-sm text-gray-500 dark:text-gray-400 flex items-center">
                            <i class="fas fa-map-pin mr-1 text-red-500"></i> Adım sayısı: @selectedRoute.Steps.Count()
                        </div>
                    </div>
                    <div id="route-map" class="w-full h-80"></div>
                </div>

                <!-- Simulation Controls -->
                <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-6">
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                        <i class="fas fa-play-circle mr-2 text-green-500"></i> Rota Simülasyonu
                    </h3>

                    <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
                        <div class="flex space-x-2">
                            <button id="start-simulation" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md flex items-center transition-colors">
                                <i class="fas fa-play mr-2"></i> Başlat
                            </button>
                            <button id="pause-simulation" class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center transition-colors">
                                <i class="fas fa-pause mr-2"></i> Duraklat
                            </button>
                            <button id="stop-simulation" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md flex items-center transition-colors">
                                <i class="fas fa-stop mr-2"></i> Durdur
                            </button>
                        </div>

                        <div class="flex flex-col">
                            <div class="flex items-center justify-between mb-1">
                                <span class="text-gray-600 dark:text-gray-300 text-sm">Hız: <span id="speed-value">1x</span></span>
                                <div class="flex space-x-1">
                                    <button id="speed-min" class="bg-gray-200 text-gray-700 px-2 py-0.5 rounded text-xs">Min</button>
                                    <button id="speed-max" class="bg-gray-200 text-gray-700 px-2 py-0.5 rounded text-xs">Max</button>
                                </div>
                            </div>
                            <input type="range" id="speed-slider" min="1" max="10" value="1"
                                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                        </div>
                    </div>

                    <!-- Simulation Progress -->
                    <div class="mt-4">
                        <div class="flex justify-between items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
                            <span>İlerleme: <span id="progress-percentage">0%</span></span>
                            <span>Tahmini kalan süre: <span id="remaining-time">@selectedRoute.EstimatedDurationMin dk</span></span>
                        </div>
                        <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-3">
                            <div id="progress-bar" class="bg-primary-500 h-3 rounded-full" style="width: 0%"></div>
                        </div>
                    </div>
                </div>

                <!-- Steps Table -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mb-4">
                    <div class="p-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                            <i class="fas fa-list-check mr-2 text-purple-500"></i> Rota Adımları
                        </h3>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead class="bg-gray-50 dark:bg-gray-700">
                                <tr>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">No</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Adres</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Konum</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Durum</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 dark:divide-gray-700" id="route-steps-table">
                                @foreach (var step in selectedRoute.Steps.OrderBy(s => s.Order))
                                {
                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700" data-step-id="@step.Id">
                                        <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@step.Order</td>
                                        <td class="px-4 py-3 text-sm text-gray-700 dark:text-gray-300">@step.Address</td>
                                        <td class="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">(@step.Latitude.ToString("F4"), @step.Longitude.ToString("F4"))</td>
                                        <td class="px-4 py-3 whitespace-nowrap">
                                            <span class="@(step.IsCompleted ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300") px-2 py-0.5 rounded-full text-xs">
                                                @(step.IsCompleted ? "Tamamlandı" : "Beklemede")
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Actions -->
                <div class="flex justify-between items-center pt-4 border-t border-gray-200 dark:border-gray-700">
                    @if (selectedRoute.Status != RouteStatus.Completed)
                    {
                        <div class="flex space-x-2">
                            <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors flex items-center" @onclick="() => CompleteRoute(selectedRoute.Id)">
                                <i class="fas fa-check-circle mr-2"></i> Rotayı Tamamla
                            </button>
                            <button class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md transition-colors flex items-center" @onclick="() => ReoptimizeWithTraffic(selectedRoute.Id)">
                                <i class="fas fa-traffic-light mr-2"></i> Trafik ile Yeniden Optimize Et
                            </button>
                        </div>
                    }
                    else
                    {
                        <div></div>
                    }
                    <button class="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded-md transition-colors" @onclick="CloseModal">
                        Kapat
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Create Route Modal -->
@if (showCreateModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                    <i class="fas fa-route mr-3 text-primary-500"></i> Yeni Rota Oluştur
                </h2>
                <button class="text-gray-500 hover:text-red-600" @onclick="CloseCreateModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Modal Content -->
            <div class="p-6">
                <EditForm Model="newRoute" OnValidSubmit="CreateRoute">
                    <!-- Temel Bilgiler -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-info-circle mr-2 text-blue-500"></i> Temel Bilgiler
                        </h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rota Adı</label>
                                <InputText class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" @bind-Value="newRoute.Name" placeholder="Örn: Sabah Rotası" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Atık Türü</label>
                                <InputText class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" @bind-Value="newRoute.WasteType" placeholder="Örn: Genel Çöp" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Başlangıç Zamanı</label>
                                <InputDate class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" @bind-Value="newRoute.ScheduledStart" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Optimizasyon Türü</label>
                                <div class="grid grid-cols-2 gap-3">
                                    <div class="relative">
                                        <input type="radio" id="opt-shortest" name="optimization-type" value="@OptimizationType.EnKisaMesafe"
                                               checked="@(newRoute.OptimizationType == OptimizationType.EnKisaMesafe)"
                                               @onchange='@(() => newRoute.OptimizationType = OptimizationType.EnKisaMesafe)'
                                               class="hidden peer" />
                                        <label for="opt-shortest" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-blue-400 peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-route mr-2 text-blue-500"></i>
                                            <span class="font-medium text-sm">En Kısa Mesafe</span>
                                        </label>
                                    </div>
                                    <div class="relative">
                                        <input type="radio" id="opt-fill" name="optimization-type" value="@OptimizationType.DolulukOncelikli"
                                               checked="@(newRoute.OptimizationType == OptimizationType.DolulukOncelikli)"
                                               @onchange='@(() => newRoute.OptimizationType = OptimizationType.DolulukOncelikli)'
                                               class="hidden peer" />
                                        <label for="opt-fill" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-fill-drip mr-2 text-green-500"></i>
                                            <span class="font-medium text-sm">Doluluk Öncelikli</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Başlangıç Noktası -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-map-marker-alt mr-2 text-red-500"></i> Başlangıç/Bitiş Noktası
                        </h3>

                        <div class="flex items-center mb-3 bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 p-3 rounded-lg">
                            <i class="fas fa-info-circle mr-2 text-xl"></i>
                            <p class="text-sm">Tüm rotalar aynı noktadan başlayıp aynı noktada bitecektir.</p>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="flex items-center">
                                <i class="fas fa-map-marker-alt text-red-500 mr-2 text-xl"></i>
                                <div>
                                    <span class="text-gray-700 dark:text-gray-300 font-medium">Çorlu Belediyesi</span>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">@fixedStartLat.ToString("F6"), @fixedStartLng.ToString("F6")</p>
                                </div>
                            </div>
                            <div id="start-point-mini-map" class="h-24 rounded-md overflow-hidden border border-gray-300 dark:border-gray-600"></div>
                        </div>
                    </div>

                    <!-- Sürücü ve Araç Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-users mr-2 text-amber-500"></i> Sürücü ve Araç
                        </h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <!-- Sürücü Seçimi -->
<div>
    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Sürücü Seçimi</label>
    <div class="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto p-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        @if (availableDrivers != null && availableDrivers.Any())
        {
            foreach (var driver in availableDrivers)
            {
                <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800 @(newRoute.DriverId == driver.Id ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                     @onclick="@(() => newRoute.DriverId = driver.Id)">
                    <input type="radio"
                           id="driver-@driver.Id"
                           name="driver-selection"
                           value="@driver.Id"
                           checked="@(newRoute.DriverId == driver.Id)"
                           @onchange="@(e => newRoute.DriverId = driver.Id)"
                           class="w-4 h-4 mr-3 text-primary-600 bg-gray-100 border-gray-300 rounded-full focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                    <div class="flex items-center">
                        <div class="w-8 h-8 bg-primary-500 rounded-full text-white flex items-center justify-center mr-3">
                            <i class="fas fa-user"></i>
                        </div>
                        <div>
                            <p class="font-medium text-gray-800 dark:text-white">@driver.Name @driver.Surname</p>
                            <p class="text-xs text-gray-500 dark:text-gray-400">@driver.PhoneNumber</p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                <i class="fas fa-users-slash text-3xl mb-2"></i>
                <p>Kullanılabilir sürücü bulunamadı</p>
            </div>
        }
    </div>
</div>

<!-- Araç Seçimi -->
<div>
    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Araç Seçimi</label>
    <div class="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto p-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        @if (availableVehicles != null && availableVehicles.Any())
        {
            foreach (var vehicle in availableVehicles)
            {
                <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800 @(newRoute.VehicleId == vehicle.Id.ToString() ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                     @onclick="@(() => newRoute.VehicleId = vehicle.Id.ToString())">
                    <input type="radio"
                           id="vehicle-@vehicle.Id"
                           name="vehicle-selection"
                           value="@vehicle.Id.ToString()"
                           checked="@(newRoute.VehicleId == vehicle.Id.ToString())"
                           @onchange="@(e => newRoute.VehicleId = vehicle.Id.ToString())"
                           class="w-4 h-4 mr-3 text-primary-600 bg-gray-100 border-gray-300 rounded-full focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                    <div class="flex items-center">
                        <div class="w-8 h-8 bg-blue-500 rounded-full text-white flex items-center justify-center mr-3">
                            <i class="fas fa-truck"></i>
                        </div>
                        <div>
                            <p class="font-medium text-gray-800 dark:text-white">@vehicle.Plate</p>
                            <p class="text-xs text-gray-500 dark:text-gray-400">@vehicle.Description</p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                <i class="fas fa-truck-slash text-3xl mb-2"></i>
                <p>Kullanılabilir araç bulunamadı</p>
            </div>
        }
    </div>
</div>
                        </div>
                    </div>

                    <!-- Atık Kutuları Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <div class="flex justify-between items-center mb-4 border-b border-gray-200 dark:border-gray-600 pb-2">
                            <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                <i class="fas fa-dumpster mr-2 text-green-500"></i> Atık Kutuları
                            </h3>
                            <span class="bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 text-xs px-2 py-1 rounded-full">
                                @newRoute.WasteBinIds.Count adet seçildi
                            </span>
                        </div>

                        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg max-h-72 overflow-y-auto">
                            <div class="mb-3 relative">
                                <input type="text" placeholder="Atık kutusu ara..."
                                       @bind="binSearchText" @bind:event="oninput" @onkeyup="FilterBinsWithDebounce"
                                       class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <i class="fas fa-search text-gray-400"></i>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                @foreach (var bin in filteredBins)
                                {
                                    <div class="flex items-center space-x-2 p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-700 transition-colors @(newRoute.WasteBinIds.Contains(bin.Id) ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                                         @onclick="e => ToggleBin(bin.Id, !newRoute.WasteBinIds.Contains(bin.Id))">
                                        <input type="checkbox"
                                               id="bin-@bin.Id"
                                               value="@bin.Id"
                                               checked="@newRoute.WasteBinIds.Contains(bin.Id)"
                                               @onchange="e => ToggleBin(bin.Id, e.Value)"
                                               class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:bg-gray-700 dark:border-gray-600" />
                                        <div class="flex-1">
                                            <div class="flex justify-between">
                                                <span class="font-medium text-gray-800 dark:text-white text-sm">@bin.Label</span>
                                                <span class="@GetFillLevelBadgeClass(bin.FillLevel) text-xs px-2 py-0.5 rounded-full">
                                                    @(bin.FillLevel?.ToString("F0") ?? "0")%
                                                </span>
                                            </div>
                                            <span class="text-xs text-gray-500 dark:text-gray-400 line-clamp-1">@bin.Address</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Notlar -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-sticky-note mr-2 text-yellow-500"></i> Notlar
                        </h3>

                        <textarea class="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white resize-none focus:outline-none focus:ring-primary-500 focus:border-primary-500"
                                  @bind="newRoute.Notes"
                                  rows="3"
                                  placeholder="Rotayla ilgili notlarınızı buraya ekleyebilirsiniz..."></textarea>
                    </div>

                    <!-- Özet ve Butonlar -->
                    <div class="flex flex-col-reverse md:flex-row justify-between items-start md:items-center gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                        <div class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <div class="flex items-center">
                                <i class="fas fa-route text-primary-500 mr-2"></i>
                                <span>Optimizasyon: @GetOptimizationTypeText(newRoute.OptimizationType)</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-dumpster text-green-500 mr-2"></i>
                                <span>Seçilen Atık Kutusu: @newRoute.WasteBinIds.Count adet</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-map-marker-alt text-red-500 mr-2"></i>
                                <span>Başlangıç Noktası: Çorlu Belediyesi</span>
                            </div>
                        </div>
                        <div class="flex space-x-3">
                            <button type="button" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" @onclick="CloseCreateModal">
                                İptal
                            </button>
                            <button type="submit" class="px-5 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors shadow-sm">
                                <i class="fas fa-check mr-2"></i> Rota Oluştur
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    /* Tooltip Styles */
    .tooltip-container {
        position: relative;
    }

        .tooltip-container .tooltip {
            visibility: hidden;
            background-color: rgba(0,0,0,0.8);
            color: white;
            text-align: center;
            border-radius: 4px;
            padding: 5px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            white-space: nowrap;
            font-size: 12px;
        }

            .tooltip-container .tooltip::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: rgba(0,0,0,0.8) transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

    /* Row Expansion Animation */
    @@keyframes expandRow {
        from {
            opacity: 0;
            max-height: 0;
            transform: scaleY(0);
            transform-origin: top;
        }

        to {
            opacity: 1;
            max-height: 1000px;
            transform: scaleY(1);
            transform-origin: top;
        }
    }

    .animate-expandRow {
        animation: expandRow 0.3s ease-out forwards;
    }

    /* Modal Animation */
    @@keyframes modalShow {
        from {
            opacity: 0;
            transform: scale(0.95) translateY(10px);
        }

        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    .animate-modal-show {
        animation: modalShow 0.2s ease-out forwards;
    }

    /* Map InfoWindow Styles */
    :global(.gm-style .gm-style-iw-c) {
        padding: 0 !important;
        border-radius: 8px !important;
        box-shadow: 0 6px 16px rgba(0,0,0,0.15) !important;
    }

    :global(.gm-style .gm-style-iw-d) {
        overflow: hidden !important;
    }

    /* Pulse animation for markers */
    @@keyframes markerPulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.1);
            opacity: 0.9;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    .marker-pulse {
        animation: markerPulse 1.5s infinite;
    }

    /* Line clamp for address text */
    .line-clamp-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>


<script>
    // Initialize module to contain maps and related objects
    window.ecoRouteMapModule = window.ecoRouteMapModule || {};

    (function(module) {
        // Maps and other variables at module level
        module.maps = module.maps || {};
        module.markers = module.markers || [];
        module.routePolylines = module.routePolylines || [];
        module.truckMarkers = module.truckMarkers || [];
        module.wasteBinMarkers = module.wasteBinMarkers || [];
        module.currentInfoWindow = null;
        module.dotNetRef = null;
        module.simulationVehicleMarker = null;
        module.simulationNotificationSent = false;
        module.alreadyNotifiedSteps = [];
        let markerClusterer = null;

        // Constants
        const DEFAULT_CENTER = { lat: 41.1634, lng: 27.7951 }; // Çorlu center
        const DEFAULT_ZOOM = 13;
        const FOCUS_ZOOM = 15;
        const DETAIL_ZOOM = 14;
        const RECYCLING_GREEN = "#10B981"; // Theme color for recycling

        // Initialize Google Maps - this needs to be in global scope
        window.initializeGoogleMaps = function (reference) {
            module.dotNetRef = reference;
            console.log("Google Maps initialization started");
        };

        // Google Maps Interop
        window.googleMapsInterop = {
            // Generate warehouse SVG icon with theme-aware coloring
            getWarehouseIcon: function(isDarkMode = false) {
                // Theme-aware colors
    const fillColor   = isDarkMode ? '#6B7280' : '#3B82F6';
    const strokeColor = isDarkMode ? '#9CA3AF' : '#2563EB';


                  // Warehouse SVG from Material Icons
                const svg = `
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48">
      <path fill="${fillColor}" stroke="${strokeColor}" stroke-width="1"
            d="M12 3L2 9v2h20V9l-10-6zm0 2.18L18.4 9H5.6L12 5.18zM4 11v8h3v-6h2v6h2v-6h2v6h2v-6h2v6h3v-8H4z"/>
    </svg>
                `;
                
                // Convert SVG to base64 data URL
                return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
            },

            // Generate shipping truck SVG icon with theme-aware coloring
            getShippingIcon: function(isDarkMode = false) {
                // Theme-aware colors
                const fillColor = isDarkMode ? '#4B5563' : '#3B82F6'; // Dark gray in dark mode, blue in light mode
                const strokeColor = isDarkMode ? '#6B7280' : '#2563EB';
                
                // Local Shipping SVG from Material Icons
                const svg = `
                    <svg xmlns="http://www.w3.org/2000/svg" height="48" width="48" viewBox="0 0 48 48">
                        <path fill="${fillColor}" stroke="${strokeColor}" stroke-width="1" d="M11 42q-1.25 0-2.125-.875T8 39V14q0-1.25.875-2.125T11 11h18q1.25 0 2.125.875T32 14v3h5q.75 0 1.525.425.775.425 1.225 1.075l5.6 8.35q.35.55.5 1.225.15.675.15 1.425V39q0 1.25-.875 2.125T42 42h-1.5q0 2.1-1.45 3.55Q37.6 47 35.5 47q-2.1 0-3.55-1.45Q30.5 44.1 30.5 42h-13q0 2.1-1.45 3.55Q14.6 47 12.5 47q-2.1 0-3.55-1.45Q7.5 44.1 7.5 42Zm1.5-3h23V14H12.5Zm23 0H39v-9h-2.5Zm-23-6v-13 13Zm-1 6q.85 0 1.425-.575Q13 37.85 13 37q0-.85-.575-1.425Q11.85 35 11 35q-.85 0-1.425.575Q9 36.15 9 37q0 .85.575 1.425Q10.15 39 12 39Zm24 0q.85 0 1.425-.575Q38 37.85 38 37q0-.85-.575-1.425Q36.85 35 36 35q-.85 0-1.425.575Q34 36.15 34 37q0 .85.575 1.425Q35.15 39 36 39Zm3-12h3.5l-5-7.5H39Z"/>
                    </svg>
                `;
                
                // Convert SVG to base64 data URL
                return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
            },
            
            // Generate trash bin SVG icon based on fill level
            getDeleteIcon: function(isCompleted = false, fillLevel = 0, isDarkMode = false) {
                // Determine colors based on fill level
                let fillColor, strokeColor;

                // Determine colors based on fill level
                if (fillLevel >= 90) {
                    fillColor = '#EF4444'; // Red for 90-100%
                    strokeColor = '#B91C1C';
                } else if (fillLevel >= 70) {
                    fillColor = '#F97316'; // Orange for 70-90%
                    strokeColor = '#C2410C';
                } else if (fillLevel >= 50) {
                    fillColor = '#F59E0B'; // Amber for 50-70%
                    strokeColor = '#B45309';
                } else if (fillLevel >= 30) {
                    fillColor = '#3B82F6'; // Blue for 30-50%
                    strokeColor = '#1D4ED8';
                } else {
                    fillColor = '#10B981'; // Green for 0-30%
                    strokeColor = '#059669';
                }

                // Adjust for completion status
                if (isCompleted) {
                    fillColor = '#10B981'; // Green for completed
                    strokeColor = '#059669';
                }
                
                // Calculate fill height based on the fill level percentage
                const fillHeight = Math.max(0, Math.min(20, fillLevel / 5));
                
                // Delete icon SVG from Material Icons with fill level
                const svg = `
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 36" width="24" height="36">
                        <!-- Pin -->
                        <path d="M12,0 C5.5,0 0,5.5 0,12 C0,18.5 12,36 12,36 C12,36 24,18.5 24,12 C24,5.5 18.5,0 12,0 Z" fill="${fillColor}" stroke="${strokeColor}" stroke-width="1" />
                        
                        <!-- Delete icon from Material Design -->
                        <g transform="translate(5, 6) scale(0.6)">
                            <path fill="white" d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" />
                            
                            <!-- Fill level indicator -->
                            <rect x="7" y="${21 - fillHeight}" width="10" height="${fillHeight}" fill="${fillColor}" opacity="0.8" />
                        </g>
                    </svg>
                `;
                
                // Convert SVG to base64 data URL
                return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
            },

            // Initialize main map with improved error handling
            initializeMainMap: function () {
                const mapElement = document.getElementById("admin-observer-map");
                console.log("Initializing main map in element:", mapElement?.id);

                // Map element yok ise hata ver ve çık
                if (!mapElement) {
                    console.error("Map element not found. Make sure 'admin-observer-map' exists in the DOM");
                    if (module.dotNetRef) {
                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs', 'Harita yüklenemedi: HTML element bulunamadı. Sayfayı yenileyin veya daha sonra tekrar deneyin.');
                    }
                    return false; // Return false to indicate initialization failed
                }

                // Hide loading indicator when map is fully loaded
                const hideLoading = () => {
                    const loadingIndicator = document.getElementById('map-loading-indicator');
                    if (loadingIndicator) {
                        loadingIndicator.style.opacity = '0';
                        setTimeout(() => {
                            loadingIndicator.style.display = 'none';
                        }, 500);
                    }
                };

                try {
                    // Eğer harita zaten varsa temizle
                    if (module.maps.mainMap) {
                        console.log("Map already exists, clearing existing data");
                        this.clearMarkers();
                        this.clearPolylines();
                        this.clearWasteBinMarkers();
                        hideLoading();

                        if (module.dotNetRef) {
                            module.dotNetRef.invokeMethodAsync('OnMapInitialized');
                        }
                        return true;
                    }

                    // Haritayı oluştur
                    module.maps.mainMap = new google.maps.Map(mapElement, {
                        center: DEFAULT_CENTER,
                        zoom: DEFAULT_ZOOM,
                        mapTypeId: 'roadmap',
                        streetViewControl: false,
                        mapTypeControl: false,
                        fullscreenControl: true,
                    });

                    // Add location button
                    this.addLocationButton(module.maps.mainMap);

                    // Hide loading indicator
                    google.maps.event.addListenerOnce(module.maps.mainMap, 'tilesloaded', () => {
                        hideLoading();
                        if (module.dotNetRef) {
                            module.dotNetRef.invokeMethodAsync('OnMapInitialized');
                        }
                    });

                    // Add marker for Çorlu Belediyesi (depot)
                    const isDarkMode = document.documentElement.classList.contains('dark');
                    new google.maps.Marker({
                        position: DEFAULT_CENTER,
                        map: module.maps.mainMap,
                        icon: {
                            url: this.getWarehouseIcon(isDarkMode),
                            scaledSize: new google.maps.Size(40, 40),
                            anchor: new google.maps.Point(20, 20)
                        },
                        title: 'Çorlu Belediyesi (Araç Deposu)',
                        zIndex: 1000
                    });

                    return true; // Return true to indicate initialization succeeded

                } catch (error) {
                    console.error("Error initializing main map:", error);
                    hideLoading();
                    if (module.dotNetRef) {
                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs', 'Harita yüklenirken hata oluştu: ' + error.message);
                    }
                    return false; // Return false to indicate initialization failed
                }
            },

            // Add location button to map
            addLocationButton: function (map) {
                const locationButton = document.createElement('button');
                locationButton.className = 'custom-map-control-button';
                locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
                locationButton.title = 'Konumumu göster';
                locationButton.style.backgroundColor = '#fff';
                locationButton.style.border = 'none';
                locationButton.style.borderRadius = '2px';
                locationButton.style.boxShadow = '0 1px 4px rgba(0,0,0,0.3)';
                locationButton.style.cursor = 'pointer';
                locationButton.style.margin = '10px';
                locationButton.style.padding = '8px';
                locationButton.style.textAlign = 'center';
                locationButton.style.width = '40px';
                locationButton.style.height = '40px';

                locationButton.addEventListener('click', () => {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                            (position) => {
                                const pos = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude,
                                };

                                const userMarker = new google.maps.Marker({
                                    position: pos,
                                    map: map,
                                    icon: {
                                        path: google.maps.SymbolPath.CIRCLE,
                                        fillColor: '#4285F4',
                                        fillOpacity: 1,
                                        strokeColor: '#FFFFFF',
                                        strokeWeight: 2,
                                        scale: 8,
                                    },
                                    title: 'Konumunuz',
                                });

                                map.setCenter(pos);
                                map.setZoom(15);

                                setTimeout(() => {
                                    userMarker.setMap(null);
                                }, 5000);
                            },
                            () => {
                                alert('Konumunuz alınamadı.');
                            }
                        );
                    } else {
                        alert('Tarayıcınız konum özelliğini desteklemiyor.');
                    }
                });

                map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
            },

            // Initialize start point mini map
            initializeStartPointMap: function() {
                const mapElement = document.getElementById("start-point-mini-map");
                if (!mapElement) {
                    console.log("Start point mini map element not found");
                    return false;
                }

                // Eğer harita zaten varsa yenisini oluşturma
                if (module.maps.startPointMap) {
                    return true;
                }

                try {
                    module.maps.startPointMap = new google.maps.Map(mapElement, {
                        center: DEFAULT_CENTER,
                        zoom: 14,
                        mapTypeId: 'roadmap',
                        disableDefaultUI: true,
                        draggable: false,
                        scrollwheel: false,
                        disableDoubleClickZoom: true
                    });

                    // Add marker for depot
                    const isDarkMode = document.documentElement.classList.contains('dark');
                    new google.maps.Marker({
                        position: DEFAULT_CENTER,
                        map: module.maps.startPointMap,
                        icon: {
                            url: this.getWarehouseIcon(isDarkMode),
                            scaledSize: new google.maps.Size(32, 32),
                            anchor: new google.maps.Point(16, 16)
                        },
                        title: 'Çorlu Belediyesi (Başlangıç Noktası)'
                    });

                    return true;
                } catch (error) {
                    console.error("Error initializing start point map:", error);
                    return false;
                }
            },

            // Initialize detail map
            initializeDetailMap: function(routeJson) {
                const mapElement = document.getElementById("route-map");
                if (!mapElement) {
                    console.log("Route map element not found");
                    return false;
                }

                // Clear any existing detail map
                if (module.maps.detailMap) {
                    module.maps.detailMap = null;
                }

                try {
                    const routeData = JSON.parse(routeJson);
                    const routeSteps = routeData.steps;
                    const polyline = routeData.overviewPolyline;
                    const isDarkMode = document.documentElement.classList.contains('dark');

                    module.maps.detailMap = new google.maps.Map(mapElement, {
                        center: DEFAULT_CENTER,
                        zoom: DETAIL_ZOOM,
                        mapTypeId: 'roadmap',
                        streetViewControl: false,
                        mapTypeControl: false,
                        fullscreenControl: true
                    });

                    // Add marker for depot
                    new google.maps.Marker({
                        position: DEFAULT_CENTER,
                        map: module.maps.detailMap,
                        icon: {
                            url: this.getWarehouseIcon(isDarkMode),
                            scaledSize: new google.maps.Size(32, 32),
                            anchor: new google.maps.Point(16, 16)
                        },
                        title: 'Çorlu Belediyesi (Başlangıç/Bitiş Noktası)',
                        zIndex: 1000
                    });

                    // If we have steps but no polyline, create a polyline connecting the steps
                    if (routeSteps && routeSteps.length > 0) {
                        // Create bounds to fit all steps
                        const bounds = new google.maps.LatLngBounds();

                        // Add markers for each step
                        routeSteps.forEach((step, index) => {
                            if (!step.latitude || !step.longitude ||
                                !isFinite(step.latitude) || !isFinite(step.longitude)) {
                                console.warn(`Invalid coordinates for step ${index}:`, step);
                                return; // Skip this step
                            }

                            const position = { lat: step.latitude, lng: step.longitude };
                            bounds.extend(position);

                            // Create marker
                            const marker = new google.maps.Marker({
                                position: position,
                                map: module.maps.detailMap,
                                label: {
                                    text: `${index + 1}`,
                                    color: 'white',
                                    fontSize: '12px',
                                    fontWeight: 'bold'
                                },
                                icon: {
                                    url: this.getDeleteIcon(step.isCompleted, 70, isDarkMode),
                                    labelOrigin: new google.maps.Point(12, 15),
                                    scaledSize: new google.maps.Size(30, 30)
                                },
                                title: step.address
                            });

                            // Create info window
                            const infoWindow = new google.maps.InfoWindow({
                                content: `
                                    <div style="padding: 10px; max-width: 250px;">
                                        <div style="font-weight: bold; margin-bottom: 5px;">Adım ${index + 1}</div>
                                        <div style="margin-bottom: 5px;">${step.address}</div>
                                        <div style="font-size: 12px; color: #666;">${step.latitude.toFixed(6)}, ${step.longitude.toFixed(6)}</div>
                                        <div style="margin-top: 5px; font-weight: bold; color: ${step.isCompleted ? 'green' : 'orange'};">
                                            ${step.isCompleted ? 'Tamamlandı' : 'Beklemede'}
                                        </div>
                                    </div>
                                `
                            });

                            // Add click listener
                            marker.addListener('click', () => {
                                if (module.currentInfoWindow) {
                                    module.currentInfoWindow.close();
                                }
                                infoWindow.open(module.maps.detailMap, marker);
                                module.currentInfoWindow = infoWindow;
                            });
                        });

                        // If we have polyline data, use it
                        if (polyline) {
                            try {
                                const path = google.maps.geometry.encoding.decodePath(polyline);
                                if (path && path.length > 0) {
                                    const routePolyline = new google.maps.Polyline({
                                        path: path,
                                        geodesic: true,
                                        strokeColor: '#4285F4',
                                        strokeOpacity: 0.8,
                                        strokeWeight: 4
                                    });
                                    routePolyline.setMap(module.maps.detailMap);

                                    // Extend bounds to include all polyline points
                                    path.forEach(point => bounds.extend(point));
                                }
                            } catch (error) {
                                console.error("Error decoding polyline:", error);
                            }
                        } else {
                            // Create a simple polyline connecting the steps
                            const path = routeSteps
                                .filter(step => step.latitude && step.longitude &&
                                       isFinite(step.latitude) && isFinite(step.longitude))
                                .map(step => ({ lat: step.latitude, lng: step.longitude }));

                            // Add depot as first and last point if we have valid steps
                            if (path.length > 0) {
                                path.unshift(DEFAULT_CENTER);
                                path.push(DEFAULT_CENTER);

                                const routePolyline = new google.maps.Polyline({
                                    path: path,
                                    geodesic: true,
                                    strokeColor: '#4285F4',
                                    strokeOpacity: 0.8,
                                    strokeWeight: 4
                                });
                                routePolyline.setMap(module.maps.detailMap);
                            }
                        }

                        // Fit bounds to show all markers if we have any
                        if (!bounds.isEmpty()) {
                            module.maps.detailMap.fitBounds(bounds);

                            // Add some padding
                            google.maps.event.addListenerOnce(module.maps.detailMap, 'bounds_changed', function() {
                                if (module.maps.detailMap.getZoom() > 15) {
                                    module.maps.detailMap.setZoom(15);
                                }
                            });
                        }
                    }

                    // Initialize simulation vehicle
                    this.initializeSimulation(routeData);

                    return true;

                } catch (error) {
                    console.error("Error initializing detail map:", error);
                    if (module.dotNetRef) {
                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs', 'Rota haritası yüklenirken hata oluştu: ' + error.message);
                    }
                    return false;
                }
            },

            // Add this function to show a message when no steps are available
            showNoStepsMessage: function() {
                const mapElement = document.getElementById("route-map");
                if (!mapElement) return;

                mapElement.innerHTML = `
                    <div class="flex flex-col items-center justify-center h-full bg-gray-100 dark:bg-gray-800 p-4">
                        <i class="fas fa-exclamation-triangle text-3xl text-yellow-500 mb-3"></i>
                        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">Rota Adımları Bulunamadı</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400 text-center mt-2">
                            Bu rota için adımlar bulunamadı. Sayfayı yenileyip tekrar deneyebilirsiniz.
                        </p>
                        <button id="reload-route-btn" class="mt-4 px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors">
                            <i class="fas fa-sync-alt mr-2"></i> Rotayı Yenile
                        </button>
                    </div>
                `;

                // Add click handler to reload button
                const reloadBtn = document.getElementById("reload-route-btn");
                if (reloadBtn && module.dotNetRef) {
                    reloadBtn.addEventListener("click", () => {
                        module.dotNetRef.invokeMethodAsync('RefreshRouteDetails');
                    });
                }
            },

            // Initialize route simulation
            initializeSimulation: function(routeData) {
                if (!module.maps.detailMap || !routeData || !routeData.steps || routeData.steps.length === 0) {
                    return false;
                }

                try {
                    // Reset simulation notification flag
                    module.simulationNotificationSent = false;
                    // Reset notified steps array
                    module.alreadyNotifiedSteps = [];

                    const steps = routeData.steps;
                    const polyline = routeData.overviewPolyline;
                    const isDarkMode = document.documentElement.classList.contains('dark');

                    // Get path coordinates
                    let path;
                    if (polyline) {
                        try {
                            path = google.maps.geometry.encoding.decodePath(polyline);
                            // Validate path
                            if (!path || path.length === 0 || !path.every(point =>
                                point && typeof point.lat === 'function' && typeof point.lng === 'function' &&
                                isFinite(point.lat()) && isFinite(point.lng()))) {
                                console.warn("Invalid polyline path, will create from steps instead");
                                path = null;
                            }
                        } catch (error) {
                            console.error("Error decoding polyline for simulation:", error);
                            path = null;
                        }
                    }

                    // If no valid polyline path, create one from steps
                    if (!path || path.length === 0) {
                        path = [];
                        steps.forEach(step => {
                            if (step.latitude && step.longitude &&
                                isFinite(step.latitude) && isFinite(step.longitude)) {
                                path.push({ lat: step.latitude, lng: step.longitude });
                            }
                        });

                        // Add depot as first and last point if we have any valid steps
                        if (path.length > 0) {
                            path.unshift(DEFAULT_CENTER);
                            path.push(DEFAULT_CENTER);
                        } else {
                            // If no valid steps, just use the center
                            path = [DEFAULT_CENTER];
                            console.error("No valid steps with coordinates found for simulation");
                        }
                    }

                    // Create a truck icon for the vehicle
                    const truckIcon = {
                        url: this.getShippingIcon(isDarkMode),
                        scaledSize: new google.maps.Size(40, 40),
                        anchor: new google.maps.Point(20, 20)
                    };

                    // Create vehicle marker
                    module.simulationVehicleMarker = new google.maps.Marker({
                        position: path[0],
                        map: module.maps.detailMap,
                        icon: truckIcon,
                        title: 'Çöp Kamyonu',
                        zIndex: 1000
                    });

                    // Add traveledPath and remainingPath polylines
                    const traveledPath = new google.maps.Polyline({
                        path: [],
                        geodesic: true,
                        strokeColor: '#28a745',
                        strokeOpacity: 0.8,
                        strokeWeight: 5
                    });
                    traveledPath.setMap(module.maps.detailMap);

                    const remainingPath = new google.maps.Polyline({
                        path: path,
                        geodesic: true,
                        strokeColor: '#3B82F6',
                        strokeOpacity: 0.8,
                        strokeWeight: 5
                    });
                    remainingPath.setMap(module.maps.detailMap);

                    // Simulation variables
                    let simulationIndex = 0;
                    let simulationRunning = false;
                    let simulationComplete = false;
                    let simulationInterval = null;
                    let simulationSpeed = 1;
                    let lastStepNotif = -1;

                    // UI elements
                    const startButton = document.getElementById('start-simulation');
                    const pauseButton = document.getElementById('pause-simulation');
                    const stopButton = document.getElementById('stop-simulation');
                    const speedSlider = document.getElementById('speed-slider');
                    const speedValue = document.getElementById('speed-value');
                    const speedMin = document.getElementById('speed-min');
                    const speedMax = document.getElementById('speed-max');
                    const progressBar = document.getElementById('progress-bar');
                    const progressPercentage = document.getElementById('progress-percentage');
                    const remainingTime = document.getElementById('remaining-time');
                    const stepsTable = document.getElementById('route-steps-table');

                    // Slider event listeners
                    if (speedSlider) {
                        speedSlider.addEventListener('input', function() {
                            simulationSpeed = parseInt(this.value);
                            if (speedValue) {
                                speedValue.textContent = simulationSpeed + 'x';
                            }
                        });
                    }

                    if (speedMin) {
                        speedMin.addEventListener('click', function() {
                            if (speedSlider) {
                                speedSlider.value = 1;
                                simulationSpeed = 1;
                                if (speedValue) {
                                    speedValue.textContent = '1x';
                                }
                            }
                        });
                    }

                    if (speedMax) {
                        speedMax.addEventListener('click', function() {
                            if (speedSlider) {
                                speedSlider.value = 10;
                                simulationSpeed = 10;
                                if (speedValue) {
                                    speedValue.textContent = '10x';
                                }
                            }
                        });
                    }

                    // Total duration (minutes)
                    const totalDuration = routeData.estimatedDurationMin || steps.length * 5;

                    // Start simulation function
                    function startSimulation() {
                        if (simulationInterval) {
                            clearInterval(simulationInterval);
                        }

                        simulationInterval = setInterval(() => {
                            if (!simulationRunning) return;

                            if (simulationIndex >= path.length) {
                                // End of simulation
                                clearInterval(simulationInterval);
                                simulationRunning = false;
                                simulationComplete = true;

                                // Only show completion notification once
                                if (!module.simulationNotificationSent) {
                                    module.simulationNotificationSent = true;
                                    if (module.dotNetRef) {
                                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs', '🚚 Rota simülasyonu tamamlandı!');
                                    }
                                }
                                return;
                            }

                            // Get the current position
                            const pos = path[simulationIndex];

                            // Move vehicle
                            if (module.simulationVehicleMarker) {
                                module.simulationVehicleMarker.setPosition(pos);

                                // Calculate heading for vehicle rotation if we have previous position
                                if (simulationIndex > 0) {
                                    const prevPos = path[simulationIndex - 1];
                                    if (prevPos) {
                                        try {
                                            const heading = google.maps.geometry.spherical.computeHeading(
                                                new google.maps.LatLng(
                                                    typeof prevPos.lat === 'function' ? prevPos.lat() : prevPos.lat,
                                                    typeof prevPos.lng === 'function' ? prevPos.lng() : prevPos.lng
                                                ),
                                                new google.maps.LatLng(
                                                    typeof pos.lat === 'function' ? pos.lat() : pos.lat,
                                                    typeof pos.lng === 'function' ? pos.lng() : pos.lng
                                                )
                                            );

                                            // Update vehicle icon with rotation
                                            const icon = Object.assign({}, module.simulationVehicleMarker.getIcon());
                                            icon.rotation = heading;
                                            module.simulationVehicleMarker.setIcon(icon);
                                        } catch (e) {
                                            console.warn("Error computing heading:", e);
                                        }
                                    }
                                }
                            }

                            // Pan map to follow vehicle
                            module.maps.detailMap.panTo(pos);

                            // Update path visuals
                            traveledPath.setPath(path.slice(0, simulationIndex + 1));
                            remainingPath.setPath(path.slice(simulationIndex));

                            // Update progress indicators
                            if (progressBar && progressPercentage) {
                                const pct = Math.floor(simulationIndex / path.length * 100);
                                progressBar.style.width = pct + '%';
                                progressPercentage.textContent = pct + '%';
                            }

                            // Calculate remaining time
                            if (remainingTime) {
                                const rem = Math.ceil(totalDuration * (1 - simulationIndex / path.length));
                                remainingTime.textContent = rem + ' dk';
                            }

                            // Check if we're at a step - only recognize waypoints at specific intervals
                            // to avoid duplicate notifications
                            const stepIdx = Math.floor(simulationIndex / path.length * steps.length);
                            if (stepIdx !== lastStepNotif && stepIdx < steps.length) {
                                lastStepNotif = stepIdx;
                                if (stepsTable) {
                                    // Highlight current step in table
                                    const rows = stepsTable.querySelectorAll('tr');
                                    rows.forEach(row => row.classList.remove('bg-blue-50', 'dark:bg-blue-900/20'));

                                    // Find the row with the current step and highlight it
                                    const stepId = steps[stepIdx].id;
                                    const stepRow = stepsTable.querySelector(`tr[data-step-id="${stepId}"]`);
                                    if (stepRow) {
                                        stepRow.classList.add('bg-blue-50', 'dark:bg-blue-900/20');
                                        stepRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                    }

                                    // Show notification only if not already notified for this step
                                    if (module.dotNetRef && !module.alreadyNotifiedSteps.includes(stepIdx)) {
                                        module.alreadyNotifiedSteps.push(stepIdx);
                                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs',
                                            `📍 Durak ${stepIdx + 1}: ${steps[stepIdx].address}`);
                                    }
                                }
                            }

                            // Increment based on speed setting
                            simulationIndex += simulationSpeed;
                        }, 200); // Set to 200ms for smoother animation

                        simulationRunning = true;
                    }

                    // Event listeners for simulation controls
                    if (startButton) {
                        startButton.addEventListener('click', () => {
                            if (simulationComplete) {
                                // Restart simulation
                                simulationIndex = 0;
                                simulationComplete = false;
                                module.simulationNotificationSent = false; // Reset notification flag
                                traveledPath.setPath([]);
                                remainingPath.setPath(path);
                                module.alreadyNotifiedSteps = []; // Reset notified steps

                                // Reset progress indicators
                                if (progressBar && progressPercentage) {
                                    progressBar.style.width = '0%';
                                    progressPercentage.textContent = '0%';
                                }

                                if (remainingTime) {
                                    remainingTime.textContent = totalDuration + ' dk';
                                }

                                // Move vehicle to start
                                if (module.simulationVehicleMarker) {
                                    module.simulationVehicleMarker.setPosition(path[0]);
                                }

                                // Reset step highlighting
                                if (stepsTable) {
                                    const rows = stepsTable.querySelectorAll('tr');
                                    rows.forEach(row => row.classList.remove('bg-blue-50', 'dark:bg-blue-900/20'));
                                }

                                lastStepNotif = -1;
                            }
                            if (module.simulationVehicleMarker) {
                                module.maps.detailMap.setCenter(module.simulationVehicleMarker.getPosition());
                                module.maps.detailMap.setZoom(13);
                            }

                            simulationRunning = true;
                            startSimulation();
                        });
                    }

                    if (pauseButton) {
                        pauseButton.addEventListener('click', () => {
                            simulationRunning = false;
                        });
                    }

                    if (stopButton) {
                        stopButton.addEventListener('click', () => {
                            simulationRunning = false;
                            simulationIndex = 0;
                            simulationComplete = false;
                            module.simulationNotificationSent = false; // Reset notification flag
                            module.alreadyNotifiedSteps = []; // Reset notifications

                            // Reset vehicle position
                            if (module.simulationVehicleMarker) {
                                module.simulationVehicleMarker.setPosition(path[0]);
                            }

                            // Reset path visuals
                            traveledPath.setPath([]);
                            remainingPath.setPath(path);

                            // Reset progress indicators
                            if (progressBar && progressPercentage) {
                                progressBar.style.width = '0%';
                                progressPercentage.textContent = '0%';
                            }

                            if (remainingTime) {
                                remainingTime.textContent = totalDuration + ' dk';
                            }

                            // Reset step highlighting
                            if (stepsTable) {
                                const rows = stepsTable.querySelectorAll('tr');
                                rows.forEach(row => row.classList.remove('bg-blue-50', 'dark:bg-blue-900/20'));
                            }

                            lastStepNotif = -1;
                        });
                    }

                    return true;
                } catch (error) {
                    console.error("Error initializing simulation:", error);
                    return false;
                }
            },

            // Show all routes on main map
            showAllRoutes: function(routesJson, wasteBinsJson) {
                if (!module.maps.mainMap) {
                    console.error("Main map not initialized");
                    return false;
                }

                // Clear existing markers and polylines
                this.clearMarkers();
                this.clearPolylines();
                this.clearWasteBinMarkers();

                try {
                    const routes = JSON.parse(routesJson);
                    const wasteBins = wasteBinsJson ? JSON.parse(wasteBinsJson) : null;
                    const isDarkMode = document.documentElement.classList.contains('dark');

                    console.log(`Showing ${routes.length} routes on map`);

                    // First, show all waste bins on the map with smaller icons
                    if (wasteBins && wasteBins.length > 0) {
                        this.showWasteBins(wasteBins);
                    }

                    // Create bounds to fit all markers
                    const bounds = new google.maps.LatLngBounds();

                    // Add the depot to bounds
                    bounds.extend(DEFAULT_CENTER);

                    // Show each route with different colors
                    const colors = ['#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8E24AA', '#16A085', '#E67E22', '#E74C3C', '#2980B9', '#27AE60'];

                    // Check if google.maps.geometry exists before trying to use it
                    if (!google.maps.geometry) {
                        console.error("Google Maps Geometry library not loaded");
                        if (module.dotNetRef) {
                            module.dotNetRef.invokeMethodAsync('ShowToastFromJs', 'Harita bileşenleri yüklenemedi. Sayfa yenilendikten sonra tekrar deneyin.');
                        }
                        return false;
                    }

                    routes.forEach((route, routeIndex) => {
                        // FIX 1: Check for both Status and status properties, and also numeric values (0, 1, 2)
                        if (route.status === 'Completed' || route.Status === 'Completed' ||
                            route.status === 2 || route.Status === 2) return;

                        // Skip routes with no steps
                        if (!route.steps || route.steps.length === 0) return;

                        const color = colors[routeIndex % colors.length];

                        // Create a path for the route
                        let path = null;

                        // Try to use overview polyline if available
                        if (route.overviewPolyline) {
                            try {
                                path = google.maps.geometry.encoding.decodePath(route.overviewPolyline);

                                // Validate the path has points
                                if (!path || path.length === 0) {
                                    console.error("Decoded polyline has no points:", route.overviewPolyline);
                                    path = null;
                                }
                            } catch (error) {
                                console.error("Error decoding polyline:", error, route.overviewPolyline);
                                path = null;
                            }
                        }

                        if (!path || path.length === 0) {
                            // Create path from steps if no valid polyline
                            console.log("Creating path from steps for route:", route.id);

                            if (route.steps && route.steps.length > 0) {
                                path = route.steps.filter(step =>
                                    step.latitude && step.longitude &&
                                    isFinite(step.latitude) && isFinite(step.longitude)
                                ).map(step => ({
                                    lat: step.latitude,
                                    lng: step.longitude
                                }));

                                // Add depot as first and last point
                                if (path.length > 0) {
                                    path.unshift(DEFAULT_CENTER);
                                    path.push(DEFAULT_CENTER);
                                } else {
                                    path = [DEFAULT_CENTER]; // Fallback if no valid steps
                                }
                            } else {
                                console.error("Route has no valid steps or polyline:", route.id);
                                return; // Skip this route
                            }
                        }

                        // Create polyline for route
                        try {
                            const routePolyline = new google.maps.Polyline({
                                path: path,
                                geodesic: true,
                                strokeColor: color,
                                strokeOpacity: 0.7,
                                strokeWeight: 4
                            });
                            routePolyline.setMap(module.maps.mainMap);
                            module.routePolylines.push(routePolyline);

                            // Create markers for vehicle position (at start point)
                            if (path && path.length > 0) {
                                const vehicleMarker = new google.maps.Marker({
                                    position: path[0],
                                    map: module.maps.mainMap,
                                    icon: {
                                        url: this.getShippingIcon(isDarkMode),
                                        scaledSize: new google.maps.Size(32, 32),
                                        anchor: new google.maps.Point(16, 16)
                                    },
                                    title: `Route ${route.id} - ${route.wasteType}`,
                                    routeId: route.id
                                });
                                module.truckMarkers.push(vehicleMarker);

                                // Add click listener with async function to handle the Promise
                                vehicleMarker.addListener('click', async () => {
                                    if (module.currentInfoWindow) {
                                        module.currentInfoWindow.close();
                                    }

                                    try {
                                        // Get driver and vehicle info with await
                                        const driverName = await this.getDriverName(route.driverId);
                                        const vehiclePlate = await this.getVehiclePlate(route.vehicleId);

                                        // Create info window with resolved values
                                        const infoWindow = new google.maps.InfoWindow({
                                            content: `
                                                <div style="padding: 12px; max-width: 280px; font-family: Arial, sans-serif;">
                                                    <div style="font-weight: bold; font-size: 16px; margin-bottom: 10px; color: ${color}; border-bottom: 1px solid #eee; padding-bottom: 5px;">
                                                        Rota Bilgisi
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-user-hard-hat" style="color: #3B82F6; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Sürücü:</span>
                                                        <span style="font-weight: 500;">${driverName || 'Atanmamış'}</span>
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-truck" style="color: #10B981; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Araç:</span>
                                                        <span style="font-weight: 500;">${vehiclePlate || 'Atanmamış'}</span>
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-trash-alt" style="color: #F59E0B; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Atık Tipi:</span>
                                                        <span style="font-weight: 500;">${route.wasteType || 'Belirtilmemiş'}</span>
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-calendar" style="color: #6366F1; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Başlangıç:</span>
                                                        <span style="font-weight: 500;">${new Date(route.startTime).toLocaleString('tr-TR')}</span>
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-road" style="color: #8B5CF6; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Mesafe:</span>
                                                        <span style="font-weight: 500;">${route.totalDistanceKm.toFixed(1)} km</span>
                                                    </div>
                                                    <div style="display: flex; margin-bottom: 6px; align-items: center;">
                                                        <i class="fas fa-info-circle" style="color: #EC4899; min-width: 20px; margin-right: 5px;"></i>
                                                        <span style="min-width: 70px; color: #666;">Durum:</span>
                                                        <span style="font-weight: 500; color: ${this.getStatusColor(route.status)}">${this.getStatusText(route.status)}</span>
                                                    </div>
                                                    <div style="margin-top: 12px; text-align: center;">
                                                        <button onclick="window.ecoRouteMapModule.googleMapsInterop.focusRouteOnMap('${route.id}')"
                                                            style="background-color: #3B82F6; color: white; padding: 6px 12px; border-radius: 4px; border: none; cursor: pointer; font-size: 13px; display: inline-flex; align-items: center; justify-content: center;">
                                                            <i class="fas fa-info-circle" style="margin-right: 5px;"></i> Detayları Göster
                                                        </button>
                                                    </div>
                                                </div>
                                            `
                                        });

                                        infoWindow.open(module.maps.mainMap, vehicleMarker);
                                        module.currentInfoWindow = infoWindow;

                                        // Notify Blazor
                                        if (module.dotNetRef) {
                                            module.dotNetRef.invokeMethodAsync('FocusRouteOnMap', route.id);
                                        }
                                    } catch (error) {
                                        console.error("Error creating info window:", error);
                                        // Fallback info window if the async calls fail
                                        const fallbackInfoWindow = new google.maps.InfoWindow({
                                            content: `
                                                <div style="padding: 10px; max-width: 250px;">
                                                    <div style="font-weight: bold; margin-bottom: 5px;">Rota Bilgisi</div>
                                                    <div>Atık Tipi: ${route.wasteType || 'Belirtilmemiş'}</div>
                                                    <div>Başlangıç: ${new Date(route.startTime).toLocaleString('tr-TR')}</div>
                                                    <div>Durum: ${this.getStatusText(route.status)}</div>
                                                    <div style="margin-top: 8px;">
                                                        <button onclick="window.ecoRouteMapModule.googleMapsInterop.focusRouteOnMap('${route.id}')"
                                                            style="background-color: #3B82F6; color: white; padding: 6px 12px; border-radius: 4px; border: none; cursor: pointer; font-size: 13px;">
                                                            Detayları Göster
                                                        </button>
                                                    </div>
                                                </div>
                                            `
                                        });
                                        fallbackInfoWindow.open(module.maps.mainMap, vehicleMarker);
                                        module.currentInfoWindow = fallbackInfoWindow;
                                    }
                                });
                            }

                            // Extend bounds to include all steps
                            path.forEach(point => {
                                if (point && point.lat && point.lng &&
                                    isFinite(point.lat) && isFinite(point.lng)) {
                                    bounds.extend(point);
                                }
                            });
                        } catch (error) {
                            console.error("Error creating polyline for route:", route.id, error);
                        }
                    });

                    // Add depot marker if not already present
                    const depotMarker = new google.maps.Marker({
                        position: DEFAULT_CENTER,
                        map: module.maps.mainMap,
                        icon: {
                            url: this.getWarehouseIcon(isDarkMode),
                            scaledSize: new google.maps.Size(40, 40),
                            anchor: new google.maps.Point(20, 20)
                        },
                        title: 'Çorlu Belediyesi (Araç Deposu)',
                        zIndex: 1000
                    });
                    module.markers.push(depotMarker);

                    // Fit bounds if there's at least one marker
                    if (bounds.isEmpty()) {
                        module.maps.mainMap.setCenter(DEFAULT_CENTER);
                        module.maps.mainMap.setZoom(DEFAULT_ZOOM);
                    } else {
                        module.maps.mainMap.fitBounds(bounds);
                        google.maps.event.addListenerOnce(module.maps.mainMap, 'bounds_changed', function() {
                            if (module.maps.mainMap.getZoom() > 15) {
                                module.maps.mainMap.setZoom(15);
                            }
                        });
                    }

                    return true;

                } catch (error) {
                    console.error("Error showing routes on map:", error);
                    if (module.dotNetRef) {
                        module.dotNetRef.invokeMethodAsync('ShowToastFromJs', 'Rotalar haritada gösterilemedi: ' + error.message);
                    }
                    return false;
                }
            },

            // Show waste bins on the map
            showWasteBins: function(wasteBins) {
                if (!module.maps.mainMap || !wasteBins || wasteBins.length === 0) return false;

                console.log(`Showing ${wasteBins.length} bins on map`);
                const isDarkMode = document.documentElement.classList.contains('dark');

                // Önce tüm marker'ları oluştur
                const markers = [];

                wasteBins.forEach(bin => {
                    if (bin.latitude && bin.longitude &&
                        isFinite(bin.latitude) && isFinite(bin.longitude)) {
                        const position = { lat: bin.latitude, lng: bin.longitude };

                        // Create marker
                        const marker = new google.maps.Marker({
                            position: position,
                            icon: {
                                url: this.getDeleteIcon(false, bin.fillLevel, isDarkMode),
                                scaledSize: new google.maps.Size(32, 32),
                                anchor: new google.maps.Point(16, 32)
                            },
                            title: `${bin.label} - ${bin.fillLevel || 0}% dolu`,
                            opacity: 0.9
                        });

                        // Add info window
                        const infoWindow = new google.maps.InfoWindow({
                            content: `
                                <div style="padding: 10px; max-width: 250px;">
                                    <div style="font-weight: bold; margin-bottom: 5px;">${bin.label}</div>
                                    <div>${bin.address}</div>
                                    <div style="margin-top: 5px;">Doluluk: ${bin.fillLevel || 0}%</div>
                                    <div style="margin-top: 5px; font-weight: bold; color: ${this.getFillLevelColor(bin.fillLevel)};">
                                        ${this.getFillLevelText(bin.fillLevel)}
                                    </div>
                                </div>
                            `
                        });

                        // Add click listener
                        marker.addListener('click', () => {
                            if (module.currentInfoWindow) {
                                module.currentInfoWindow.close();
                            }
                            infoWindow.open(module.maps.mainMap, marker);
                            module.currentInfoWindow = infoWindow;
                        });

                        markers.push(marker);
                        module.wasteBinMarkers.push(marker);
                    }
                });

                // Create marker clusterer with custom styles
                try {
                    // First clear any existing clusterer
                    if (markerClusterer) {
                        markerClusterer.clearMarkers();
                        markerClusterer = null;
                    }

                    if (markers.length > 0) {
                        // Define cluster styles using recycling green color
                        const clusterStyles = [
                            {
                                textColor: 'white',
                                url: 'data:image/svg+xml;base64,' + btoa(`
                                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">
                                        <circle cx="20" cy="20" r="18" fill="${RECYCLING_GREEN}" opacity="0.8" stroke="white" stroke-width="2" />
                                    </svg>
                                `),
                                height: 40,
                                width: 40
                            },
                            {
                                textColor: 'white',
                                url: 'data:image/svg+xml;base64,' + btoa(`
                                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50 50">
                                        <circle cx="25" cy="25" r="23" fill="${RECYCLING_GREEN}" opacity="0.8" stroke="white" stroke-width="2" />
                                    </svg>
                                `),
                                height: 50,
                                width: 50
                            },
                            {
                                textColor: 'white',
                                url: 'data:image/svg+xml;base64,' + btoa(`
                                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60">
                                        <circle cx="30" cy="30" r="28" fill="${RECYCLING_GREEN}" opacity="0.8" stroke="white" stroke-width="2" />
                                    </svg>
                                `),
                                height: 60,
                                width: 60
                            }
                        ];

                        // Try multiple approaches to find the MarkerClusterer
                        if (window.markerClusterer) {
                            console.log("Using window.markerClusterer");
                            markerClusterer = new window.markerClusterer.MarkerClusterer({
                                map: module.maps.mainMap,
                                markers: markers,
                                styles: clusterStyles
                            });
                        }
                        else if (typeof MarkerClusterer === 'function') {
                            console.log("Using global MarkerClusterer constructor");
                            markerClusterer = new MarkerClusterer(module.maps.mainMap, markers, {
                                styles: clusterStyles
                            });
                        }
                        else {
                            console.warn("MarkerClusterer library not found, displaying individual markers");
                            markers.forEach(marker => marker.setMap(module.maps.mainMap));
                        }
                    }
                } catch (error) {
                    console.warn("Error creating marker clusterer:", error);
                    markers.forEach(marker => marker.setMap(module.maps.mainMap));
                }
                return true;
            },

            // Focus on a specific route on the map
            focusRouteOnMap: function(routeId) {
                try {
                    // Find the route marker
                    const marker = module.truckMarkers.find(m => m.routeId === routeId);

                    if (marker) {
                        // Center map on the marker
                        module.maps.mainMap.setCenter(marker.getPosition());
                        module.maps.mainMap.setZoom(FOCUS_ZOOM);

                        // Trigger click to show info window
                        google.maps.event.trigger(marker, 'click');

                        // Add bounce animation to the marker
                        marker.setAnimation(google.maps.Animation.BOUNCE);
                        setTimeout(() => {
                            marker.setAnimation(null);
                        }, 1500);
                        return true;
                    }
                    return false;
                } catch (error) {
                    console.error("Error focusing route on map:", error);
                    return false;
                }
            },

            // Clear all markers from the map
            clearMarkers: function() {
                module.markers.forEach(marker => marker.setMap(null));
                module.markers = [];

                module.truckMarkers.forEach(marker => marker.setMap(null));
                module.truckMarkers = [];
            },

            // Clear all polylines from the map
            clearPolylines: function() {
                module.routePolylines.forEach(polyline => polyline.setMap(null));
                module.routePolylines = [];
            },

            // Clear waste bin markers
            clearWasteBinMarkers: function() {
                if (markerClusterer) {
                    markerClusterer.clearMarkers();
                    markerClusterer = null;
                }

                module.wasteBinMarkers.forEach(marker => marker.setMap(null));
                module.wasteBinMarkers = [];
            },

            // Get status color
            getStatusColor: function(status) {
                switch (status) {
                    case 'Scheduled': return '#3B82F6';
                    case 'Active': return '#10B981';
                    case 'Completed': return '#6B7280';
                    default: return '#6B7280';
                }
            },

            // Get status text
            getStatusText: function(status) {
                switch (status) {
                    case 'Scheduled': return 'Planlanmış';
                    case 'Active': return 'Aktif';
                    case 'Completed': return 'Tamamlanmış';
                    default: return status;
                }
            },

            // Get fill level color
            getFillLevelColor: function(fillLevel) {
                if (!fillLevel) return '#6B7280';

                if (fillLevel >= 90) return '#EF4444';
                if (fillLevel >= 70) return '#F97316';
                if (fillLevel >= 50) return '#F59E0B';
                return '#10B981';
            },

            // Get fill level text
            getFillLevelText: function(fillLevel) {
                if (!fillLevel) return 'Durum Bilinmiyor';

                if (fillLevel >= 90) return 'Acil Boşaltılmalı';
                if (fillLevel >= 70) return 'Yakında Boşaltılmalı';
                if (fillLevel >= 50) return 'Orta Doluluk';
                return 'Boşaltma Gerekmiyor';
            },

            // Get driver name
            getDriverName: function(driverId) {
                // This will be provided through Blazor interop
                if (module.dotNetRef) {
                    return module.dotNetRef.invokeMethodAsync('GetDriverNameFromJs', driverId);
                }
                return 'Bilinmeyen Sürücü';
            },

            // Get vehicle plate
            getVehiclePlate: function(vehicleId) {
                // This will be provided through Blazor interop
                if (module.dotNetRef) {
                    return module.dotNetRef.invokeMethodAsync('GetVehiclePlateFromJs', vehicleId);
                }
                return 'Bilinmeyen Araç';
            },

            // Reset map state and clean up
            resetMapState: function() {
                console.log("Resetting map state");

                // Close any open info windows
                if (module.currentInfoWindow) {
                    module.currentInfoWindow.close();
                    module.currentInfoWindow = null;
                }

                // Clear simulation marker
                if (module.simulationVehicleMarker) {
                    module.simulationVehicleMarker.setMap(null);
                    module.simulationVehicleMarker = null;
                }

                // Try to clean up maps
                try {
                    if (module.maps.detailMap) {
                        module.maps.detailMap = null;
                    }
                } catch (e) {
                    console.error("Error clearing detail map:", e);
                }
            },

            // Dispose resources
            disposeResources: function() {
                // Close any open info windows
                if (module.currentInfoWindow) {
                    module.currentInfoWindow.close();
                    module.currentInfoWindow = null;
                }

                // Clear all maps
                this.clearMarkers();
                this.clearPolylines();
                this.clearWasteBinMarkers();

                // Clear references
                module.maps = {};
                module.markers = [];
                module.routePolylines = [];
                module.truckMarkers = [];
                module.wasteBinMarkers = [];
                module.simulationVehicleMarker = null;

                // Remove dotNetRef
                if (module.dotNetRef) {
                    module.dotNetRef = null;
                }

                console.log("All map resources disposed");
            }
        };
    })(window.ecoRouteMapModule);

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Don't process shortcuts if inside input or textarea
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

        // ESC to close open modals
        if (e.key === 'Escape') {
            const dotNetRef = window.ecoRouteMapModule.dotNetRef;
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('CloseModal');
                dotNetRef.invokeMethodAsync('CloseCreateModal');
            }
        }

        // R to refresh data
        if (e.key === 'r' || e.key === 'R') {
            const dotNetRef = window.ecoRouteMapModule.dotNetRef;
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('RefreshData');
            }
        }

        // F to toggle filter panel
        if (e.key === 'f' || e.key === 'F') {
            const filterPanel = document.querySelector('.filter-section');
            if (filterPanel) {
                filterPanel.classList.toggle('hidden');
            }
        }

        // N to create new route
        if (e.key === 'n' || e.key === 'N') {
            const dotNetRef = window.ecoRouteMapModule.dotNetRef;
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('OpenCreateModal');
            }
        }
    });

    // Add help button to show keyboard shortcuts
    document.addEventListener('DOMContentLoaded', function() {
        console.log("Page loaded, resetting map state");

        // Reset global variables when page first loads
        window.ecoRouteMapModule.maps = {};
        window.ecoRouteMapModule.markers = [];
        window.ecoRouteMapModule.routePolylines = [];
        window.ecoRouteMapModule.truckMarkers = [];
        window.ecoRouteMapModule.wasteBinMarkers = [];
        window.ecoRouteMapModule.currentInfoWindow = null;
        window.ecoRouteMapModule.simulationVehicleMarker = null;

        // Add keyboard help button
        const keyboardHelpButton = document.createElement('button');
        keyboardHelpButton.className = 'fixed bottom-4 right-4 bg-gray-800 text-white p-2 rounded-full shadow-lg z-50';
        keyboardHelpButton.innerHTML = '<i class="fas fa-keyboard"></i>';
        keyboardHelpButton.title = 'Klavye Kısayolları';
        keyboardHelpButton.onclick = function() {
            alert('Klavye Kısayolları:\n\nR: Verileri Yenile\nEsc: Modalları Kapat\nF: Filtre Panelini Aç/Kapat\nN: Yeni Rota Oluştur');
        };
        document.body.appendChild(keyboardHelpButton);

        // Add theme change detection
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'class' && 
                    mutation.target === document.documentElement && 
                    window.ecoRouteMapModule.maps.mainMap) {
                    // Theme change detected, refresh depot icons
                    const isDarkMode = document.documentElement.classList.contains('dark');
                    window.ecoRouteMapModule.markers.forEach(marker => {
                        if (marker.getTitle()?.includes('Belediyesi')) {
                            marker.setIcon({
                                url: window.ecoRouteMapModule.googleMapsInterop.getWarehouseIcon(isDarkMode),
                                scaledSize: new google.maps.Size(40, 40),
                                anchor: new google.maps.Point(20, 20)
                            });
                        }
                    });
                    
                    // Update truck markers
                    window.ecoRouteMapModule.truckMarkers.forEach(marker => {
                        marker.setIcon({
                            url: window.ecoRouteMapModule.googleMapsInterop.getShippingIcon(isDarkMode),
                            scaledSize: new google.maps.Size(32, 32),
                            anchor: new google.maps.Point(16, 16)
                        });
                    });
                }
            });
        });

        observer.observe(document.documentElement, { attributes: true });

        // Log when DOM is loaded for debugging
        console.log("DOM fully loaded");
    });

    // Helper function to scroll to route map
    window.scrollToRouteMap = function() {
        setTimeout(() => {
            const mapElement = document.getElementById('route-map');
            if (mapElement) {
                mapElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }, 300); // Small delay to allow map to load
    };
</script>
@code {
    // Data
    private List<RouteResultDto> routes;
    private List<RouteResultDto> filteredRoutes = new List<RouteResultDto>();
    private List<RouteResultDto> displayedRoutes => GetDisplayedRoutes();
    private List<ResultVehicleDto> vehicles;
    private List<ResultUserDto> drivers;
    private List<ResultUserDto> availableDrivers => GetAvailableDrivers(); // New property for available drivers
    private List<ResultVehicleDto> availableVehicles => GetAvailableVehicles(); // New property for available vehicles
    private List<ResultWasteBinDto> wasteBins;
    private List<ResultWasteBinDto> filteredBins = new List<ResultWasteBinDto>();

    // Selected items
    private RouteResultDto selectedRoute;
    private CreateRouteDto newRoute = new CreateRouteDto();

    // UI state flags
    private bool isModalOpen = false;
    private bool showCreateModal = false;
    private bool mainMapInitialized = false;
    private Guid expandedRouteId;
    private DotNetObjectReference<RoutesManager> _objectReference;
    private CancellationTokenSource _debounceTokenSource = new CancellationTokenSource();

    // Filters
    private string driverFilter = "";
    private RouteStatus? statusFilter;
    private DateTime? startDateFilter;
    private DateTime? endDateFilter;
    private string searchText = "";
    private string binSearchText = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => filteredRoutes == null ? 0 : (int)Math.Ceiling(filteredRoutes.Count / (double)pageSize);
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    // Sorting
    private string sortField = "StartTime";
    private bool sortAscending = false;

    // Fixed start/end point (Çorlu Belediyesi)
    private double fixedStartLat = 41.1634;
    private double fixedStartLng = 27.7951;

    private static readonly JsonSerializerOptions camelCase =
    new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

    // New methods to filter out drivers and vehicles that are already assigned to active routes
    private List<ResultUserDto> GetAvailableDrivers()
    {
        if (drivers == null || routes == null)
            return new List<ResultUserDto>();

        // Get IDs of drivers with active routes (not completed)
        var busyDriverIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.DriverId)
            .ToHashSet();

        // Return only drivers who are not busy
        return drivers.Where(d => !busyDriverIds.Contains(d.Id)).ToList();
    }

    private List<ResultVehicleDto> GetAvailableVehicles()
    {
        if (vehicles == null || routes == null)
            return new List<ResultVehicleDto>();

        // Get IDs of vehicles with active routes (not completed)
        var busyVehicleIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.VehicleId)
            .ToHashSet();

        // Return only vehicles that are not busy
        return vehicles.Where(v => !busyVehicleIds.Contains(v.Id.ToString())).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _objectReference = DotNetObjectReference.Create(this);

            await LoadData();
            await LoadDrivers();
            await LoadVehicles();
            await LoadWasteBins();

            // Filtreleme işlemlerinden önce null kontrolü
            if (routes == null)
                routes = new List<RouteResultDto>();

            if (filteredRoutes == null)
                filteredRoutes = new List<RouteResultDto>();

            // Set default values for new route
            // Using current time + 1 hour instead of fixed 8:00 AM
            newRoute.ScheduledStart = DateTime.Now.AddHours(1);
            newRoute.StartLatitude = fixedStartLat;
            newRoute.StartLongitude = fixedStartLng;
            newRoute.EndLatitude = fixedStartLat;
            newRoute.EndLongitude = fixedStartLng;
            newRoute.WasteBinIds = new List<Guid>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            toastService.ShowError("Sayfa yüklenirken bir hata oluştu");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await CleanupResources();
        _objectReference?.Dispose();
    }

    private async Task CleanupResources()
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
            await JS.InvokeVoidAsync("googleMapsInterop.disposeResources");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Cleanup error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await Task.Delay(500);

                await JS.InvokeVoidAsync("initializeGoogleMaps", DotNetObjectReference.Create(this));

                // Only initialize main map if data is loaded
                if (routes != null && filteredRoutes != null)
                {
                    await InitializeMainMap();
                }
            }
            else if (!mainMapInitialized && routes != null && filteredRoutes != null)
            {
                // Try to initialize map when data becomes available in subsequent renders
                await InitializeMainMap();
            }

            // Handle detail map initialization for route details
            if (isModalOpen && selectedRoute != null)
            {
                await InitializeDetailMap();
            }

            // Handle start point map initialization for create route modal
            if (showCreateModal)
            {
                await JS.InvokeVoidAsync("googleMapsInterop.initializeStartPointMap");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            toastService.ShowError("Harita yüklenirken bir hata oluştu: " + ex.Message);
        }
    }

    private async Task InitializeMainMap()
    {
        try
        {
            // The JS function now returns a boolean indicating success or failure
            var result = await JS.InvokeAsync<bool>("googleMapsInterop.initializeMainMap");

            if (result)
            {
                mainMapInitialized = true;
                // Only show routes if initialization succeeded
                await ShowAllRoutesOnMap();
            }
            else
            {
                // JS function already showed a toast, but we can handle it here as well
                mainMapInitialized = false;
                Console.Error.WriteLine("Map initialization failed");
            }
        }
        catch (Exception ex)
        {
            mainMapInitialized = false;
            Console.Error.WriteLine($"Error initializing main map: {ex.Message}");
            toastService.ShowError("Harita yüklenirken bir hata oluştu");
        }
    }

    private async Task InitializeDetailMap()
    {
        if (selectedRoute != null)
        {
            try
            {
                Console.WriteLine($"Initializing detail map for route {selectedRoute.Id} with {selectedRoute.Steps?.Count ?? 0} steps");

                var routeJson = JsonSerializer.Serialize(selectedRoute, camelCase);
                await JS.InvokeVoidAsync("googleMapsInterop.initializeDetailMap", routeJson);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error initializing detail map: {ex.Message}");
                toastService.ShowError("Detay haritası yüklenirken bir hata oluştu");
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            routes = await RouteService.GetAllRoutesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading routes: {ex.Message}");
            toastService.ShowError("Rotalar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadDrivers()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var allUsers = await UserService.GetAllUsersAsync();
                drivers = allUsers.Where(u => u.Roles.Contains("Driver")).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading drivers: {ex.Message}");
            toastService.ShowError("Sürücüler yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadVehicles()
    {
        try
        {
            vehicles = await VehicleService.GetAllVehiclesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading vehicles: {ex.Message}");
            toastService.ShowError("Araçlar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadWasteBins()
    {
        try
        {
            wasteBins = await WasteBinService.GetAllWasteBinsAsync();
            filteredBins = wasteBins.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading waste bins: {ex.Message}");
            toastService.ShowError("Atık kutuları yüklenirken bir hata oluştu");
        }
    }

    private List<RouteResultDto> GetDisplayedRoutes()
    {
        if (filteredRoutes == null) return new List<RouteResultDto>();

        return filteredRoutes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ApplyFilters()
    {
        if (routes == null)
        {
            filteredRoutes = new List<RouteResultDto>();
            return;
        }

        var query = routes.AsEnumerable();

        // Apply driver filter
        if (!string.IsNullOrEmpty(driverFilter))
        {
            query = query.Where(r => r.DriverId == driverFilter);
        }

        // Apply status filter
        if (statusFilter.HasValue)
        {
            query = query.Where(r => r.Status == statusFilter);
        }

        // Apply date range filter
        if (startDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date >= startDateFilter.Value.Date);
        }

        if (endDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date <= endDateFilter.Value.Date);
        }

        // Apply search text
        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            query = query.Where(r =>
                (GetDriverName(r.DriverId)?.ToLower().Contains(search) == true) ||
                (GetVehiclePlate(r.VehicleId)?.ToLower().Contains(search) == true) ||
                (r.WasteType?.ToLower().Contains(search) == true));
        }

        // Apply sorting
        query = ApplySorting(query);

        filteredRoutes = query.ToList();

        // Reset pagination if needed
        if (currentPage > 1 && (currentPage - 1) * pageSize >= filteredRoutes.Count)
        {
            currentPage = 1;
        }
    }

    private async Task ApplyFiltersWithDebounce()
    {
        try
        {
            // Önceki debounce işlemini iptal et
            _debounceTokenSource.Cancel();
            _debounceTokenSource = new CancellationTokenSource();

            // 250ms bekle
            await Task.Delay(250, _debounceTokenSource.Token);

            // Filtreleme işlemini yap
            ApplyFilters();

            // UI'ı güncelle
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Debounce tarafından iptal edildi, normal durum
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private IEnumerable<RouteResultDto> ApplySorting(IEnumerable<RouteResultDto> query)
    {
        switch (sortField)
        {
            case "StartTime":
                return sortAscending ? query.OrderBy(r => r.StartTime) : query.OrderByDescending(r => r.StartTime);
            case "Driver":
                return sortAscending ? query.OrderBy(r => GetDriverName(r.DriverId)) : query.OrderByDescending(r => GetDriverName(r.DriverId));
            case "Vehicle":
                return sortAscending ? query.OrderBy(r => GetVehiclePlate(r.VehicleId)) : query.OrderByDescending(r => GetVehiclePlate(r.VehicleId));
            case "Status":
                return sortAscending ? query.OrderBy(r => r.Status) : query.OrderByDescending(r => r.Status);
            case "Distance":
                return sortAscending ? query.OrderBy(r => r.TotalDistanceKm) : query.OrderByDescending(r => r.TotalDistanceKm);
            case "Duration":
                return sortAscending ? query.OrderBy(r => r.EstimatedDurationMin) : query.OrderByDescending(r => r.EstimatedDurationMin);
            default:
                return query;
        }
    }

    private void FilterBins()
    {
        if (wasteBins == null)
        {
            filteredBins = new List<ResultWasteBinDto>();
            return;
        }

        var query = wasteBins.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(binSearchText))
        {
            var search = binSearchText.ToLower();
            query = query.Where(b =>
                (b.Label?.ToLower().Contains(search) == true) ||
                (b.Address?.ToLower().Contains(search) == true));
        }

        filteredBins = query.ToList();
    }

    private async Task FilterBinsWithDebounce()
    {
        try
        {
            // Önceki debounce işlemini iptal et
            _debounceTokenSource.Cancel();
            _debounceTokenSource = new CancellationTokenSource();

            // 250ms bekle
            await Task.Delay(250, _debounceTokenSource.Token);

            // Filtreleme işlemini yap
            FilterBins();

            // UI'ı güncelle
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Debounce tarafından iptal edildi, normal durum
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private async Task ShowAllRoutesOnMap()
    {
        if (routes == null || !routes.Any())
        {
            await LoadData();
        }

        if (routes != null && routes.Any())
        {
            try
            {
                // Convert route data to JSON
                var routesJson = JsonSerializer.Serialize(routes, camelCase);

                // Get waste bins for the map
                var wasteBinsJson = "";
                if (wasteBins != null && wasteBins.Any())
                {
                    wasteBinsJson = JsonSerializer.Serialize(wasteBins, camelCase);
                }

                // Show routes on the map
                await JS.InvokeVoidAsync("googleMapsInterop.showAllRoutes", routesJson, wasteBinsJson);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error showing routes on map: {ex}");
                toastService.ShowError("Rotalar haritada gösterilemedi");
            }
        }
    }

    private void SortTable(string field)
    {
        // Close expanded row before sorting
        expandedRouteId = Guid.Empty;

        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        expandedRouteId = Guid.Empty; // Close expanded row when changing page
    }

    private async Task ClearFilters()
    {
        driverFilter = "";
        statusFilter = null;
        startDateFilter = null;
        endDateFilter = null;
        searchText = "";

        ApplyFilters();
        await ShowAllRoutesOnMap();
    }

    private void ToggleExpand(Guid routeId)
    {
        if (expandedRouteId == routeId)
        {
            expandedRouteId = Guid.Empty;
        }
        else
        {
            expandedRouteId = routeId;
        }
    }

    private async Task ShowDetails(RouteResultDto route)
    {
        Console.WriteLine($"ShowDetails called for route {route.Id} with {route.Steps?.Count ?? 0} steps");

        // Check if the route has steps
        if (route.Steps == null || !route.Steps.Any())
        {
            Console.Error.WriteLine($"Warning: Route {route.Id} has no steps!");

            // Try to reload the route directly from the API
            try
            {
                var refreshedRoute = await RouteService.GetRouteByIdAsync(route.Id);
                if (refreshedRoute?.Steps != null && refreshedRoute.Steps.Any())
                {
                    route = refreshedRoute;
                    Console.WriteLine($"Successfully refreshed route with {route.Steps.Count} steps");
                }
                else
                {
                    toastService.ShowWarning("Rota detayları görüntülenemiyor: Adım bilgisi eksik.");
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing route details: {ex.Message}");
                toastService.ShowWarning("Rota detayları yüklenirken hata oluştu.");
            }
        }

        selectedRoute = route;
        isModalOpen = true;
        StateHasChanged();

        await Task.Delay(100);

        // Initialize detail map only if we have steps
        if (route.Steps != null && route.Steps.Any())
        {
            await InitializeDetailMap();
            await JS.InvokeVoidAsync("scrollToRouteMap");
        }
        else
        {
            // Show empty map with just the depot if no steps
            var emptyRoute = new RouteResultDto
                {
                    Id = route.Id,
                    DriverId = route.DriverId,
                    VehicleId = route.VehicleId,
                    WasteType = route.WasteType,
                    Steps = new List<RouteStepDto>()
                };

            var routeJson = JsonSerializer.Serialize(emptyRoute, camelCase);
            await JS.InvokeVoidAsync("googleMapsInterop.initializeDetailMap", routeJson);

            // Show a message in the map area
            await JS.InvokeVoidAsync("googleMapsInterop.showNoStepsMessage");
        }
    }

    private void ToggleBin(Guid binId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!newRoute.WasteBinIds.Contains(binId))
            {
                newRoute.WasteBinIds.Add(binId);
            }
        }
        else
        {
            newRoute.WasteBinIds.Remove(binId);
        }
    }

    private async Task CreateRoute()
    {
        if (newRoute.WasteBinIds.Count == 0)
        {
            toastService.ShowWarning("En az bir atık kutusu seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.DriverId))
        {
            toastService.ShowWarning("Bir sürücü seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.VehicleId))
        {
            toastService.ShowWarning("Bir araç seçmelisiniz");
            return;
        }

        try
        {
            // Convert to API model
            var apiRoute = new ApiCreateRouteDto
                {
                    DriverId = newRoute.DriverId.ToString(),
                    VehicleId = newRoute.VehicleId.ToString(),
                    WasteType = newRoute.WasteType,
                    OptimizationType = newRoute.OptimizationType,
                    StartTime = newRoute.ScheduledStart,
                    WasteBinIds = newRoute.WasteBinIds,
                    Notes = newRoute.Notes
                };

            var success = await RouteService.CreateRouteAsync(apiRoute);

            if (success)
            {
                toastService.ShowSuccess("Rota başarıyla oluşturuldu");
                showCreateModal = false;
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                toastService.ShowError("Rota oluşturulurken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating route: {ex.Message}");
            toastService.ShowError($"Hata: {ex.Message}");
        }
    }

    private async Task CompleteRoute(Guid routeId)
    {
        try
        {
            var result = await RouteService.CompleteRouteAsync(routeId);
            if (result)
            {
                toastService.ShowSuccess("Rota başarıyla tamamlandı");
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                toastService.ShowError("Rota tamamlanırken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error completing route: {ex.Message}");
            toastService.ShowError($"Hata: {ex.Message}");
        }
    }

    private async Task ReoptimizeWithTraffic(Guid routeId)
    {
        try
        {
            // Close modal first
            CloseModal();

            // Show notification
            toastService.ShowInfo("Rota trafik durumuna göre yeniden optimize ediliyor...");

            // Create a cancellation token to handle timeouts
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));

            try
            {
                // Reoptimize and get the updated route directly
                var updatedRoute = await RouteService.ReoptimizeRouteWithTrafficAsync(routeId);

                // Check if steps are present in the returned route
                if (updatedRoute?.Steps == null || !updatedRoute.Steps.Any())
                {
                    Console.Error.WriteLine($"Reoptimized route has no steps: {routeId}");
                    toastService.ShowWarning("Rota optimize edildi ancak adımlar yüklenemedi. Lütfen sayfayı yenileyin.");

                    // Try to get the route directly again after a small delay
                    await Task.Delay(500);
                    updatedRoute = await RouteService.GetRouteByIdAsync(routeId);
                }

                // Reload routes data for the list view
                await LoadData();
                await ShowAllRoutesOnMap();

                // Find and focus the route on the map
                await FocusRouteOnMap(routeId);

                // Show success message
                toastService.ShowSuccess("Rota trafik durumuna göre yeniden optimize edildi");

                // If we have a valid route with steps, show it
                if (updatedRoute?.Steps != null && updatedRoute.Steps.Any())
                {
                    Console.WriteLine($"Displaying updated route with {updatedRoute.Steps.Count} steps");
                    await Task.Delay(300); // Small delay for UI update
                    await ShowDetails(updatedRoute);
                }
                else
                {
                    // Fall back to loaded data if direct fetch failed
                    var loadedRoute = routes?.FirstOrDefault(r => r.Id == routeId);
                    if (loadedRoute?.Steps != null && loadedRoute.Steps.Any())
                    {
                        Console.WriteLine($"Displaying loaded route with {loadedRoute.Steps.Count} steps");
                        await Task.Delay(300);
                        await ShowDetails(loadedRoute);
                    }
                    else
                    {
                        toastService.ShowWarning("Rota adımları yüklenemedi. Lütfen sayfayı yenileyin.");
                    }
                }
            }
            catch (OperationCanceledException)
            {
                Console.Error.WriteLine("Route reoptimization timed out");
                toastService.ShowError("Rota optimizasyon işlemi zaman aşımına uğradı.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error reoptimizing route: {ex.Message}");
            toastService.ShowError($"Rota optimize edilemedi: {ex.Message}");
        }
    }

    private async Task FocusRouteOnMap(Guid routeId)
    {
        await JS.InvokeVoidAsync("googleMapsInterop.focusRouteOnMap", routeId);
    }

    // Helper methods for UI
    private string GetDriverName(string driverId)
    {
        if (string.IsNullOrEmpty(driverId) || drivers == null)
            return "Bilinmeyen Sürücü";

        var driver = drivers.FirstOrDefault(d => d.Id == driverId);
        return driver != null ? $"{driver.Name} {driver.Surname}" : "Bilinmeyen Sürücü";
    }

    private string GetVehiclePlate(string vehicleId)
    {
        if (string.IsNullOrEmpty(vehicleId) || vehicles == null)
            return "Bilinmeyen Araç";

        if (Guid.TryParse(vehicleId, out Guid vId))
        {
            var vehicle = vehicles.FirstOrDefault(v => v.Id == vId);
            return vehicle != null ? vehicle.Plate : "Bilinmeyen Araç";
        }

        return "Bilinmeyen Araç";
    }

    private string GetStatusText(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "Planlanmış",
            RouteStatus.Active => "Aktif",
            RouteStatus.Completed => "Tamamlanmış",
            _ => status.ToString()
        };
    }

    private string GetStatusBadgeClass(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
            RouteStatus.Active => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            RouteStatus.Completed => "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetOptimizationTypeText(OptimizationType type)
    {
        return type switch
        {
            OptimizationType.EnKisaMesafe => "En Kısa Mesafe",
            OptimizationType.DolulukOncelikli => "Doluluk Öncelikli",
            _ => type.ToString()
        };
    }

    private string GetProgressColor(double percentage)
    {
        return percentage switch
        {
            >= 100 => "text-green-500",
            >= 75 => "text-blue-500",
            >= 50 => "text-yellow-500",
            >= 25 => "text-orange-500",
            _ => "text-red-500"
        };
    }

    private string GetFillLevelBadgeClass(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "bg-gray-100 text-gray-800";

        return fillLevel switch
        {
            >= 90 => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400",
            >= 70 => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400",
            >= 50 => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
            _ => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
        };
    }

    private string FormatDateTime(DateTime dateTime)
    {
        return dateTime.ToString("dd.MM.yyyy HH:mm");
    }

    // JavaScript interop methods
    [JSInvokable]
    public void OnMapInitialized()
    {
        Console.WriteLine("Map initialized from JS");
    }

    [JSInvokable]
    public string GetDriverNameFromJs(string driverId)
    {
        return GetDriverName(driverId);
    }

    [JSInvokable]
    public string GetVehiclePlateFromJs(string vehicleId)
    {
        return GetVehiclePlate(vehicleId);
    }

    [JSInvokable]
    public void ShowToastFromJs(string message)
    {
        toastService.ShowInfo(message);
    }

    [JSInvokable]
    public void CloseModal()
    {
        isModalOpen = false;
        selectedRoute = null;
        StateHasChanged();
    }

    [JSInvokable]
    public void CloseCreateModal()
    {
        showCreateModal = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task RefreshData()
    {
        expandedRouteId = Guid.Empty;
        await LoadData();
        await ShowAllRoutesOnMap();
        toastService.ShowSuccess("Veriler yenilendi");
        StateHasChanged();
    }

    [JSInvokable]
    public void OpenCreateModal()
    {
        newRoute = new CreateRouteDto
            {
                ScheduledStart = DateTime.Now,
                StartLatitude = fixedStartLat,
                StartLongitude = fixedStartLng,
                EndLatitude = fixedStartLat,
                EndLongitude = fixedStartLng,
                OptimizationType = OptimizationType.EnKisaMesafe,
                WasteType = "Genel Çöp",
                WasteBinIds = new List<Guid>(),
                AutoOptimize = true
            };

        showCreateModal = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task FocusRouteOnMap(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            var route = routes?.FirstOrDefault(r => r.Id == id);
            if (route != null)
            {
                expandedRouteId = id;
                if (filteredRoutes != null && filteredRoutes.Contains(route))
                {
                    int index = filteredRoutes.IndexOf(route);
                    currentPage = (index / pageSize) + 1;
                }
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public async Task RefreshRouteDetails()
    {
        if (selectedRoute != null)
        {
            try
            {
                var refreshedRoute = await RouteService.GetRouteByIdAsync(selectedRoute.Id);
                selectedRoute = refreshedRoute;

                if (refreshedRoute.Steps != null && refreshedRoute.Steps.Any())
                {
                    toastService.ShowSuccess("Rota adımları başarıyla yüklendi");
                    await InitializeDetailMap();
                }
                else
                {
                    toastService.ShowWarning("Rota adımları hala yüklenemedi");
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing route details: {ex.Message}");
                toastService.ShowError("Rota yenilenirken hata oluştu: " + ex.Message);
            }
        }
    }
}