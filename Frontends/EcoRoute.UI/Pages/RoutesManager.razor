@page "/routes"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.DtoLayer.RouteOptimizationDtos
@using EcoRoute.DtoLayer.WasteBinDtos
@using EcoRoute.UI.Pages.Components.Routes
@using EcoRoute.UI.Services
@using EcoRoute.UI.Services.RouteOptimizationServices
@using EcoRoute.UI.Services.WasteBinServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Blazored.Toast.Services
@inject IRouteService RouteService
@inject WasteBinService WasteBinService
@inject UserService UserService
@inject VehicleService VehicleService
@inject AuthenticationStateProvider AuthProvider
@inject IToastService ToastService
@inject IJSRuntime JS
@implements IAsyncDisposable

@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<!-- Main Container -->
<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden mb-6">
    @if (routes == null || filteredRoutes == null)
    {
        <div class="flex justify-center items-center p-8">
            <div class="text-center">
                <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-4"></i>
                <p class="text-gray-600 dark:text-gray-300">Veriler yükleniyor...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header Section -->
        <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Rota Yönetimi</h2>
            <div class="flex space-x-2">
                <button class="flex items-center bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        @onclick="SimulateAllRoutes"
                        disabled="@isSimulatingAll">
                    @if (isSimulatingAll)
                    {
                        <i class="fas fa-spinner fa-spin mr-2"></i> <span>Simüle Ediliyor...</span>
                    }
                    else
                    {
                        <i class="fas fa-play-circle mr-2"></i> <span>Tüm Rotaları Simüle Et</span>
                    }
                </button>
                <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        @onclick="RefreshData"
                        disabled="@isRefreshing">
                    @if (isRefreshing)
                    {
                        <i class="fas fa-spinner fa-spin mr-2"></i> <span>Yenileniyor...</span>
                    }
                    else
                    {
                        <i class="fas fa-sync-alt mr-2"></i> <span>Yenile</span>
                    }
                </button>
                <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        @onclick="OpenCreateModal"
                        disabled="@isCreatingRoute">
                    <i class="fas fa-plus mr-2"></i> Yeni Rota Ekle
                </button>
            </div>
        </div>

        <!-- Map Section -->
        <div class="p-4 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div class="rounded-lg overflow-hidden shadow-md">
                <div id="admin-observer-map" class="w-full h-96 relative">
                    <!-- Loading Indicator -->
                    <div id="map-loading-indicator" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800 bg-opacity-75 dark:bg-opacity-75 z-10">
                        <div class="text-center">
                            <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-2"></i>
                            <p class="text-gray-600 dark:text-gray-300">Harita yükleniyor...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="p-4 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 filter-section">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sürücü</label>
                    <select @bind="driverFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        @foreach (var driver in drivers ?? new List<ResultUserDto>())
                        {
                            <option value="@driver.Id">@driver.Name @driver.Surname</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Durum</label>
                    <select @bind="statusFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        <option value="@RouteStatus.Scheduled">Planlanmış</option>
                        <option value="@RouteStatus.Active">Aktif</option>
                        <option value="@RouteStatus.Completed">Tamamlanmış</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Arama</label>
                    <div class="relative">
                        <input type="text" placeholder="Ara..." @bind="searchText" @bind:event="oninput" @onkeyup="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tarih Aralığı</label>
                    <div class="flex space-x-2">
                        <input type="date" @bind="startDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <input type="date" @bind="endDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                    </div>
                </div>

                <div class="md:col-span-4 flex justify-end mt-4">
                    <button class="flex items-center justify-center bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition duration-300"
                            @onclick="ClearFilters">
                        <i class="fas fa-filter-circle-xmark mr-2"></i> Filtreleri Temizle
                    </button>
                </div>
            </div>
        </div>

        <!-- Routes Table Section -->
        <div class="p-6">
            <RouteTable Routes="@displayedRoutes"
                        Drivers="@drivers"
                        Vehicles="@vehicles"
                        ActiveSimulations="@activeSimulations"
                        ExpandedRouteId="@expandedRouteId"
                        CurrentPage="@currentPage"
                        TotalPages="@totalPages"
                        StartPage="@startPage"
                        EndPage="@endPage"
                        PageSize="@pageSize"
                        FilteredRoutes="@filteredRoutes"
                        SortField="@sortField"
                        SortAscending="@sortAscending"
                        RouteLoadingStates="@routeLoadingStates"
                        OnSortTable="@SortTable"
                        OnToggleExpand="@ToggleExpand"
                        OnChangePage="@ChangePage"
                        OnCompleteRoute="@CompleteRoute"
                        OnFocusRouteOnMap="@FocusRouteOnMap"
                        OnStartSimulation="@StartRouteSimulation"
                        OnStopSimulation="@StopSimulation"
                        OnUpdateSimulationSpeed="@UpdateSimulationSpeed" />
        </div>
    }
</div>

<!-- Create Route Modal -->
<CreateRouteModal @bind-IsVisible="@showCreateModal"
                  Drivers="@availableDrivers"
                  Vehicles="@availableVehicles"
                  WasteBins="@wasteBins"
                  IsCreating="@isCreatingRoute"
                  OnCreateRoute="@CreateRoute"
                  OnClose="@CloseCreateModal" />

<!-- Loading Overlay for global operations -->
@if (isSimulatingAll || isRefreshing)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-xl">
            <div class="flex items-center">
                <i class="fas fa-spinner fa-spin text-2xl text-primary-500 mr-4"></i>
                <div>
                    <p class="text-lg font-semibold text-gray-800 dark:text-white">
                        @if (isSimulatingAll)
                        {
                            <span>Tüm rotalar simüle ediliyor...</span>
                        }
                        else if (isRefreshing)
                        {
                            <span>Veriler yenileniyor...</span>
                        }
                    </p>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Lütfen bekleyiniz</p>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Tooltip Styles */
    .tooltip-container {
        position: relative;
    }

        .tooltip-container .tooltip {
            visibility: hidden;
            background-color: rgba(0,0,0,0.8);
            color: white;
            text-align: center;
            border-radius: 4px;
            padding: 5px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            white-space: nowrap;
            font-size: 12px;
        }

            .tooltip-container .tooltip::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: rgba(0,0,0,0.8) transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

    /* Modal Animation */
    @@keyframes modalShow {
        from

    {
        opacity: 0;
        transform: scale(0.95) translateY(10px);
    }

    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }

    }

    .animate-modal-show {
        animation: modalShow 0.2s ease-out forwards;
    }

    /* Line clamp for address text */
    .line-clamp-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>

@code {
    // Data
    private List<RouteResultDto> routes;
    private List<RouteResultDto> filteredRoutes = new List<RouteResultDto>();
    private List<RouteResultDto> displayedRoutes => GetDisplayedRoutes();
    private List<ResultVehicleDto> vehicles;
    private List<ResultUserDto> drivers;
    private List<ResultUserDto> availableDrivers => GetAvailableDrivers();
    private List<ResultVehicleDto> availableVehicles => GetAvailableVehicles();
    private List<ResultWasteBinDto> wasteBins;

    // UI state flags
    private bool showCreateModal = false;
    private bool mainMapInitialized = false;
    private Guid expandedRouteId;
    private DotNetObjectReference<RoutesManager> _objectReference;
    private CancellationTokenSource _debounceTokenSource = new CancellationTokenSource();

    // Loading states
    private bool isRefreshing = false;
    private bool isSimulatingAll = false;
    private bool isCreatingRoute = false;
    private Dictionary<Guid, RouteLoadingState> routeLoadingStates = new();

    // Simulation tracking
    private Dictionary<Guid, bool> activeSimulations = new Dictionary<Guid, bool>();

    // Filters
    private string driverFilter = "";
    private RouteStatus? statusFilter;
    private DateTime? startDateFilter;
    private DateTime? endDateFilter;
    private string searchText = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => filteredRoutes == null ? 0 : (int)Math.Ceiling(filteredRoutes.Count / (double)pageSize);
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    // Sorting
    private string sortField = "StartTime";
    private bool sortAscending = false;

    private static readonly JsonSerializerOptions camelCase =
    new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };



    private List<ResultUserDto> GetAvailableDrivers()
    {
        if (drivers == null || routes == null)
            return new List<ResultUserDto>();

        var busyDriverIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.DriverId)
            .ToHashSet();

        return drivers.Where(d => !busyDriverIds.Contains(d.Id)).ToList();
    }

    private List<ResultVehicleDto> GetAvailableVehicles()
    {
        if (vehicles == null || routes == null)
            return new List<ResultVehicleDto>();

        var busyVehicleIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.VehicleId)
            .ToHashSet();

        return vehicles.Where(v => !busyVehicleIds.Contains(v.Id.ToString())).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _objectReference = DotNetObjectReference.Create(this);

            await LoadData();
            await LoadDrivers();
            await LoadVehicles();
            await LoadWasteBins();

            if (routes == null)
                routes = new List<RouteResultDto>();

            if (filteredRoutes == null)
                filteredRoutes = new List<RouteResultDto>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            ToastService.ShowError("Sayfa yüklenirken bir hata oluştu");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await CleanupResources();
        _objectReference?.Dispose();
    }

    private async Task CleanupResources()
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
            await JS.InvokeVoidAsync("googleMapsInterop.disposeResources");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Cleanup error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await JS.InvokeVoidAsync("initializeGoogleMaps", _objectReference);
            }

            if (routes != null && filteredRoutes != null && !mainMapInitialized)
            {
                await Task.Yield();
                await InitializeMainMap();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            if (ToastService != null)
            {
                ToastService.ShowError("Harita yüklenirken bir hata oluştu: " + ex.Message);
            }
        }
    }

    private async Task InitializeMainMap()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("googleMapsInterop.initializeMainMap");

            if (result)
            {
                mainMapInitialized = true;
                await ShowAllRoutesOnMap();
            }
            else
            {
                mainMapInitialized = false;
                Console.Error.WriteLine("Map initialization failed");
            }
        }
        catch (Exception ex)
        {
            mainMapInitialized = false;
            Console.Error.WriteLine($"Error initializing main map: {ex.Message}");
            ToastService.ShowError("Harita yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadData()
    {
        try
        {
            routes = await RouteService.GetAllRoutesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading routes: {ex.Message}");
            ToastService.ShowError("Rotalar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadDrivers()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var allUsers = await UserService.GetAllUsersAsync();
                drivers = allUsers.Where(u => u.Roles.Contains("Driver")).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading drivers: {ex.Message}");
            ToastService.ShowError("Sürücüler yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadVehicles()
    {
        try
        {
            vehicles = await VehicleService.GetAllVehiclesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading vehicles: {ex.Message}");
            ToastService.ShowError("Araçlar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadWasteBins()
    {
        try
        {
            wasteBins = await WasteBinService.GetAllWasteBinsAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading waste bins: {ex.Message}");
            ToastService.ShowError("Atık kutuları yüklenirken bir hata oluştu");
        }
    }

    private List<RouteResultDto> GetDisplayedRoutes()
    {
        if (filteredRoutes == null) return new List<RouteResultDto>();

        return filteredRoutes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ApplyFilters()
    {
        if (routes == null)
        {
            filteredRoutes = new List<RouteResultDto>();
            return;
        }

        var query = routes.AsEnumerable();

        if (!string.IsNullOrEmpty(driverFilter))
        {
            query = query.Where(r => r.DriverId == driverFilter);
        }

        if (statusFilter.HasValue)
        {
            query = query.Where(r => r.Status == statusFilter);
        }

        if (startDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date >= startDateFilter.Value.Date);
        }

        if (endDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date <= endDateFilter.Value.Date);
        }

        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            query = query.Where(r =>
                (GetDriverName(r.DriverId)?.ToLower().Contains(search) == true) ||
                (GetVehiclePlate(r.VehicleId)?.ToLower().Contains(search) == true) ||
                (r.WasteType.ToString().ToLower().Contains(search) == true));
        }

        query = ApplySorting(query);

        filteredRoutes = query.ToList();

        if (currentPage > 1 && (currentPage - 1) * pageSize >= filteredRoutes.Count)
        {
            currentPage = 1;
        }
    }

    private async Task ApplyFiltersWithDebounce()
    {
        try
        {
            _debounceTokenSource.Cancel();
            _debounceTokenSource = new CancellationTokenSource();

            await Task.Delay(250, _debounceTokenSource.Token);

            ApplyFilters();
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private IEnumerable<RouteResultDto> ApplySorting(IEnumerable<RouteResultDto> query)
    {
        switch (sortField)
        {
            case "StartTime":
                return sortAscending ? query.OrderBy(r => r.StartTime) : query.OrderByDescending(r => r.StartTime);
            case "Driver":
                return sortAscending ? query.OrderBy(r => GetDriverName(r.DriverId)) : query.OrderByDescending(r => GetDriverName(r.DriverId));
            case "Vehicle":
                return sortAscending ? query.OrderBy(r => GetVehiclePlate(r.VehicleId)) : query.OrderByDescending(r => GetVehiclePlate(r.VehicleId));
            case "Status":
                return sortAscending ? query.OrderBy(r => r.Status) : query.OrderByDescending(r => r.Status);
            case "Distance":
                return sortAscending ? query.OrderBy(r => r.TotalDistanceKm) : query.OrderByDescending(r => r.TotalDistanceKm);
            case "Duration":
                return sortAscending ? query.OrderBy(r => r.EstimatedDurationMin) : query.OrderByDescending(r => r.EstimatedDurationMin);
            default:
                return query;
        }
    }

    private async Task ShowAllRoutesOnMap()
    {
        if (routes == null || !routes.Any())
        {
            await LoadData();
        }

        if (routes != null && routes.Any())
        {
            try
            {
                var routesJson = JsonSerializer.Serialize(routes, camelCase);

                var wasteBinsJson = "";
                if (wasteBins != null && wasteBins.Any())
                {
                    wasteBinsJson = JsonSerializer.Serialize(wasteBins, camelCase);
                }

                await JS.InvokeVoidAsync("googleMapsInterop.showAllRoutes", routesJson, wasteBinsJson);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error showing routes on map: {ex}");
                ToastService.ShowError("Rotalar haritada gösterilemedi");
            }
        }
    }

    private void SortTable(string field)
    {
        expandedRouteId = Guid.Empty;

        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        expandedRouteId = Guid.Empty;
    }

    private async Task ClearFilters()
    {
        driverFilter = "";
        statusFilter = null;
        startDateFilter = null;
        endDateFilter = null;
        searchText = "";

        ApplyFilters();
        await ShowAllRoutesOnMap();
    }

    private void ToggleExpand(Guid routeId)
    {
        if (expandedRouteId == routeId)
        {
            expandedRouteId = Guid.Empty;
        }
        else
        {
            expandedRouteId = routeId;
        }
    }

    private async Task CreateRoute(CreateRouteDto newRoute)
    {
        if (isCreatingRoute) return; // Prevent multiple calls

        if (newRoute.WasteBinIds.Count == 0)
        {
            ToastService.ShowWarning("En az bir atık kutusu seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.DriverId))
        {
            ToastService.ShowWarning("Bir sürücü seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.VehicleId))
        {
            ToastService.ShowWarning("Bir araç seçmelisiniz");
            return;
        }

        try
        {
            isCreatingRoute = true;
            StateHasChanged();

            var apiRoute = new ApiCreateRouteDto
                {
                    DriverId = newRoute.DriverId.ToString(),
                    VehicleId = newRoute.VehicleId.ToString(),
                    WasteType = newRoute.WasteType,
                    OptimizationType = newRoute.OptimizationType,
                    StartTime = newRoute.ScheduledStart,
                    WasteBinIds = newRoute.WasteBinIds,
                    Notes = newRoute.Notes,
                    RouteName = newRoute.RouteName,
                };

            var success = await RouteService.CreateRouteAsync(apiRoute);

            if (success)
            {
                ToastService.ShowSuccess("✅ Rota başarıyla oluşturuldu!");
                showCreateModal = false;
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                ToastService.ShowError("❌ Rota oluşturulurken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating route: {ex.Message}");
            ToastService.ShowError($"❌ Hata: {ex.Message}");
        }
        finally
        {
            isCreatingRoute = false;
            StateHasChanged();
        }
    }

    private async Task CompleteRoute(Guid routeId)
    {
        if (!routeLoadingStates.ContainsKey(routeId))
            routeLoadingStates[routeId] = new RouteLoadingState();

        if (routeLoadingStates[routeId].IsCompleting) return; // Prevent multiple calls

        try
        {
            routeLoadingStates[routeId].IsCompleting = true;
            StateHasChanged();

            var result = await RouteService.CompleteRouteAsync(routeId);
            if (result)
            {
                ToastService.ShowSuccess("✅ Rota başarıyla tamamlandı!");
                await LoadData();
                await ShowAllRoutesOnMap();
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("❌ Rota tamamlanırken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error completing route: {ex.Message}");
            ToastService.ShowError($"❌ Hata: {ex.Message}");
        }
        finally
        {
            routeLoadingStates[routeId].IsCompleting = false;
            StateHasChanged();
        }
    }

    private async Task StartRouteSimulation(Guid routeId)
    {
        if (!routeLoadingStates.ContainsKey(routeId))
            routeLoadingStates[routeId] = new RouteLoadingState();

        if (routeLoadingStates[routeId].IsStartingSimulation) return; // Prevent multiple calls

        try
        {
            var route = routes?.FirstOrDefault(r => r.Id == routeId);
            if (route == null)
            {
                ToastService.ShowError("❌ Rota bulunamadı");
                return;
            }

            if (route.Status == RouteStatus.Completed)
            {
                ToastService.ShowWarning("⚠️ Tamamlanmış rotalar simüle edilemez");
                return;
            }

            if (activeSimulations.ContainsKey(routeId))
            {
                ToastService.ShowInfo("ℹ️ Bu rota zaten simüle ediliyor");
                return;
            }

            routeLoadingStates[routeId].IsStartingSimulation = true;
            StateHasChanged();

            await RouteService.StartRouteSimulationAsync(routeId);
            activeSimulations[routeId] = true;

            var routeJson = JsonSerializer.Serialize(route, camelCase);
            await JS.InvokeVoidAsync("googleMapsInterop.startRouteSimulation", routeId.ToString(), routeJson);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting route simulation: {ex.Message}");
            ToastService.ShowError($"❌ Simülasyon başlatılamadı: {ex.Message}");
        }
        finally
        {
            if (routeLoadingStates.ContainsKey(routeId))
                routeLoadingStates[routeId].IsStartingSimulation = false;
            StateHasChanged();
        }
    }

    private async Task StopSimulation(Guid routeId)
    {
        if (!routeLoadingStates.ContainsKey(routeId))
            routeLoadingStates[routeId] = new RouteLoadingState();

        if (routeLoadingStates[routeId].IsStoppingSimulation) return; // Prevent multiple calls

        try
        {
            routeLoadingStates[routeId].IsStoppingSimulation = true;
            StateHasChanged();

            await JS.InvokeVoidAsync("googleMapsInterop.stopSimulation", routeId.ToString());

            if (activeSimulations.ContainsKey(routeId))
            {
                activeSimulations.Remove(routeId);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping simulation: {ex.Message}");
            ToastService.ShowError($"❌ Simülasyon durdurulamadı: {ex.Message}");
        }
        finally
        {
            routeLoadingStates[routeId].IsStoppingSimulation = false;
            StateHasChanged();
        }
    }

    private async Task UpdateSimulationSpeed((Guid routeId, int speed) data)
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.updateSimulationSpeed", data.routeId.ToString(), data.speed);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating simulation speed: {ex.Message}");
        }
    }

    private async Task SimulateAllRoutes()
    {
        if (isSimulatingAll) return; // Prevent multiple calls

        try
        {
            isSimulatingAll = true;
            StateHasChanged();

            var activeRoutes = routes?.Where(r => r.Status != RouteStatus.Completed).ToList();
            if (activeRoutes == null || !activeRoutes.Any())
            {
                ToastService.ShowInfo("ℹ️ Simüle edilecek aktif rota bulunamadı");
                return;
            }

            var simulatedCount = await RouteService.SimulateAllRoutesAsync();

            if (simulatedCount > 0)
            {
                ToastService.ShowSuccess($"🎉 {simulatedCount} rota başarıyla simüle edildi!");
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                ToastService.ShowInfo("ℹ️ Simüle edilecek rota bulunamadı");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error simulating all routes: {ex.Message}");
            ToastService.ShowError($"❌ Toplu simülasyon hatası: {ex.Message}");
        }
        finally
        {
            isSimulatingAll = false;
            StateHasChanged();
        }
    }

    private async Task FocusRouteOnMap(Guid routeId)
    {
        await JS.InvokeVoidAsync("googleMapsInterop.focusRouteOnMap", routeId);
    }

    // Helper methods for UI
    private string GetDriverName(string driverId)
    {
        if (string.IsNullOrEmpty(driverId) || drivers == null)
            return "Bilinmeyen Sürücü";

        var driver = drivers.FirstOrDefault(d => d.Id == driverId);
        return driver != null ? $"{driver.Name} {driver.Surname}" : "Bilinmeyen Sürücü";
    }

    private string GetVehiclePlate(string vehicleId)
    {
        if (string.IsNullOrEmpty(vehicleId) || vehicles == null)
            return "Bilinmeyen Araç";

        if (Guid.TryParse(vehicleId, out Guid vId))
        {
            var vehicle = vehicles.FirstOrDefault(v => v.Id == vId);
            return vehicle != null ? vehicle.Plate : "Bilinmeyen Araç";
        }

        return "Bilinmeyen Araç";
    }

    private void OpenCreateModal()
    {
        showCreateModal = true;
        StateHasChanged();
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        StateHasChanged();
    }

    // JavaScript interop methods
    [JSInvokable]
    public void OnMapInitialized()
    {
        Console.WriteLine("Map initialized from JS");
    }

    [JSInvokable]
    public void ShowToastFromJs(string message)
    {
        ToastService.ShowInfo(message);
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task RefreshData()
    {
        if (isRefreshing) return; // Prevent multiple calls

        try
        {
            isRefreshing = true;
            StateHasChanged();

            expandedRouteId = Guid.Empty;
            await LoadData();
            await ShowAllRoutesOnMap();
            ToastService.ShowSuccess("🔄 Veriler yenilendi");
            StateHasChanged();
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task FocusRouteOnMap(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            var route = routes?.FirstOrDefault(r => r.Id == id);
            if (route != null)
            {
                expandedRouteId = id;
                if (filteredRoutes != null && filteredRoutes.Contains(route))
                {
                    int index = filteredRoutes.IndexOf(route);
                    currentPage = (index / pageSize) + 1;
                }
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public async Task OnSimulationStarted(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (!activeSimulations.ContainsKey(id))
            {
                activeSimulations[id] = true;
            }
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnSimulationStopped(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (activeSimulations.ContainsKey(id))
            {
                activeSimulations.Remove(id);
            }
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnSimulationCompleted(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (activeSimulations.ContainsKey(id))
            {
                activeSimulations.Remove(id);
            }
            await LoadData();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task CompleteNextSimulationStep(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            try
            {
                var result = await RouteService.CompleteNextStepAsync(id);

                var route = routes?.FirstOrDefault(r => r.Id == id);
                if (route != null)
                {
                    var step = route.Steps?.FirstOrDefault(s => s.Id == result.CompletedStepId);
                    if (step != null)
                    {
                        step.IsCompleted = true;

                        string message;

                        if (step.Order == 0)
                        {
                            message = "🚀 Başlangıç noktasından ayrıldı";
                        }
                        else if (step.Order == route.Steps.Count - 1)
                        {
                            message = "🏁 Hedefe varıldı - Rota tamamlandı!";
                        }
                        else if (step.WasteBinId.HasValue)
                        {
                            message = $"📍 {step.Order}. durak tamamlandı: {step.Address}";
                        }
                        else
                        {
                            message = $"✅ {step.Order}. adım tamamlandı";
                        }

                        ToastService.ShowSuccess(message);
                        StateHasChanged();
                    }
                }

                if (result.IsRouteCompleted)
                {
                    if (activeSimulations.ContainsKey(id))
                    {
                        activeSimulations.Remove(id);
                    }

                    ToastService.ShowSuccess("🎉 Rota simülasyonu başarıyla tamamlandı!");
                    await LoadData();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error completing simulation step: {ex.Message}");
                ToastService.ShowError($"❌ Adım tamamlanırken hata: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task CompleteRouteSimulation(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            try
            {
                await RouteService.CompleteRouteAsync(id);

                if (activeSimulations.ContainsKey(id))
                {
                    activeSimulations.Remove(id);
                }

                await LoadData();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error completing route simulation: {ex.Message}");
            }
        }
    }
}