@page "/routes"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.DtoLayer.RouteOptimizationDtos
@using EcoRoute.DtoLayer.WasteBinDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Services.RouteOptimizationServices
@using EcoRoute.UI.Services.WasteBinServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Blazored.Toast.Services
@inject IRouteService RouteService
@inject WasteBinService WasteBinService
@inject UserService UserService
@inject VehicleService VehicleService
@inject AuthenticationStateProvider AuthProvider
@inject IToastService ToastService
@inject IJSRuntime JS
@implements IAsyncDisposable

@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<!-- Main Container -->
<div class="bg-white dark:bg-gray-900 shadow-md rounded-lg overflow-hidden mb-6">
    @if (routes == null || filteredRoutes == null)
    {
        <div class="flex justify-center items-center p-8">
            <div class="text-center">
                <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-4"></i>
                <p class="text-gray-600 dark:text-gray-300">Veriler yükleniyor...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header Section -->
        <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Rota Yönetimi</h2>
            <div class="flex space-x-2">
                <button class="flex items-center bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition duration-300" @onclick="SimulateAllRoutes">
                    <i class="fas fa-play-circle mr-2"></i> Tüm Rotaları Simüle Et
                </button>
                <button class="flex items-center bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300" @onclick="RefreshData">
                    <i class="fas fa-sync-alt mr-2"></i> Yenile
                </button>
                <button class="flex items-center bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition duration-300" @onclick="OpenCreateModal">
                    <i class="fas fa-plus mr-2"></i> Yeni Rota Ekle
                </button>
            </div>
        </div>

        <!-- Map Section -->
        <div class="p-4 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div class="rounded-lg overflow-hidden shadow-md">
                <div id="admin-observer-map" class="w-full h-96 relative">
                    <!-- Loading Indicator -->
                    <div id="map-loading-indicator" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800 bg-opacity-75 dark:bg-opacity-75 z-10">
                        <div class="text-center">
                            <i class="fas fa-circle-notch fa-spin text-4xl text-primary-500 mb-2"></i>
                            <p class="text-gray-600 dark:text-gray-300">Harita yükleniyor...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="p-4 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 filter-section">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sürücü</label>
                    <select @bind="driverFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        @foreach (var driver in drivers)
                        {
                            <option value="@driver.Id">@driver.Name @driver.Surname</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Durum</label>
                    <select @bind="statusFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                        <option value="">Tümü</option>
                        <option value="@RouteStatus.Scheduled">Planlanmış</option>
                        <option value="@RouteStatus.Active">Aktif</option>
                        <option value="@RouteStatus.Completed">Tamamlanmış</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Arama</label>
                    <div class="relative">
                        <input type="text" placeholder="Ara..." @bind="searchText" @bind:event="oninput" @onkeyup="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tarih Aralığı</label>
                    <div class="flex space-x-2">
                        <input type="date" @bind="startDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                        <input type="date" @bind="endDateFilter" @bind:event="oninput" @onchange="ApplyFiltersWithDebounce"
                               class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                    </div>
                </div>

                <div class="md:col-span-4 flex justify-end mt-4">
                    <button class="flex items-center justify-center bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition duration-300"
                            @onclick="ClearFilters">
                        <i class="fas fa-filter-circle-xmark mr-2"></i> Filtreleri Temizle
                    </button>
                </div>
            </div>
        </div>

        <!-- Routes Table Section -->
        <div class="p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                    <thead class="bg-gray-100 dark:bg-gray-700">
                        <tr>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("StartTime")'>
                                <div class="flex items-center">
                                    Başlangıç
                                    @if (sortField == "StartTime")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Driver")'>
                                <div class="flex items-center">
                                    Sürücü
                                    @if (sortField == "Driver")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Vehicle")'>
                                <div class="flex items-center">
                                    Araç
                                    @if (sortField == "Vehicle")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Status")'>
                                <div class="flex items-center">
                                    Durum
                                    @if (sortField == "Status")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Distance")'>
                                <div class="flex items-center">
                                    Mesafe (km)
                                    @if (sortField == "Distance")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => SortTable("Duration")'>
                                <div class="flex items-center">
                                    Süre (dk)
                                    @if (sortField == "Duration")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort ml-1 text-gray-400"></i>
                                    }
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                        @if (filteredRoutes == null)
                        {
                            <tr>
                                <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                    <div class="flex justify-center items-center">
                                        <i class="fas fa-circle-notch fa-spin mr-2"></i> Yükleniyor...
                                    </div>
                                </td>
                            </tr>
                        }
                        else if (!filteredRoutes.Any())
                        {
                            <tr>
                                <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                                    <div class="flex flex-col justify-center items-center p-6">
                                        <i class="fas fa-route text-4xl mb-2 text-gray-400"></i>
                                        <p>Görüntülenecek rota bulunamadı.</p>
                                        <p class="text-sm text-gray-500 dark:text-gray-500 mt-2">Yeni bir rota ekleyin veya farklı filtreler deneyin.</p>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @for (int i = 0; i < displayedRoutes.Count; i++)
                            {
                                var route = displayedRoutes[i];
                                var rowIndex = ((currentPage - 1) * pageSize) + i + 1;
                                var isSimulating = activeSimulations.ContainsKey(route.Id);
                                <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer @(expandedRouteId == route.Id ? "bg-gray-50 dark:bg-gray-700" : "")"
                                    @onclick="@(() => ToggleExpand(route.Id))">
                                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@FormatDateTime(route.StartTime)</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                        <div class="flex items-center">
                                            <i class="fas fa-user-hard-hat text-lg mr-3 text-primary-500"></i>
                                            <span>@GetDriverName(route.DriverId)</span>
                                        </div>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                        <div class="flex items-center">
                                            <i class="fas fa-truck text-lg mr-3 text-blue-500"></i>
                                            <span>@GetVehiclePlate(route.VehicleId)</span>
                                        </div>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm">
                                        <span class="@GetStatusBadgeClass(route.Status) px-2 py-1 rounded-full text-xs flex items-center">
                                            @if (isSimulating)
                                            {
                                                <i class="fas fa-spinner fa-spin mr-1"></i>
                                            }
                                            @GetStatusText(route.Status)
                                        </span>
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@route.TotalDistanceKm.ToString("F1")</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">@route.EstimatedDurationMin</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm">
                                        <div class="flex space-x-3" @onclick:stopPropagation>
                                            @if (route.Status != RouteStatus.Completed && !isSimulating)
                                            {
                                                <button class="text-orange-500 hover:text-orange-700 text-lg tooltip-container" @onclick="() => CompleteRoute(route.Id)">
                                                    <i class="fas fa-check-circle"></i>
                                                    <span class="tooltip">Tamamla</span>
                                                </button>
                                            }
                                            <button class="text-primary-500 hover:text-primary-700 text-lg tooltip-container" @onclick="() => FocusRouteOnMap(route.Id)">
                                                <i class="fas fa-map-marker"></i>
                                                <span class="tooltip">Haritada Göster</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>

                                @if (expandedRouteId == route.Id)
                                {
                                    <tr class="@(route.Status == RouteStatus.Completed ? "bg-gray-50 dark:bg-gray-800/50" : "bg-gray-50 dark:bg-gray-800") border-t animate-expandRow">
                                        <td colspan="7" class="px-6 py-6">
                                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                                <!-- Genel Bilgiler -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                                                            Genel Bilgiler
                                                        </h3>
                                                        <span class="@GetStatusBadgeClass(route.Status) px-2 py-1 rounded-full text-xs">
                                                            @GetStatusText(route.Status)
                                                        </span>
                                                    </div>

                                                    <div class="space-y-3">
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Başlangıç Tarihi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.StartTime.ToString("dd.MM.yyyy HH:mm")</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Mesafe:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.TotalDistanceKm.ToString("F1") km</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Süre:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedDurationMin dk</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Yakıt:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedFuelL.ToString("F2") L</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini CO2:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@route.EstimatedCO2Kg.ToString("F2") kg</span>
                                                        </div>
                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Atık Tipi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                                                                @route.WasteType
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Rota Özeti -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="!text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-route mr-2 text-amber-500"></i>
                                                            Rota Özeti
                                                        </h3>
                                                    </div>

                                                    <div class="space-y-3">
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Adım Sayısı:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="total-steps-@route.Id">@route.Steps.Count() adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Tamamlanan Adımlar:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="completed-steps-@route.Id">@route.Steps.Count(s => s.IsCompleted) adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Kalan Adımlar:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="remaining-steps-@route.Id">@route.Steps.Count(s => !s.IsCompleted) adet</span>
                                                        </div>
                                                        <div class="flex justify-between items-center">
                                                            <span class="text-sm text-gray-500 dark:text-gray-400">Optimizasyon Tipi:</span>
                                                            <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                                                                @GetOptimizationTypeText(route.OptimizationType)
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- İlerleme Durumu ve Simülasyon Kontrolleri -->
                                                <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
                                                    <div class="flex justify-between items-center mb-4">
                                                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                                            <i class="fas fa-chart-line mr-2 text-green-500"></i>
                                                            İlerleme Durumu
                                                        </h3>
                                                    </div>

                                                    <div class="space-y-4">
                                                        <!-- Progress Circle -->
                                                        <div class="flex justify-center">
                                                            @{
                                                                double progressPercentage = route.Steps.Any()
                                                                ? (double)route.Steps.Count(s => s.IsCompleted) / route.Steps.Count * 100
                                                                : 0;
                                                            }
                                                            <div class="relative w-24 h-24">
                                                                <svg class="w-full h-full" viewBox="0 0 36 36">
                                                                    <path class="stroke-current text-gray-200 dark:text-gray-700" fill="none" stroke-width="3.8" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                                                    <path class="@GetProgressColor(progressPercentage) stroke-current" fill="none" stroke-width="3.8" stroke-linecap="round"
                                                                          stroke-dasharray="@(progressPercentage), 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                                                                          id="progress-circle-@route.Id" />
                                                                    <text x="18" y="20.5" class="fill-current font-bold text-gray-700 dark:text-gray-200" text-anchor="middle" font-size="7" id="progress-text-@route.Id">@progressPercentage.ToString("F0")%</text>
                                                                </svg>
                                                            </div>
                                                        </div>

                                                        <!-- Progress Bar -->
                                                        <div>
                                                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-2">
                                                                <div class="@GetProgressColor(progressPercentage) h-2.5 rounded-full transition-all duration-500" style="width: @progressPercentage%" id="progress-bar-@route.Id"></div>
                                                            </div>
                                                            <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                                                                <span>0%</span>
                                                                <span>50%</span>
                                                                <span>100%</span>
                                                            </div>
                                                        </div>

                                                        <!-- Simülasyon Kontrolleri -->
                                                        @if (route.Status != RouteStatus.Completed)
                                                        {
                                                            <div id="simulation-controls-@route.Id">
                                                                @if (!isSimulating)
                                                                {
                                                                    <div class="space-y-3">
                                                                        <button class="w-full py-2 bg-green-500 hover:bg-green-600 text-white rounded-md transition-colors flex items-center justify-center"
                                                                                @onclick:stopPropagation="true"
                                                                                @onclick="() => StartRouteSimulation(route.Id)">
                                                                            <i class="fas fa-play mr-2"></i> Simülasyonu Başlat
                                                                        </button>
                                                                        <button class="w-full py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center justify-center"
                                                                                @onclick:stopPropagation="true"
                                                                                @onclick="() => CompleteRoute(route.Id)">
                                                                            <i class="fas fa-check-circle mr-2"></i> Rotayı Tamamla
                                                                        </button>
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="space-y-3">
                                                                        <!-- Hız Kontrolü -->
                                                                        <div class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
                                                                            <div class="flex justify-between items-center mb-2">
                                                                                <span class="text-sm font-medium text-blue-800 dark:text-blue-200">Simülasyon Hızı</span>
                                                                                <span class="text-sm font-bold text-blue-600 dark:text-blue-300" id="speed-display-@route.Id">1x</span>
                                                                            </div>
                                                                            <input type="range" min="1" max="10" value="1"
                                                                                   class="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer dark:bg-blue-700"
                                                                                   id="speed-slider-@route.Id"
                                                                                   @onchange="@((ChangeEventArgs e) => UpdateSimulationSpeed(route.Id, int.Parse(e.Value.ToString())))" />
                                                                            <div class="flex justify-between text-xs text-blue-600 dark:text-blue-400 mt-1">
                                                                                <span>1x</span>
                                                                                <span>5x</span>
                                                                                <span>10x</span>
                                                                            </div>
                                                                        </div>

                                                                        <!-- Kontrol Butonları -->
                                                                        <div class="flex space-x-2">
                                                                            <button class="flex-1 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors flex items-center justify-center"
                                                                                    @onclick:stopPropagation="true"
                                                                                    @onclick="() => StopSimulation(route.Id)">
                                                                                <i class="fas fa-stop mr-2"></i> Durdur
                                                                            </button>
                                                                            <button class="flex-1 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-md transition-colors flex items-center justify-center"
                                                                                    @onclick:stopPropagation="true"
                                                                                    @onclick="() => CompleteRoute(route.Id)">
                                                                                <i class="fas fa-forward mr-2"></i> Tamamla
                                                                            </button>
                                                                        </div>

                                                                        <!-- Simülasyon Durumu -->
                                                                        <div class="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg text-center">
                                                                            <div class="flex items-center justify-center mb-2">
                                                                                <i class="fas fa-spinner fa-spin text-green-500 mr-2"></i>
                                                                                <span class="text-green-700 dark:text-green-300 font-medium">Simülasyon Aktif</span>
                                                                            </div>
                                                                            <div class="text-sm text-green-600 dark:text-green-400" id="simulation-status-@route.Id">
                                                                                Başlatılıyor...
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="w-full py-3 bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 rounded-md flex items-center justify-center">
                                                                <i class="fas fa-check-double mr-2"></i> Rota Tamamlandı
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Adımlar Listesi -->
                                            <div class="mt-6">
                                                <h4 class="font-semibold text-gray-800 dark:text-white mb-3 flex items-center">
                                                    <i class="fas fa-list-check mr-2 text-primary-500"></i> Rota Adımları
                                                </h4>
                                                <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                                                    <table class="min-w-full">
                                                        <thead class="bg-gray-50 dark:bg-gray-700">
                                                            <tr>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">No</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Adres</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Konum</th>
                                                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Durum</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-gray-200 dark:divide-gray-700" id="route-steps-@route.Id">
                                                            @foreach (var step in route.Steps.OrderBy(s => s.Order))
                                                            {
                                                                <tr class="hover:bg-gray-50 dark:hover:bg-gray-700" id="step-row-@step.Id">
                                                                    <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@step.Order</td>
                                                                    <td class="px-4 py-2 text-sm text-gray-700 dark:text-gray-300">@step.Address</td>
                                                                    <td class="px-4 py-2 text-sm text-gray-500 dark:text-gray-400">(@step.Latitude.ToString("F4"), @step.Longitude.ToString("F4"))</td>
                                                                    <td class="px-4 py-2 whitespace-nowrap" id="step-status-@step.Id">
                                                                        <div class="step-status-indicator">
                                                                            <span class="@GetStepStatusClass(step, isSimulating) px-2 py-0.5 rounded-full text-xs flex items-center w-fit">
                                                                                <span class="status-icon">@GetStepStatusIcon(step, isSimulating)</span>
                                                                                <span class="ml-1">@GetStepStatusText(step, isSimulating)</span>
                                                                            </span>
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (filteredRoutes != null && totalPages > 1)
            {
                <div class="flex justify-center mt-4">
                    <div class="flex space-x-1">
                        <button @onclick="() => ChangePage(1)"
                                disabled="@(currentPage == 1)"
                                class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                        <button @onclick="() => ChangePage(currentPage - 1)"
                                disabled="@(currentPage == 1)"
                                class="@(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-left"></i>
                        </button>

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            var pageNumber = i;
                            <button @onclick="() => ChangePage(pageNumber)"
                                    class="@(currentPage == pageNumber ? "bg-primary-500 text-white" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                                @pageNumber
                            </button>
                        }

                        <button @onclick="() => ChangePage(currentPage + 1)"
                                disabled="@(currentPage == totalPages)"
                                class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-right"></i>
                        </button>
                        <button @onclick="() => ChangePage(totalPages)"
                                disabled="@(currentPage == totalPages)"
                                class="@(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-primary-500 hover:bg-primary-50") px-3 py-1 rounded-md border border-gray-200">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </div>
                </div>
            }

            <div class="text-xs text-gray-500 dark:text-gray-400 mt-4 text-center">
                Toplam @(filteredRoutes?.Count ?? 0) rota
            </div>
        </div>
    }
</div>

<!-- Create Route Modal -->
@if (showCreateModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                    <i class="fas fa-route mr-3 text-primary-500"></i> Yeni Rota Oluştur
                </h2>
                <button class="text-gray-500 hover:text-red-600" @onclick="CloseCreateModal">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Modal Content -->
            <div class="p-6">
                <EditForm Model="newRoute" OnValidSubmit="CreateRoute">
                    <!-- Temel Bilgiler -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-info-circle mr-2 text-blue-500"></i> Temel Bilgiler
                        </h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rota Adı</label>
                                <InputText class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" @bind-Value="newRoute.RouteName" placeholder="Örn: Sabah Rotası" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Atık Türü</label>
                                <InputSelect class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                             @bind-Value="newRoute.WasteType">
                                    <option value="">Seçiniz</option>
                                    @foreach (WasteType wt in Enum.GetValues(typeof(WasteType)))
                                    {
                                        <option value="@wt">@GetWasteTypeText(wt)</option>
                                    }
                                </InputSelect>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Başlangıç Zamanı</label>
                                <InputDate class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" @bind-Value="newRoute.ScheduledStart" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Optimizasyon Türü</label>
                                <div class="grid grid-cols-2 gap-3">
                                    <div class="relative">
                                        <input type="radio" id="opt-shortest" name="optimization-type" value="@OptimizationType.EnKisaMesafe"
                                               checked="@(newRoute.OptimizationType == OptimizationType.EnKisaMesafe)"
                                               @onchange='@(() => newRoute.OptimizationType = OptimizationType.EnKisaMesafe)'
                                               class="hidden peer" />
                                        <label for="opt-shortest" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-blue-400 peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-route mr-2 text-blue-500"></i>
                                            <span class="font-medium text-sm">En Kısa Mesafe</span>
                                        </label>
                                    </div>
                                    <div class="relative">
                                        <input type="radio" id="opt-fill" name="optimization-type" value="@OptimizationType.DolulukOncelikli"
                                               checked="@(newRoute.OptimizationType == OptimizationType.DolulukOncelikli)"
                                               @onchange='@(() => newRoute.OptimizationType = OptimizationType.DolulukOncelikli)'
                                               class="hidden peer" />
                                        <label for="opt-fill" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas fa-fill-drip mr-2 text-green-500"></i>
                                            <span class="font-medium text-sm">Doluluk Öncelikli</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Başlangıç Noktası -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-map-marker-alt mr-2 text-red-500"></i> Başlangıç/Bitiş Noktası
                        </h3>

                        <div class="flex items-center mb-3 bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 p-3 rounded-lg">
                            <i class="fas fa-info-circle mr-2 text-xl"></i>
                            <p class="text-sm">Tüm rotalar aynı noktadan başlayıp aynı noktada bitecektir.</p>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="flex items-center">
                                <i class="fas fa-map-marker-alt text-red-500 mr-2 text-xl"></i>
                                <div>
                                    <span class="text-gray-700 dark:text-gray-300 font-medium">Çorlu Belediyesi</span>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">@fixedStartLat.ToString("F6"), @fixedStartLng.ToString("F6")</p>
                                </div>
                            </div>
                            <div id="start-point-mini-map" class="h-24 rounded-md overflow-hidden border border-gray-300 dark:border-gray-600"></div>
                        </div>
                    </div>

                    <!-- Sürücü ve Araç Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-users mr-2 text-amber-500"></i> Sürücü ve Araç
                        </h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Sürücü Seçimi -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Sürücü Seçimi</label>
                                <div class="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto p-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                                    @if (availableDrivers != null && availableDrivers.Any())
                                    {
                                        foreach (var driver in availableDrivers)
                                        {
                                            <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800 @(newRoute.DriverId == driver.Id ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                                                 @onclick="@(() => newRoute.DriverId = driver.Id)">
                                                <input type="radio"
                                                       id="driver-@driver.Id"
                                                       name="driver-selection"
                                                       value="@driver.Id"
                                                       checked="@(newRoute.DriverId == driver.Id)"
                                                       @onchange="@(e => newRoute.DriverId = driver.Id)"
                                                       class="w-4 h-4 mr-3 text-primary-600 bg-gray-100 border-gray-300 rounded-full focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                                <div class="flex items-center">
                                                    <div class="w-8 h-8 bg-primary-500 rounded-full text-white flex items-center justify-center mr-3">
                                                        <i class="fas fa-user"></i>
                                                    </div>
                                                    <div>
                                                        <p class="font-medium text-gray-800 dark:text-white">@driver.Name @driver.Surname</p>
                                                        <p class="text-xs text-gray-500 dark:text-gray-400">@driver.PhoneNumber</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                                            <i class="fas fa-users-slash text-3xl mb-2"></i>
                                            <p>Kullanılabilir sürücü bulunamadı</p>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Araç Seçimi -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Araç Seçimi</label>
                                <div class="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto p-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                                    @if (availableVehicles != null && availableVehicles.Any())
                                    {
                                        foreach (var vehicle in availableVehicles)
                                        {
                                            <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800 @(newRoute.VehicleId == vehicle.Id.ToString() ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                                                 @onclick="@(() => newRoute.VehicleId = vehicle.Id.ToString())">
                                                <input type="radio"
                                                       id="vehicle-@vehicle.Id"
                                                       name="vehicle-selection"
                                                       value="@vehicle.Id.ToString()"
                                                       checked="@(newRoute.VehicleId == vehicle.Id.ToString())"
                                                       @onchange="@(e => newRoute.VehicleId = vehicle.Id.ToString())"
                                                       class="w-4 h-4 mr-3 text-primary-600 bg-gray-100 border-gray-300 rounded-full focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                                <div class="flex items-center">
                                                    <div class="w-8 h-8 bg-blue-500 rounded-full text-white flex items-center justify-center mr-3">
                                                        <i class="fas fa-truck"></i>
                                                    </div>
                                                    <div>
                                                        <p class="font-medium text-gray-800 dark:text-white">@vehicle.Plate</p>
                                                        <p class="text-xs text-gray-500 dark:text-gray-400">@vehicle.Description</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                                            <i class="fas fa-truck-slash text-3xl mb-2"></i>
                                            <p>Kullanılabilir araç bulunamadı</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Atık Kutuları Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <div class="flex justify-between items-center mb-4 border-b border-gray-200 dark:border-gray-600 pb-2">
                            <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                                <i class="fas fa-dumpster mr-2 text-green-500"></i> Atık Kutuları
                            </h3>
                            <span class="bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 text-xs px-2 py-1 rounded-full">
                                @newRoute.WasteBinIds.Count adet seçildi
                            </span>
                        </div>

                        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg max-h-72 overflow-y-auto">
                            <div class="mb-3 relative">
                                <input type="text" placeholder="Atık kutusu ara..."
                                       @bind="binSearchText" @bind:event="oninput" @onkeyup="FilterBinsWithDebounce"
                                       class="w-full px-3 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white" />
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <i class="fas fa-search text-gray-400"></i>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                @foreach (var bin in filteredBins)
                                {
                                    <div class="flex items-center space-x-2 p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-700 transition-colors @(newRoute.WasteBinIds.Contains(bin.Id) ? "bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-600" : "")"
                                         @onclick="e => ToggleBin(bin.Id, !newRoute.WasteBinIds.Contains(bin.Id))">
                                        <input type="checkbox"
                                               id="bin-@bin.Id"
                                               value="@bin.Id"
                                               checked="@newRoute.WasteBinIds.Contains(bin.Id)"
                                               @onchange="e => ToggleBin(bin.Id, e.Value)"
                                               class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:bg-gray-700 dark:border-gray-600" />
                                        <div class="flex-1">
                                            <div class="flex justify-between">
                                                <span class="font-medium text-gray-800 dark:text-white text-sm">@bin.Label</span>
                                                <span class="@GetFillLevelBadgeClass(bin.FillLevel) text-xs px-2 py-0.5 rounded-full">
                                                    @(bin.FillLevel?.ToString("F0") ?? "0")%
                                                </span>
                                            </div>
                                            <span class="text-xs text-gray-500 dark:text-gray-400 line-clamp-1">@bin.Address</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Notlar -->
                    <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg mb-5">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center border-b border-gray-200 dark:border-gray-600 pb-2">
                            <i class="fas fa-sticky-note mr-2 text-yellow-500"></i> Notlar
                        </h3>

                        <textarea class="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white resize-none focus:outline-none focus:ring-primary-500 focus:border-primary-500"
                                  @bind="newRoute.Notes"
                                  rows="3"
                                  placeholder="Rotayla ilgili notlarınızı buraya ekleyebilirsiniz..."></textarea>
                    </div>

                    <!-- Özet ve Butonlar -->
                    <div class="flex flex-col-reverse md:flex-row justify-between items-start md:items-center gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                        <div class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <div class="flex items-center">
                                <i class="fas fa-route text-primary-500 mr-2"></i>
                                <span>Optimizasyon: @GetOptimizationTypeText(newRoute.OptimizationType)</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-dumpster text-green-500 mr-2"></i>
                                <span>Seçilen Atık Kutusu: @newRoute.WasteBinIds.Count adet</span>
                            </div>
                            <div class="flex items-center">
                                <i class="fas fa-map-marker-alt text-red-500 mr-2"></i>
                                <span>Başlangıç Noktası: Çorlu Belediyesi</span>
                            </div>
                        </div>
                        <div class="flex space-x-3">
                            <button type="button" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" @onclick="CloseCreateModal">
                                İptal
                            </button>
                            <button type="submit" class="px-5 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors shadow-sm">
                                <i class="fas fa-check mr-2"></i> Rota Oluştur
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    /* Tooltip Styles */
    .tooltip-container {
        position: relative;
    }

        .tooltip-container .tooltip {
            visibility: hidden;
            background-color: rgba(0,0,0,0.8);
            color: white;
            text-align: center;
            border-radius: 4px;
            padding: 5px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            white-space: nowrap;
            font-size: 12px;
        }

            .tooltip-container .tooltip::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: rgba(0,0,0,0.8) transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

    /* Row Expansion Animation */
    @@keyframes expandRow {
        from

    {
        opacity: 0;
        max-height: 0;
        transform: scaleY(0);
        transform-origin: top;
    }

    to {
        opacity: 1;
        max-height: 1000px;
        transform: scaleY(1);
        transform-origin: top;
    }

    }

    .animate-expandRow {
        animation: expandRow 0.3s ease-out forwards;
    }

    /* Modal Animation */
    @@keyframes modalShow {
        from

    {
        opacity: 0;
        transform: scale(0.95) translateY(10px);
    }

    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }

    }

    .animate-modal-show {
        animation: modalShow 0.2s ease-out forwards;
    }

    /* Line clamp for address text */
    .line-clamp-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Animate pulse for processing steps */
    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.7;
    }

    }

    .animate-pulse {
        animation: pulse 1.5s ease-in-out infinite;
    }

    /* Improved step status indicators */
    .step-status-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .step-status-indicator .status-icon {
            font-size: 1.1em;
        }

    /* Enhanced route progress visualization */
    .route-progress-enhanced {
        background: linear-gradient(45deg, #f3f4f6, #e5e7eb);
        border-radius: 0.75rem;
        padding: 1rem;
        border: 2px solid #d1d5db;
    }

        .route-progress-enhanced.active {
            background: linear-gradient(45deg, #dbeafe, #bfdbfe);
            border-color: #3b82f6;
        }

        .route-progress-enhanced.completed {
            background: linear-gradient(45deg, #dcfce7, #bbf7d0);
            border-color: #10b981;
        }
</style>

<script>
    // Global variables
    let mainMap;
    let locationPickerMap;
    let markers = [];
    let routePolylines = [];
    let truckMarkers = [];
    let wasteBinMarkers = [];
    let markerCluster = null;
    let currentInfoWindow = null;
    let dotNetRef = null;
    let selectedRouteId = null;
    let userLocationMarker = null;
    let isDarkMode = false;
    let activeSimulations = {};
    let simulationIntervals = {};
    let directionsService = null;

    // Constants
    const DEFAULT_CENTER = { lat: 41.1634, lng: 27.7951 }; // Çorlu merkez
    const DEFAULT_ZOOM = 13;
    const FOCUS_ZOOM = 16;
    const DETAIL_ZOOM = 14;
    const DEFAULT_TILT = 67.5;
    const MAP_ID = '8b70db4a26fb9f4cd11929e3';
    const PRIMARY_COLOR = '#3B82F6';
    const RECYCLING_GREEN = "#10B981";
    const SIMULATION_SPEED_KMH = 40;

    // Utility function to validate and convert coordinates
    function safeCoordinate(coord) {
        if (!coord) return null;

        // Handle Google Maps LatLng objects
        if (typeof coord.lat === 'function' && typeof coord.lng === 'function') {
            const lat = coord.lat();
            const lng = coord.lng();
            if (isFinite(lat) && isFinite(lng) && lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180) {
                return { lat: lat, lng: lng };
            }
        }

        // Handle plain objects
        if (typeof coord.lat === 'number' && typeof coord.lng === 'number') {
            if (isFinite(coord.lat) && isFinite(coord.lng) &&
                coord.lat >= -90 && coord.lat <= 90 &&
                coord.lng >= -180 && coord.lng <= 180) {
                return { lat: coord.lat, lng: coord.lng };
            }
        }

        return null;
    }

    // Safe coordinate interpolation
    function interpolateCoordinates(start, end, progress) {
        const safeStart = safeCoordinate(start);
        const safeEnd = safeCoordinate(end);

        if (!safeStart || !safeEnd || !isFinite(progress)) {
            return safeStart || DEFAULT_CENTER;
        }

        progress = Math.max(0, Math.min(1, progress));

        return {
            lat: safeStart.lat + (safeEnd.lat - safeStart.lat) * progress,
            lng: safeStart.lng + (safeEnd.lng - safeStart.lng) * progress
        };
    }

    // Debounced progress update to prevent spam
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Dark mode detection and theme management
    function detectDarkMode() {
        isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ||
                   document.documentElement.classList.contains('dark');
        return isDarkMode;
    }

    if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            isDarkMode = e.matches || document.documentElement.classList.contains('dark');
            updateMapTheme();
        });
    }

    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const newDarkMode = document.documentElement.classList.contains('dark');
                if (newDarkMode !== isDarkMode) {
                    isDarkMode = newDarkMode;
                    updateMapTheme();
                }
            }
        });
    });

    observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
    });

    function updateMapTheme() {
        if (mainMap) {
            mainMap.setOptions({
                styles: getMapStyles()
            });
        }
        if (locationPickerMap) {
            locationPickerMap.setOptions({
                styles: getMapStyles()
            });
        }
    }

    function getMapStyles() {
        detectDarkMode();

        if (isDarkMode) {
            return [
                { elementType: "geometry", stylers: [{ color: "#0f0f0f" }] },
                { elementType: "labels.text.stroke", stylers: [{ color: "#0f0f0f" }] },
                { elementType: "labels.text.fill", stylers: [{ color: "#757575" }] },
                {
                    featureType: "administrative.locality",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#c4c4c4" }]
                },
                {
                    featureType: "poi",
                    elementType: "labels.text.fill",
                    stylers: [{ color: "#6b7280" }]
                },
                {
                    featureType: "poi.park",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#1a2e1a" }]
                },
                {
                    featureType: "road",
                    elementType: "geometry",
                    stylers: [{ color: "#1f1f1f" }]
                },
                {
                    featureType: "road.highway",
                    elementType: "geometry",
                    stylers: [{ color: "#2d2d2d" }]
                },
                {
                    featureType: "water",
                    elementType: "geometry.fill",
                    stylers: [{ color: "#0a1a2a" }]
                }
            ];
        } else {
            return [
                {
                    "featureType": "landscape.man_made",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#e8f0e4"}]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#c8e6c9"}]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#bbdefb"}]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry.fill",
                    "stylers": [{"color": "#ffffff"}]
                }
            ];
        }
    }

    // Enhanced icon creation functions
    function getDepotIcon(scale = 1.5) {
        const size = 45 * scale;
        const color = isDarkMode ? '#F59E0B' : '#D97706';
        const strokeColor = isDarkMode ? '#FBBF24' : '#B45309';

        const svg = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size + 16} ${size + 20}" width="${size + 16}" height="${size + 20}">
                <defs>
                    <filter id="shadow-depot" x="-50%" y="-50%" width="200%" height="200%">
                        <feDropShadow dx="0" dy="4" stdDeviation="6" flood-opacity="0.5"/>
                    </filter>
                    <radialGradient id="grad-depot" cx="30%" cy="30%" r="70%">
                        <stop offset="0%" style="stop-color:${color};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${strokeColor};stop-opacity:1" />
                    </radialGradient>
                </defs>
                <circle cx="${(size + 16) / 2}" cy="${size / 2 + 8}" r="${size / 2}"
                        fill="url(#grad-depot)"
                        stroke="white"
                        stroke-width="4"
                        opacity="0.95"
                        filter="url(#shadow-depot)"/>
                <path d="M${(size + 16) / 2},${size + 8} L${(size + 16) / 2 + 8},${size + 20} L${(size + 16) / 2 - 8},${size + 20} Z"
                      fill="url(#grad-depot)"
                      stroke="white"
                      stroke-width="3"/>
                <g transform="translate(${(size + 16) / 2}, ${size / 2 + 8}) scale(1.9) translate(-12,-12)">
                    <rect x="3" y="12" width="18" height="10" fill="white" opacity="0.95" rx="1"/>
                    <polygon points="12,4 3,10 21,10" fill="white" opacity="0.95"/>
                    <rect x="5" y="13" width="2" height="8" fill="${color}" opacity="0.8"/>
                    <rect x="9" y="13" width="2" height="8" fill="${color}" opacity="0.8"/>
                    <rect x="13" y="13" width="2" height="8" fill="${color}" opacity="0.8"/>
                    <rect x="17" y="13" width="2" height="8" fill="${color}" opacity="0.8"/>
                    <rect x="11" y="4" width="1.5" height="6" fill="white" opacity="0.9"/>
                    <polygon points="12.5,4 12.5,7 18,6 12.5,5" fill="#DC2626" opacity="0.9"/>
                    <rect x="10" y="17" width="4" height="4" fill="${color}" opacity="0.9" rx="0.5"/>
                    <rect x="6" y="14" width="1.5" height="1.5" fill="${color}" opacity="0.6"/>
                    <rect x="16" y="14" width="1.5" height="1.5" fill="${color}" opacity="0.6"/>
                </g>
            </svg>
        `;

        return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
    }

    function getTruckIcon(routeColor = '#4285F4', scale = 1.5) {
        const size = 36 * scale;
        const strokeColor = darkenColor(routeColor, 20);

        const svg = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size + 16} ${size + 20}" width="${size + 16}" height="${size + 20}">
                <defs>
                    <filter id="shadow-truck" x="-50%" y="-50%" width="200%" height="200%">
                        <feDropShadow dx="0" dy="3" stdDeviation="4" flood-opacity="0.4"/>
                    </filter>
                    <radialGradient id="grad-truck" cx="30%" cy="30%" r="70%">
                        <stop offset="0%" style="stop-color:${routeColor};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${strokeColor};stop-opacity:1" />
                    </radialGradient>
                </defs>
                <circle cx="${(size + 16) / 2}" cy="${size / 2 + 8}" r="${size / 2}"
                        fill="url(#grad-truck)"
                        stroke="white"
                        stroke-width="3"
                        opacity="0.95"
                        filter="url(#shadow-truck)"/>
                <path d="M${(size + 16) / 2},${size + 8} L${(size + 16) / 2 + 6},${size + 18} L${(size + 16) / 2 - 6},${size + 18} Z"
                      fill="url(#grad-truck)"
                      stroke="white"
                      stroke-width="2"/>
                <g transform="translate(${(size + 16) / 2 - 10}, ${size / 2 + 8 - 10}) scale(1.2)">
                    <rect x="2" y="8" width="12" height="8" fill="white" opacity="0.9" rx="1"/>
                    <rect x="14" y="10" width="6" height="6" fill="white" opacity="0.9" rx="1"/>
                    <rect x="3" y="9" width="4" height="3" fill="${routeColor}" opacity="0.7"/>
                    <rect x="15" y="11" width="3" height="3" fill="${routeColor}" opacity="0.7"/>
                    <circle cx="5" cy="17" r="1.5" fill="white" opacity="0.9"/>
                    <circle cx="11" cy="17" r="1.5" fill="white" opacity="0.9"/>
                    <circle cx="17" cy="17" r="1.5" fill="white" opacity="0.9"/>
                </g>
            </svg>
        `;

        return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
    }

    function getWasteBinIcon(status, fillLevel, opacity = 1, scale = 1.8) {
        let fillColor, strokeColor;

        if (fillLevel >= 90) {
            fillColor = '#EF4444';
            strokeColor = '#B91C1C';
        } else if (fillLevel >= 70) {
            fillColor = '#F97316';
            strokeColor = '#C2410C';
        } else if (fillLevel >= 50) {
            fillColor = '#F59E0B';
            strokeColor = '#B45309';
        } else if (fillLevel >= 30) {
            fillColor = PRIMARY_COLOR;
            strokeColor = '#1D4ED8';
        } else {
            fillColor = '#10B981';
            strokeColor = '#059669';
        }

        if (status === 'Inactive') {
            fillColor = '#9CA3AF';
            strokeColor = '#6B7280';
        }

        const size = 32 * scale;
        const iconSize = 16 * scale;

        const svg = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size + 12} ${size + 16}" width="${size + 12}" height="${size + 16}">
                <defs>
                    <filter id="shadow-bin" x="-50%" y="-50%" width="200%" height="200%">
                        <feDropShadow dx="0" dy="3" stdDeviation="4" flood-opacity="0.4"/>
                    </filter>
                    <radialGradient id="grad-bin" cx="50%" cy="30%" r="70%">
                        <stop offset="0%" style="stop-color:${fillColor};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${strokeColor};stop-opacity:1" />
                    </radialGradient>
                </defs>
                <circle cx="${(size + 12) / 2}" cy="${size / 2 + 6}" r="${size / 2}"
                        fill="url(#grad-bin)"
                        stroke="white"
                        stroke-width="3"
                        opacity="${opacity}"
                        filter="url(#shadow-bin)"/>
                <path d="M${(size + 12) / 2},${size + 6} L${(size + 12) / 2 + 6},${size + 16} L${(size + 12) / 2 - 6},${size + 16} Z"
                      fill="url(#grad-bin)"
                      stroke="white"
                      stroke-width="2"/>
                <g transform="translate(${(size + 12) / 2 - iconSize / 2}, ${size / 2 + 6 - iconSize / 2}) scale(${iconSize / 16})">
                    <rect x="2" y="5" width="12" height="9" rx="1" fill="white" opacity="0.9"/>
                    <rect x="1" y="4" width="14" height="2" rx="1" fill="white" opacity="0.9"/>
                    <rect x="6" y="2" width="4" height="3" rx="1" fill="white" opacity="0.7"/>
                    <rect x="3" y="${14 - (fillLevel / 100) * 8}" width="10" height="${(fillLevel / 100) * 8}"
                          fill="${fillColor}" opacity="0.3" rx="0.5"/>
                    <ellipse cx="8" cy="3" rx="1" ry="0.5" fill="white" opacity="0.8"/>
                </g>
            </svg>
        `;

        return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
    }

    function darkenColor(color, percent) {
        const hex = color.replace('#', '');
        const num = parseInt(hex, 16);
        const amt = Math.round(2.55 * percent);
        const R = Math.max(0, Math.min(255, (num >> 16) - amt));
        const G = Math.max(0, Math.min(255, (num >> 8 & 0x00FF) - amt));
        const B = Math.max(0, Math.min(255, (num & 0x0000FF) - amt));
        return "#" + (0x1000000 + R * 0x10000 + G * 0x100 + B).toString(16).slice(1);
    }

    // Initialize Google Maps integration
    window.initializeGoogleMaps = function (reference) {
        dotNetRef = reference;
        detectDarkMode();
        console.log("Google Maps initialization started");
    };

    // Main object containing all Google Maps related functions
    window.googleMapsInterop = {
        initializeMainMap: function () {
            const mapElementId = "admin-observer-map";
            console.log("Initializing main map in element:", mapElementId);

            const mapElement = document.getElementById(mapElementId);
            if (!mapElement) {
                console.error("Main map element not found:", mapElementId);
                return false;
            }

            const hideLoading = () => {
                const loadingIndicator = document.getElementById('map-loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.style.opacity = '0';
                    setTimeout(() => {
                        loadingIndicator.style.display = 'none';
                    }, 500);
                }
            };

            try {
                mainMap = new google.maps.Map(mapElement, {
                    center: DEFAULT_CENTER,
                    zoom: DEFAULT_ZOOM,
                    tilt: DEFAULT_TILT,
                    heading: 0,
                    mapTypeId: 'roadmap',
                    mapId: MAP_ID,
                    streetViewControl: false,
                    mapTypeControl: false,
                    rotateControl: true,
                    zoomControl: true,
                    fullscreenControl: true,
                    styles: getMapStyles()
                });

                // Initialize Directions Service
                directionsService = new google.maps.DirectionsService();

                this.add3DToggle(mainMap);
                this.addUserLocationButton(mainMap);

                google.maps.event.addListenerOnce(mainMap, 'tilesloaded', () => {
                    hideLoading();
                    if (dotNetRef) {
                        dotNetRef.invokeMethodAsync('OnMapInitialized');
                    }
                });

                return true;
            } catch (error) {
                console.error("Error initializing main map:", error);
                hideLoading();
                return false;
            }
        },

        add3DToggle: function (map) {
            const toggleButton = document.createElement('button');
            toggleButton.className = 'custom-map-control-button toggle-view-button';
            toggleButton.innerHTML = '<i class="fas fa-cube"></i> 3D';
            toggleButton.title = 'Toggle 2D/3D view';

            let is3DMode = true;

            toggleButton.addEventListener('click', () => {
                if (is3DMode) {
                    map.setTilt(0);
                    toggleButton.innerHTML = '<i class="fas fa-map"></i> 2D';
                } else {
                    map.setTilt(DEFAULT_TILT);
                    toggleButton.innerHTML = '<i class="fas fa-cube"></i> 3D';
                }
                is3DMode = !is3DMode;
            });

            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(toggleButton);

            const style = document.createElement('style');
            style.textContent = `
                .toggle-view-button {
                    background-color: ${isDarkMode ? '#1F2937' : '#fff'};
                    border: 2px solid ${isDarkMode ? '#374151' : '#fff'};
                    border-radius: 6px;
                    box-shadow: 0 3px 8px rgba(0,0,0,.2);
                    color: ${isDarkMode ? '#E5E7EB' : '#555'};
                    cursor: pointer;
                    font-family: 'Inter', -apple-system, sans-serif;
                    font-size: 14px;
                    font-weight: 500;
                    margin: 10px;
                    padding: 10px 16px;
                    text-align: center;
                    transition: all 0.3s ease;
                }
                .toggle-view-button:hover {
                    background-color: ${isDarkMode ? '#374151' : '#f8f9fa'};
                    transform: translateY(-1px);
                    box-shadow: 0 4px 12px rgba(0,0,0,.25);
                }
            `;
            document.head.appendChild(style);
        },

        addUserLocationButton: function (map) {
            const locationButton = document.createElement('button');
            locationButton.className = 'custom-map-control-button location-button';
            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
            locationButton.title = 'Show my location';

            locationButton.addEventListener('click', () => {
                if (navigator.geolocation) {
                    locationButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            if (userLocationMarker) {
                                userLocationMarker.setMap(null);
                            }

                            userLocationMarker = new google.maps.Marker({
                                position: pos,
                                map: map,
                                icon: {
                                    path: google.maps.SymbolPath.CIRCLE,
                                    fillColor: PRIMARY_COLOR,
                                    fillOpacity: 1,
                                    strokeColor: '#FFFFFF',
                                    strokeWeight: 3,
                                    scale: 10,
                                },
                                title: 'Your Location',
                                animation: google.maps.Animation.DROP
                            });

                            this.smoothPanTo(map, pos);
                            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
                        },
                        () => {
                            console.error('Geolocation failed');
                            locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
                        }
                    );
                }
            });

            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
        },

        initializeStartPointMap: function() {
            const mapElement = document.getElementById("start-point-mini-map");
            if (!mapElement) {
                console.log("Start point mini map element not found");
                return false;
            }

            try {
                const startPointMap = new google.maps.Map(mapElement, {
                    center: DEFAULT_CENTER,
                    zoom: 14,
                    mapTypeId: 'roadmap',
                    disableDefaultUI: true,
                    draggable: false,
                    scrollwheel: false,
                    disableDoubleClickZoom: true,
                    styles: getMapStyles()
                });

                new google.maps.Marker({
                    position: DEFAULT_CENTER,
                    map: startPointMap,
                    icon: {
                        url: getDepotIcon(1.0),
                        scaledSize: new google.maps.Size(50, 60),
                        anchor: new google.maps.Point(25, 56)
                    },
                    title: 'Çorlu Belediyesi (Başlangıç Noktası)'
                });

                return true;
            } catch (error) {
                console.error("Error initializing start point map:", error);
                return false;
            }
        },

        showAllRoutes: function(routesJson, wasteBinsJson) {
            if (!mainMap) {
                console.error("Main map not initialized");
                return false;
            }

            this.clearMarkers();
            this.clearPolylines();
            this.clearWasteBinMarkers();

            try {
                const routes = JSON.parse(routesJson);
                const wasteBins = wasteBinsJson ? JSON.parse(wasteBinsJson) : null;

                console.log(`Showing ${routes.length} routes on map`);

                if (wasteBins && wasteBins.length > 0) {
                    this.showWasteBins(wasteBins);
                }

                const bounds = new google.maps.LatLngBounds();
                bounds.extend(DEFAULT_CENTER);

                // ✅ Fixed: Single consistent color per route
                const colors = ['#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8E24AA', '#16A085', '#E67E22', '#E74C3C', '#2980B9', '#27AE60'];

                routes.forEach((route, routeIndex) => {
                    if (route.status === 'Completed' || route.Status === 'Completed' ||
                        route.status === 2 || route.Status === 2) return;

                    if (!route.steps || route.steps.length === 0) return;

                    const routeColor = colors[routeIndex % colors.length]; // ✅ Consistent color for entire route
                    let path = null;

                    if (route.overviewPolyline) {
                        try {
                            path = google.maps.geometry.encoding.decodePath(route.overviewPolyline);
                            if (!path || path.length === 0) {
                                path = null;
                            }
                        } catch (error) {
                            path = null;
                        }
                    }

                    if (!path || path.length === 0) {
                        if (route.steps && route.steps.length > 0) {
                            path = route.steps.filter(step =>
                                step.latitude && step.longitude &&
                                isFinite(step.latitude) && isFinite(step.longitude)
                            ).map(step => ({
                                lat: step.latitude,
                                lng: step.longitude
                            }));

                            if (path.length > 0) {
                                path.unshift(DEFAULT_CENTER);
                                path.push(DEFAULT_CENTER); // ✅ Return to depot
                            } else {
                                path = [DEFAULT_CENTER];
                            }
                        } else {
                            return;
                        }
                    }

                    try {
                        const routePolyline = new google.maps.Polyline({
                            path: path,
                            geodesic: true,
                            strokeColor: routeColor, // ✅ Use consistent color
                            strokeOpacity: 0.7,
                            strokeWeight: 4
                        });

                        routePolyline.setMap(mainMap);
                        routePolylines.push(routePolyline);

                        // Store route color for simulation consistency
                        route._simulationColor = routeColor;

                        // Add click event to polyline to show route info
                        routePolyline.addListener('click', (event) => {
                            this.focusRouteOnMap(route.id);
                        });

                        if (path && path.length > 0) {
                            const vehicleMarker = new google.maps.Marker({
                                position: path[0],
                                map: mainMap,
                                icon: {
                                    url: getTruckIcon(routeColor, 1.0), // ✅ Use consistent color
                                    scaledSize: new google.maps.Size(36, 43),
                                    anchor: new google.maps.Point(18, 39)
                                },
                                title: `Route ${route.id} - ${route.wasteType}`,
                                routeId: route.id,
                                routeData: route
                            });

                            truckMarkers.push(vehicleMarker);

                            vehicleMarker.addListener('click', () => {
                                this.focusRouteOnMap(route.id);
                            });
                        }

                        path.forEach(point => {
                            if (point && point.lat && point.lng &&
                                isFinite(point.lat) && isFinite(point.lng)) {
                                bounds.extend(point);
                            }
                        });
                    } catch (error) {
                        console.error("Error creating polyline for route:", route.id, error);
                    }
                });

                // Add depot marker
                const depotMarker = new google.maps.Marker({
                    position: DEFAULT_CENTER,
                    map: mainMap,
                    icon: {
                        url: getDepotIcon(1.5),
                        scaledSize: new google.maps.Size(75, 90),
                        anchor: new google.maps.Point(37.5, 84)
                    },
                    title: 'Çorlu Belediyesi (Araç Deposu)',
                    zIndex: 1000
                });

                markers.push(depotMarker);

                if (bounds.isEmpty()) {
                    mainMap.setCenter(DEFAULT_CENTER);
                    mainMap.setZoom(DEFAULT_ZOOM);
                } else {
                    mainMap.fitBounds(bounds);
                    google.maps.event.addListenerOnce(mainMap, 'bounds_changed', function() {
                        if (mainMap.getZoom() > 15) {
                            mainMap.setZoom(15);
                        }
                    });
                }

                return true;
            } catch (error) {
                console.error("Error showing routes on map:", error);
                return false;
            }
        },

        // Generate real road path using Google Directions API
        generateRealRoutePath: async function(routeSteps) {
            if (!directionsService || !routeSteps || routeSteps.length === 0) {
                return null;
            }

            try {
                // Create waypoints from route steps
                const waypoints = routeSteps
                    .filter(step => step.latitude && step.longitude &&
                           isFinite(step.latitude) && isFinite(step.longitude))
                    .map(step => ({
                        location: new google.maps.LatLng(step.latitude, step.longitude),
                        stopover: true
                    }));

                if (waypoints.length === 0) {
                    return null;
                }

                const origin = DEFAULT_CENTER;
                const destination = DEFAULT_CENTER; // ✅ Return to depot
                const intermediateWaypoints = waypoints;

                return new Promise((resolve, reject) => {
                    directionsService.route({
                        origin: origin,
                        destination: destination,
                        waypoints: intermediateWaypoints.slice(0, 23), // Google limits to 23 waypoints
                        travelMode: google.maps.TravelMode.DRIVING,
                        avoidTolls: false,
                        avoidHighways: false,
                        optimizeWaypoints: true // ✅ Route optimization
                    }, (result, status) => {
                        if (status === google.maps.DirectionsStatus.OK) {
                            // Extract detailed path from directions result
                            const detailedPath = [];
                            const route = result.routes[0];

                            route.legs.forEach(leg => {
                                leg.steps.forEach(step => {
                                    const stepPath = google.maps.geometry.encoding.decodePath(step.polyline.points);
                                    detailedPath.push(...stepPath);
                                });
                            });

                            resolve({
                                path: detailedPath,
                                waypoints: waypoints,
                                directionsResult: result
                            });
                        } else {
                            console.warn('Directions request failed:', status);
                            resolve(null);
                        }
                    });
                });
            } catch (error) {
                console.error('Error generating real route path:', error);
                return null;
            }
        },

        // ✅ Optimized simulation with performance improvements
        startRouteSimulation: async function(routeId, routeData) {
            if (activeSimulations[routeId]) {
                console.log(`Simulation already running for route ${routeId}`);
                return false;
            }

            try {
                const route = JSON.parse(routeData);
                if (!route.steps || route.steps.length === 0) {
                    console.error('Route has no steps for simulation');
                    return false;
                }

                // Generate real road path
                console.log('Generating optimized route path for:', routeId);
                const routePathData = await this.generateRealRoutePath(route.steps);

                let path = [];
                let waypoints = [];

                if (routePathData && routePathData.path && routePathData.path.length > 1) {
                    path = routePathData.path.map(p => safeCoordinate(p)).filter(p => p);
                    waypoints = routePathData.waypoints;
                    console.log(`✅ Optimized route generated with ${path.length} points`);
                } else {
                    // Fallback path
                    console.warn('⚠️ Using fallback path');
                    path = route.steps
                        .filter(step => step.latitude && step.longitude &&
                               isFinite(step.latitude) && isFinite(step.longitude))
                        .map(step => ({
                            lat: step.latitude,
                            lng: step.longitude
                        }));

                    if (path.length > 0) {
                        path.unshift(DEFAULT_CENTER);
                        path.push(DEFAULT_CENTER); // ✅ Return to depot
                    }
                }

                if (path.length < 2) {
                    console.error('Insufficient coordinates for simulation');
                    return false;
                }

                // Use consistent route color
                const routeColor = route._simulationColor || '#FF6B35';

                // Create simulation vehicle marker
                const simulationMarker = new google.maps.Marker({
                    position: path[0],
                    map: mainMap,
                    icon: {
                        url: getTruckIcon(routeColor, 1.6),
                        scaledSize: new google.maps.Size(65, 78),
                        anchor: new google.maps.Point(32.5, 74)
                    },
                    title: `🚛 Simülasyon - ${route.routeName || 'Rota'}`,
                    zIndex: 2000
                });

                // Create polylines with consistent color
                const traveledPath = new google.maps.Polyline({
                    path: [path[0]],
                    geodesic: true,
                    strokeColor: '#28a745',
                    strokeOpacity: 0.9,
                    strokeWeight: 8,
                    zIndex: 100
                });
                traveledPath.setMap(mainMap);

                const remainingPath = new google.maps.Polyline({
                    path: path,
                    geodesic: true,
                    strokeColor: routeColor,
                    strokeOpacity: 0.6,
                    strokeWeight: 6,
                    zIndex: 50
                });
                remainingPath.setMap(mainMap);

                // ✅ Calculate smooth progress parameters
                const totalDistance = route.totalDistanceKm || 10;
                const baseSpeed = SIMULATION_SPEED_KMH;
                let currentSpeed = 1;

                const intervalMs = 200; // ✅ Longer interval for better performance
                const totalSimulationTime = Math.max(30000, totalDistance * 1000); // Min 30 seconds
                const totalSteps = Math.floor(totalSimulationTime / intervalMs);

                let currentStep = 0;
                let currentPathIndex = 0;
                let completedRouteSteps = 0;

                // Store simulation data
                activeSimulations[routeId] = {
                    marker: simulationMarker,
                    traveledPath: traveledPath,
                    remainingPath: remainingPath,
                    route: route,
                    path: path,
                    waypoints: waypoints,
                    currentStep: currentStep,
                    totalSteps: totalSteps,
                    isRunning: true,
                    speed: currentSpeed,
                    completedRouteSteps: completedRouteSteps,
                    lastStepTime: 0,
                    currentProgress: 0 // ✅ Track smooth progress
                };

                // 3D focus and camera settings
                mainMap.setTilt(67.5);
                mainMap.setHeading(0);
                mainMap.setZoom(17);
                mainMap.panTo(path[0]);

                setTimeout(() => {
                    mainMap.setTilt(67.5);
                    mainMap.setZoom(16);
                }, 500);

                // Show simulation start notification
                if (dotNetRef) {
                    dotNetRef.invokeMethodAsync('ShowToastFromJs', '🚀 Rota simülasyonu başlatıldı!');
                    dotNetRef.invokeMethodAsync('OnSimulationStarted', routeId);
                }

                // ✅ Debounced progress update to prevent spam
                const debouncedProgressUpdate = debounce((routeId, progress, steps) => {
                    this.updateSimulationProgress(routeId, progress, steps);
                }, 100);

                // Start simulation interval
                simulationIntervals[routeId] = setInterval(async () => {
                    const simulation = activeSimulations[routeId];
                    if (!simulation || !simulation.isRunning) {
                        return;
                    }

                    // Update current step
                    simulation.currentStep += simulation.speed;
                    const pathProgress = (simulation.currentStep / simulation.totalSteps) * path.length;
                    currentPathIndex = Math.min(Math.floor(pathProgress), path.length - 1);

                    if (currentPathIndex >= path.length - 1) {
                        this.completeSimulation(routeId);
                        return;
                    }

                    // Calculate current position with safe interpolation
                    let currentPosition = path[currentPathIndex];

                    if (currentPathIndex < path.length - 1) {
                        const segmentProgress = pathProgress - currentPathIndex;
                        currentPosition = interpolateCoordinates(
                            path[currentPathIndex],
                            path[currentPathIndex + 1],
                            segmentProgress
                        );
                    }

                    // Validate and set marker position
                    const safePosition = safeCoordinate(currentPosition);
                    if (safePosition) {
                        try {
                            simulationMarker.setPosition(safePosition);
                        } catch (error) {
                            console.error('Error setting marker position:', error);
                            return;
                        }
                    }

                    // Update polylines
                    const traveledSegment = path.slice(0, currentPathIndex + 1);
                    if (currentPathIndex < path.length - 1 && safePosition) {
                        traveledSegment.push(safePosition);
                    }

                    try {
                        traveledPath.setPath(traveledSegment);
                        remainingPath.setPath(path.slice(currentPathIndex));
                    } catch (error) {
                        console.error('Error updating polylines:', error);
                    }

                    // ✅ Smooth progress calculation (0-100%)
                    const currentProgress = Math.min((simulation.currentStep / simulation.totalSteps) * 100, 100);
                    simulation.currentProgress = currentProgress;

                    // Step completion logic based on route steps
                    const totalRouteSteps = route.steps.length;
                    const expectedCompletedSteps = Math.floor((currentProgress / 100) * totalRouteSteps);

                    if (expectedCompletedSteps > simulation.completedRouteSteps &&
                        (Date.now() - simulation.lastStepTime) > 3000) {

                        simulation.completedRouteSteps = expectedCompletedSteps;
                        simulation.lastStepTime = Date.now();

                        try {
                            await dotNetRef.invokeMethodAsync('CompleteNextSimulationStep', routeId);

                            // Step completion notification
                            const stepNumber = expectedCompletedSteps;
                            if (stepNumber === 1) {
                                dotNetRef.invokeMethodAsync('ShowToastFromJs', `🚀 ${stepNumber}. adım: Başlangıç noktasından ayrıldı`);
                            } else if (stepNumber === totalRouteSteps) {
                                dotNetRef.invokeMethodAsync('ShowToastFromJs', `🏁 ${stepNumber}. adım: Başlangıç noktasına döndü!`);
                            } else {
                                const stepInfo = route.steps[stepNumber - 1];
                                const address = stepInfo?.address || `${stepNumber}. Durak`;
                                dotNetRef.invokeMethodAsync('ShowToastFromJs', `📍 ${stepNumber}. adım: ${address} tamamlandı`);
                            }
                        } catch (error) {
                            console.error('Error completing simulation step:', error);
                        }
                    }

                    // ✅ Update progress smoothly
                    debouncedProgressUpdate(routeId, currentProgress, simulation.completedRouteSteps);

                    // ✅ Optimized camera tracking (less frequent updates)
                    if (simulation.currentStep % 15 === 0 && safePosition) {
                        // Calculate heading based on movement
                        if (currentPathIndex > 0 && currentPathIndex < path.length - 1) {
                            try {
                                const prevPoint = safeCoordinate(path[currentPathIndex - 1]);
                                const nextPoint = safeCoordinate(path[currentPathIndex + 1]);
                                if (prevPoint && nextPoint) {
                                    const heading = google.maps.geometry.spherical.computeHeading(prevPoint, nextPoint);
                                    if (isFinite(heading)) {
                                        mainMap.setHeading(heading);
                                    }
                                }
                            } catch (error) {
                                console.error('Error calculating heading:', error);
                            }
                        }

                        // Smooth camera follow
                        try {
                            mainMap.panTo(safePosition);

                            // Maintain 3D view
                            if (mainMap.getTilt() < 60) {
                                mainMap.setTilt(67.5);
                            }
                        } catch (error) {
                            console.error('Error updating camera:', error);
                        }
                    }

                }, intervalMs);

                return true;
            } catch (error) {
                console.error('Error starting route simulation:', error);
                return false;
            }
        },

        updateSimulationSpeed: function(routeId, newSpeed) {
            if (activeSimulations[routeId]) {
                activeSimulations[routeId].speed = Math.max(0.1, Math.min(10, newSpeed));

                // Update speed display
                const speedDisplay = document.getElementById(`speed-display-${routeId}`);
                if (speedDisplay) {
                    speedDisplay.textContent = `${newSpeed}x`;
                }

                // Show speed change notification
                if (dotNetRef) {
                    dotNetRef.invokeMethodAsync('ShowToastFromJs', `⚡ Simülasyon hızı ${newSpeed}x olarak ayarlandı`);
                }
            }
        },

        completeSimulation: function(routeId) {
            if (!activeSimulations[routeId]) return;

            const simulation = activeSimulations[routeId];
            simulation.isRunning = false;

            // Clear interval
            if (simulationIntervals[routeId]) {
                clearInterval(simulationIntervals[routeId]);
                delete simulationIntervals[routeId];
            }

            // Complete all remaining steps in database
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('CompleteRouteSimulation', routeId);
            }

            // Update marker to show completion
            simulation.marker.setIcon({
                url: getTruckIcon('#28a745', 1.4),
                scaledSize: new google.maps.Size(55, 66),
                anchor: new google.maps.Point(27.5, 62)
            });

            // ✅ Final progress update
            this.updateSimulationProgress(routeId, 100, simulation.route.steps.length);

            // Show completion notification
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('ShowToastFromJs', '🎉 Rota simülasyonu başarıyla tamamlandı!');
                dotNetRef.invokeMethodAsync('OnSimulationCompleted', routeId);
            }

            // Clean up after 5 seconds
            setTimeout(() => {
                this.cleanupSimulation(routeId);
            }, 5000);
        },

        stopSimulation: function(routeId) {
            if (!activeSimulations[routeId]) return false;

            const simulation = activeSimulations[routeId];
            simulation.isRunning = false;

            if (simulationIntervals[routeId]) {
                clearInterval(simulationIntervals[routeId]);
                delete simulationIntervals[routeId];
            }

            // Show stop notification
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('ShowToastFromJs', '⏹️ Rota simülasyonu durduruldu');
                dotNetRef.invokeMethodAsync('OnSimulationStopped', routeId);
            }

            this.cleanupSimulation(routeId);
            return true;
        },

        cleanupSimulation: function(routeId) {
            if (!activeSimulations[routeId]) return;

            const simulation = activeSimulations[routeId];

            // Remove markers and polylines safely
            try {
                if (simulation.marker) simulation.marker.setMap(null);
                if (simulation.traveledPath) simulation.traveledPath.setMap(null);
                if (simulation.remainingPath) simulation.remainingPath.setMap(null);
            } catch (error) {
                console.error('Error cleaning up simulation:', error);
            }

            // Clear from active simulations
            delete activeSimulations[routeId];

            // Refresh the route data
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('RefreshData');
            }
        },

        // ✅ Optimized progress update with error handling
        updateSimulationProgress: function(routeId, progress, completedSteps) {
            const safeProgress = Math.max(0, Math.min(100, progress || 0));

            try {
                // Update progress circle
                const progressCircle = document.getElementById(`progress-circle-${routeId}`);
                if (progressCircle) {
                    progressCircle.setAttribute('stroke-dasharray', `${safeProgress}, 100`);
                }

                // Update progress text
                const progressText = document.getElementById(`progress-text-${routeId}`);
                if (progressText) {
                    progressText.textContent = `${Math.round(safeProgress)}%`;
                }

                // Update progress bar
                const progressBar = document.getElementById(`progress-bar-${routeId}`);
                if (progressBar) {
                    progressBar.style.width = `${safeProgress}%`;

                    // Update color based on progress
                    const colorClass = safeProgress >= 100 ? 'bg-green-500' :
                                     safeProgress >= 75 ? 'bg-blue-500' :
                                     safeProgress >= 50 ? 'bg-yellow-500' : 'bg-red-500';
                    progressBar.className = `${colorClass} h-2.5 rounded-full transition-all duration-500 ease-in-out`;
                }

                // Update step counts
                const completedStepsEl = document.getElementById(`completed-steps-${routeId}`);
                if (completedStepsEl) {
                    completedStepsEl.textContent = `${completedSteps || 0} adet`;
                }

                const remainingStepsEl = document.getElementById(`remaining-steps-${routeId}`);
                if (remainingStepsEl) {
                    const totalSteps = activeSimulations[routeId]?.route?.steps?.length || 0;
                    remainingStepsEl.textContent = `${Math.max(0, totalSteps - (completedSteps || 0))} adet`;
                }

                // Update simulation status
                const statusEl = document.getElementById(`simulation-status-${routeId}`);
                if (statusEl) {
                    if (safeProgress >= 100) {
                        statusEl.textContent = 'Simülasyon tamamlandı!';
                        statusEl.className = 'text-green-600 font-semibold';
                    } else {
                        statusEl.textContent = `${Math.round(safeProgress)}% tamamlandı - ${completedSteps || 0} adım`;
                        statusEl.className = 'text-blue-600 font-medium';
                    }
                }

                // ✅ CSS class based selectors
                const progressElements = document.querySelectorAll(`[data-route-id="${routeId}"]`);
                progressElements.forEach(element => {
                    if (element.classList.contains('progress-bar')) {
                        element.style.width = `${safeProgress}%`;
                    } else if (element.classList.contains('progress-text')) {
                        element.textContent = `${Math.round(safeProgress)}%`;
                    } else if (element.classList.contains('step-counter')) {
                        element.textContent = `${completedSteps} / ${activeSimulations[routeId]?.route?.steps?.length || 0}`;
                    }
                });

                // ✅ Window event dispatch for C# to catch
                window.dispatchEvent(new CustomEvent('simulationProgressUpdate', {
                    detail: {
                        routeId: routeId,
                        progress: safeProgress,
                        completedSteps: completedSteps,
                        totalSteps: activeSimulations[routeId]?.route?.steps?.length || 0
                    }
                }));
            } catch (error) {
                console.error('Error updating simulation progress:', error);
            }
        },

        showWasteBins: function(wasteBins) {
            if (!mainMap || !wasteBins || wasteBins.length === 0) return false;

            const markers = [];
            wasteBins.forEach(bin => {
                if (bin.latitude && bin.longitude &&
                    isFinite(bin.latitude) && isFinite(bin.longitude)) {
                    const position = { lat: bin.latitude, lng: bin.longitude };

                    const marker = new google.maps.Marker({
                        position: position,
                        icon: {
                            url: getWasteBinIcon(bin.deviceStatus || 'Active', bin.fillLevel || 0, 0.8, 1.0),
                            scaledSize: new google.maps.Size(40, 46),
                            anchor: new google.maps.Point(20, 44)
                        },
                        title: `${bin.label} - ${bin.fillLevel || 0}% dolu`,
                        opacity: 0.8
                    });

                    const infoWindow = new google.maps.InfoWindow({
                        content: this.createBinInfoContent(bin)
                    });

                    marker.addListener('click', () => {
                        if (currentInfoWindow) {
                            currentInfoWindow.close();
                        }
                        infoWindow.open(mainMap, marker);
                        currentInfoWindow = infoWindow;
                    });

                    markers.push(marker);
                    wasteBinMarkers.push(marker);
                }
            });

            this.createMarkerClusterer(markers);
            return true;
        },

        createMarkerClusterer: function(markers) {
            try {
                if (markerCluster) {
                    markerCluster.clearMarkers();
                    markerCluster = null;
                }

                if (markers.length > 0) {
                    const clusterStyles = [
                        {
                            textColor: 'white',
                            url: this.createClusterIcon(35, RECYCLING_GREEN),
                            height: 35,
                            width: 35,
                            textSize: 11
                        },
                        {
                            textColor: 'white',
                            url: this.createClusterIcon(45, '#F59E0B'),
                            height: 45,
                            width: 45,
                            textSize: 13
                        },
                        {
                            textColor: 'white',
                            url: this.createClusterIcon(55, '#EF4444'),
                            height: 55,
                            width: 55,
                            textSize: 15
                        }
                    ];

                    if (window.markerClusterer && window.markerClusterer.MarkerClusterer) {
                        markerCluster = new window.markerClusterer.MarkerClusterer({
                            map: mainMap,
                            markers: markers
                        });
                    } else if (window.MarkerClusterer) {
                        markerCluster = new window.MarkerClusterer(mainMap, markers, {
                            styles: clusterStyles
                        });
                    } else {
                        markers.forEach(marker => marker.setMap(mainMap));
                    }
                }
            } catch (error) {
                console.warn("Error creating marker clusterer:", error);
                markers.forEach(marker => marker.setMap(mainMap));
            }
        },

        createClusterIcon: function(size, color) {
            const svg = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" width="${size}" height="${size}">
                    <defs>
                        <filter id="shadow-${size}" x="-50%" y="-50%" width="200%" height="200%">
                            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3"/>
                        </filter>
                        <radialGradient id="grad-${size}" cx="30%" cy="30%" r="70%">
                            <stop offset="0%" style="stop-color:${color};stop-opacity:1" />
                            <stop offset="100%" style="stop-color:${this.darkenColor(color, 20)};stop-opacity:1" />
                        </radialGradient>
                    </defs>
                    <circle cx="${size/2}" cy="${size/2}" r="${size/2-2}"
                            fill="url(#grad-${size})"
                            stroke="white"
                            stroke-width="3"
                            opacity="0.95"
                            filter="url(#shadow-${size})"/>
                </svg>
            `;
            return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
        },

        darkenColor: function(color, percent) {
            const hex = color.replace('#', '');
            const num = parseInt(hex, 16);
            const amt = Math.round(2.55 * percent);
            const R = Math.max(0, Math.min(255, (num >> 16) - amt));
            const G = Math.max(0, Math.min(255, (num >> 8 & 0x00FF) - amt));
            const B = Math.max(0, Math.min(255, (num & 0x0000FF) - amt));
            return "#" + (0x1000000 + R * 0x10000 + G * 0x100 + B).toString(16).slice(1);
        },

        createBinInfoContent: function(bin) {
            const getFillLevelColor = (level) => {
                if (!level) return '#6B7280';
                if (level >= 90) return '#EF4444';
                if (level >= 70) return '#F97316';
                if (level >= 50) return '#F59E0B';
                return '#10B981';
            };

            return `
                <div style="padding: 12px; max-width: 280px; font-family: Arial, sans-serif;">
                    <div style="font-weight: bold; font-size: 16px; margin-bottom: 8px; color: #1F2937;">
                        ${bin.label}
                    </div>
                    <div style="margin-bottom: 6px; font-size: 14px; color: #6B7280;">
                        ${bin.address}
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 8px;">
                        <span style="margin-right: 8px; font-size: 14px; color: #6B7280;">Doluluk:</span>
                        <span style="font-weight: bold; color: ${getFillLevelColor(bin.fillLevel)};">
                            ${bin.fillLevel || 0}%
                        </span>
                    </div>
                    <div style="width: 100%; height: 8px; background-color: #E5E7EB; border-radius: 4px; overflow: hidden;">
                        <div style="height: 100%; background-color: ${getFillLevelColor(bin.fillLevel)}; width: ${bin.fillLevel || 0}%; transition: width 0.3s ease;"></div>
                    </div>
                </div>
            `;
        },

        smoothPanTo: function (map, position) {
            const safePos = safeCoordinate(position);
            if (!safePos) {
                console.error("Invalid coordinates for smoothPanTo:", position);
                return;
            }

            try {
                const currentCenter = map.getCenter();
                const currentLat = currentCenter.lat();
                const currentLng = currentCenter.lng();
                const targetLat = safePos.lat;
                const targetLng = safePos.lng;

                const frames = 60;
                let frame = 0;

                const animate = () => {
                    if (frame >= frames) {
                        try {
                            map.panTo(safePos);
                        } catch (e) {
                            console.error("Error in final panTo:", e);
                        }
                        return;
                    }

                    const t = frame / frames;
                    const progress = t < 0.5 ?
                        4 * t * t * t :
                        1 - Math.pow(-2 * t + 2, 3) / 2;

                    const lat = currentLat + (targetLat - currentLat) * progress;
                    const lng = currentLng + (targetLng - currentLng) * progress;

                    const intermediatePos = { lat, lng };
                    const safeIntermediate = safeCoordinate(intermediatePos);
                    if (safeIntermediate) {
                        try {
                            map.panTo(safeIntermediate);
                        } catch (e) {
                            console.error("Error during animation panTo:", e);
                            return;
                        }
                    }

                    frame++;
                    requestAnimationFrame(animate);
                };

                animate();
            } catch (error) {
                console.error("Error in smoothPanTo:", error);
                map.panTo(safePos);
            }
        },

        focusRouteOnMap: function(routeId) {
            const marker = truckMarkers.find(m => m.routeId === routeId);
            if (!marker) return false;

            try {
                const position = marker.getPosition();
                const safePos = safeCoordinate(position);
                if (safePos) {
                    mainMap.setCenter(safePos);
                    mainMap.setZoom(FOCUS_ZOOM);

                    marker.setAnimation(google.maps.Animation.BOUNCE);
                    setTimeout(() => {
                        marker.setAnimation(null);
                    }, 1500);
                }

                // Trigger route expansion in table
                if (dotNetRef) {
                    dotNetRef.invokeMethodAsync('FocusRouteOnMap', routeId);
                }

                return true;
            } catch (error) {
                console.error("Error focusing route on map:", error);
                return false;
            }
        },

        clearMarkers: function() {
            markers.forEach(marker => {
                try {
                    marker.setMap(null);
                } catch (e) {}
            });
            markers = [];
            truckMarkers.forEach(marker => {
                try {
                    marker.setMap(null);
                } catch (e) {}
            });
            truckMarkers = [];
        },

        clearPolylines: function() {
            routePolylines.forEach(polyline => {
                try {
                    polyline.setMap(null);
                } catch (e) {}
            });
            routePolylines = [];
        },

        clearWasteBinMarkers: function() {
            if (markerCluster) {
                try {
                    markerCluster.clearMarkers();
                    markerCluster = null;
                } catch (e) {}
            }
            wasteBinMarkers.forEach(marker => {
                try {
                    marker.setMap(null);
                } catch (e) {}
            });
            wasteBinMarkers = [];
        },

        resetMapState: function() {
            console.log("Resetting map state");
            if (currentInfoWindow) {
                currentInfoWindow.close();
                currentInfoWindow = null;
            }

            selectedRouteId = null;

            // Stop all active simulations
            Object.keys(activeSimulations).forEach(routeId => {
                this.stopSimulation(routeId);
            });
        },

        disposeResources: function() {
            this.clearMarkers();
            this.clearPolylines();
            this.clearWasteBinMarkers();
            this.resetMapState();
        }
    };
</script>

@code {
    // Data
    private List<RouteResultDto> routes;
    private List<RouteResultDto> filteredRoutes = new List<RouteResultDto>();
    private List<RouteResultDto> displayedRoutes => GetDisplayedRoutes();
    private List<ResultVehicleDto> vehicles;
    private List<ResultUserDto> drivers;
    private List<ResultUserDto> availableDrivers => GetAvailableDrivers();
    private List<ResultVehicleDto> availableVehicles => GetAvailableVehicles();
    private List<ResultWasteBinDto> wasteBins;
    private List<ResultWasteBinDto> filteredBins = new List<ResultWasteBinDto>();

    // Selected items
    private CreateRouteDto newRoute = new CreateRouteDto();

    // UI state flags
    private bool showCreateModal = false;
    private bool mainMapInitialized = false;
    private Guid expandedRouteId;
    private DotNetObjectReference<RoutesManager> _objectReference;
    private CancellationTokenSource _debounceTokenSource = new CancellationTokenSource();

    // Simulation tracking
    private Dictionary<Guid, bool> activeSimulations = new Dictionary<Guid, bool>();

    // Filters
    private string driverFilter = "";
    private RouteStatus? statusFilter;
    private DateTime? startDateFilter;
    private DateTime? endDateFilter;
    private string searchText = "";
    private string binSearchText = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => filteredRoutes == null ? 0 : (int)Math.Ceiling(filteredRoutes.Count / (double)pageSize);
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    // Sorting
    private string sortField = "StartTime";
    private bool sortAscending = false;

    // Fixed start/end point (Çorlu Belediyesi)
    private double fixedStartLat = 41.1634;
    private double fixedStartLng = 27.7951;

    private static readonly JsonSerializerOptions camelCase =
    new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

    private List<ResultUserDto> GetAvailableDrivers()
    {
        if (drivers == null || routes == null)
            return new List<ResultUserDto>();

        var busyDriverIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.DriverId)
            .ToHashSet();

        return drivers.Where(d => !busyDriverIds.Contains(d.Id)).ToList();
    }

    private List<ResultVehicleDto> GetAvailableVehicles()
    {
        if (vehicles == null || routes == null)
            return new List<ResultVehicleDto>();

        var busyVehicleIds = routes
            .Where(r => r.Status != RouteStatus.Completed)
            .Select(r => r.VehicleId)
            .ToHashSet();

        return vehicles.Where(v => !busyVehicleIds.Contains(v.Id.ToString())).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _objectReference = DotNetObjectReference.Create(this);

            await LoadData();
            await LoadDrivers();
            await LoadVehicles();
            await LoadWasteBins();

            if (routes == null)
                routes = new List<RouteResultDto>();

            if (filteredRoutes == null)
                filteredRoutes = new List<RouteResultDto>();

            newRoute.ScheduledStart = DateTime.Now.AddHours(1);
            newRoute.StartLatitude = fixedStartLat;
            newRoute.StartLongitude = fixedStartLng;
            newRoute.EndLatitude = fixedStartLat;
            newRoute.EndLongitude = fixedStartLng;
            newRoute.WasteBinIds = new List<Guid>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            ToastService.ShowError("Sayfa yüklenirken bir hata oluştu");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await CleanupResources();
        _objectReference?.Dispose();
    }

    private async Task CleanupResources()
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.resetMapState");
            await JS.InvokeVoidAsync("googleMapsInterop.disposeResources");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Cleanup error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await Task.Delay(500);

                await JS.InvokeVoidAsync("initializeGoogleMaps", DotNetObjectReference.Create(this));

                if (routes != null && filteredRoutes != null)
                {
                    await InitializeMainMap();
                }
            }
            else if (!mainMapInitialized && routes != null && filteredRoutes != null)
            {
                await InitializeMainMap();
            }

            if (showCreateModal)
            {
                await JS.InvokeVoidAsync("googleMapsInterop.initializeStartPointMap");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            ToastService.ShowError("Harita yüklenirken bir hata oluştu: " + ex.Message);
        }
    }

    private async Task InitializeMainMap()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("googleMapsInterop.initializeMainMap");

            if (result)
            {
                mainMapInitialized = true;
                await ShowAllRoutesOnMap();
            }
            else
            {
                mainMapInitialized = false;
                Console.Error.WriteLine("Map initialization failed");
            }
        }
        catch (Exception ex)
        {
            mainMapInitialized = false;
            Console.Error.WriteLine($"Error initializing main map: {ex.Message}");
            ToastService.ShowError("Harita yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadData()
    {
        try
        {
            routes = await RouteService.GetAllRoutesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading routes: {ex.Message}");
            ToastService.ShowError("Rotalar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadDrivers()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var allUsers = await UserService.GetAllUsersAsync();
                drivers = allUsers.Where(u => u.Roles.Contains("Driver")).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading drivers: {ex.Message}");
            ToastService.ShowError("Sürücüler yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadVehicles()
    {
        try
        {
            vehicles = await VehicleService.GetAllVehiclesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading vehicles: {ex.Message}");
            ToastService.ShowError("Araçlar yüklenirken bir hata oluştu");
        }
    }

    private async Task LoadWasteBins()
    {
        try
        {
            wasteBins = await WasteBinService.GetAllWasteBinsAsync();
            filteredBins = wasteBins.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading waste bins: {ex.Message}");
            ToastService.ShowError("Atık kutuları yüklenirken bir hata oluştu");
        }
    }

    private List<RouteResultDto> GetDisplayedRoutes()
    {
        if (filteredRoutes == null) return new List<RouteResultDto>();

        return filteredRoutes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ApplyFilters()
    {
        if (routes == null)
        {
            filteredRoutes = new List<RouteResultDto>();
            return;
        }

        var query = routes.AsEnumerable();

        if (!string.IsNullOrEmpty(driverFilter))
        {
            query = query.Where(r => r.DriverId == driverFilter);
        }

        if (statusFilter.HasValue)
        {
            query = query.Where(r => r.Status == statusFilter);
        }

        if (startDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date >= startDateFilter.Value.Date);
        }

        if (endDateFilter.HasValue)
        {
            query = query.Where(r => r.StartTime.Date <= endDateFilter.Value.Date);
        }

        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            query = query.Where(r =>
                (GetDriverName(r.DriverId)?.ToLower().Contains(search) == true) ||
                (GetVehiclePlate(r.VehicleId)?.ToLower().Contains(search) == true) ||
                (r.WasteType.ToString().ToLower().Contains(search) == true));
        }

        query = ApplySorting(query);

        filteredRoutes = query.ToList();

        if (currentPage > 1 && (currentPage - 1) * pageSize >= filteredRoutes.Count)
        {
            currentPage = 1;
        }
    }

    private async Task ApplyFiltersWithDebounce()
    {
        try
        {
            _debounceTokenSource.Cancel();
            _debounceTokenSource = new CancellationTokenSource();

            await Task.Delay(250, _debounceTokenSource.Token);

            ApplyFilters();
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private IEnumerable<RouteResultDto> ApplySorting(IEnumerable<RouteResultDto> query)
    {
        switch (sortField)
        {
            case "StartTime":
                return sortAscending ? query.OrderBy(r => r.StartTime) : query.OrderByDescending(r => r.StartTime);
            case "Driver":
                return sortAscending ? query.OrderBy(r => GetDriverName(r.DriverId)) : query.OrderByDescending(r => GetDriverName(r.DriverId));
            case "Vehicle":
                return sortAscending ? query.OrderBy(r => GetVehiclePlate(r.VehicleId)) : query.OrderByDescending(r => GetVehiclePlate(r.VehicleId));
            case "Status":
                return sortAscending ? query.OrderBy(r => r.Status) : query.OrderByDescending(r => r.Status);
            case "Distance":
                return sortAscending ? query.OrderBy(r => r.TotalDistanceKm) : query.OrderByDescending(r => r.TotalDistanceKm);
            case "Duration":
                return sortAscending ? query.OrderBy(r => r.EstimatedDurationMin) : query.OrderByDescending(r => r.EstimatedDurationMin);
            default:
                return query;
        }
    }

    private void FilterBins()
    {
        if (wasteBins == null)
        {
            filteredBins = new List<ResultWasteBinDto>();
            return;
        }

        var query = wasteBins.AsEnumerable();

        if (!string.IsNullOrEmpty(binSearchText))
        {
            var search = binSearchText.ToLower();
            query = query.Where(b =>
                (b.Label?.ToLower().Contains(search) == true) ||
                (b.Address?.ToLower().Contains(search) == true));
        }

        filteredBins = query.ToList();
    }

    private async Task FilterBinsWithDebounce()
    {
        try
        {
            _debounceTokenSource.Cancel();
            _debounceTokenSource = new CancellationTokenSource();

            await Task.Delay(250, _debounceTokenSource.Token);

            FilterBins();
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private async Task ShowAllRoutesOnMap()
    {
        if (routes == null || !routes.Any())
        {
            await LoadData();
        }

        if (routes != null && routes.Any())
        {
            try
            {
                var routesJson = JsonSerializer.Serialize(routes, camelCase);

                var wasteBinsJson = "";
                if (wasteBins != null && wasteBins.Any())
                {
                    wasteBinsJson = JsonSerializer.Serialize(wasteBins, camelCase);
                }

                await JS.InvokeVoidAsync("googleMapsInterop.showAllRoutes", routesJson, wasteBinsJson);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error showing routes on map: {ex}");
                ToastService.ShowError("Rotalar haritada gösterilemedi");
            }
        }
    }

    private void SortTable(string field)
    {
        expandedRouteId = Guid.Empty;

        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        expandedRouteId = Guid.Empty;
    }

    private async Task ClearFilters()
    {
        driverFilter = "";
        statusFilter = null;
        startDateFilter = null;
        endDateFilter = null;
        searchText = "";

        ApplyFilters();
        await ShowAllRoutesOnMap();
    }

    private void ToggleExpand(Guid routeId)
    {
        if (expandedRouteId == routeId)
        {
            expandedRouteId = Guid.Empty;
        }
        else
        {
            expandedRouteId = routeId;
        }
    }

    private void ToggleBin(Guid binId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!newRoute.WasteBinIds.Contains(binId))
            {
                newRoute.WasteBinIds.Add(binId);
            }
        }
        else
        {
            newRoute.WasteBinIds.Remove(binId);
        }
    }

    private async Task CreateRoute()
    {
        if (newRoute.WasteBinIds.Count == 0)
        {
            ToastService.ShowWarning("En az bir atık kutusu seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.DriverId))
        {
            ToastService.ShowWarning("Bir sürücü seçmelisiniz");
            return;
        }

        if (string.IsNullOrEmpty(newRoute.VehicleId))
        {
            ToastService.ShowWarning("Bir araç seçmelisiniz");
            return;
        }

        try
        {
            var apiRoute = new ApiCreateRouteDto
                {
                    DriverId = newRoute.DriverId.ToString(),
                    VehicleId = newRoute.VehicleId.ToString(),
                    WasteType = newRoute.WasteType,
                    OptimizationType = newRoute.OptimizationType,
                    StartTime = newRoute.ScheduledStart,
                    WasteBinIds = newRoute.WasteBinIds,
                    Notes = newRoute.Notes,
                    RouteName = newRoute.RouteName,
                };

            var success = await RouteService.CreateRouteAsync(apiRoute);

            if (success)
            {
                ToastService.ShowSuccess("✅ Rota başarıyla oluşturuldu!");
                showCreateModal = false;
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                ToastService.ShowError("❌ Rota oluşturulurken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating route: {ex.Message}");
            ToastService.ShowError($"❌ Hata: {ex.Message}");
        }
    }

    private async Task CompleteRoute(Guid routeId)
    {
        try
        {
            var result = await RouteService.CompleteRouteAsync(routeId);
            if (result)
            {
                ToastService.ShowSuccess("✅ Rota başarıyla tamamlandı!");
                await LoadData();
                await ShowAllRoutesOnMap();
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("❌ Rota tamamlanırken bir hata oluştu");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error completing route: {ex.Message}");
            ToastService.ShowError($"❌ Hata: {ex.Message}");
        }
    }

    private async Task StartRouteSimulation(Guid routeId)
    {
        try
        {
            var route = routes?.FirstOrDefault(r => r.Id == routeId);
            if (route == null)
            {
                ToastService.ShowError("❌ Rota bulunamadı");
                return;
            }

            if (route.Status == RouteStatus.Completed)
            {
                ToastService.ShowWarning("⚠️ Tamamlanmış rotalar simüle edilemez");
                return;
            }

            if (activeSimulations.ContainsKey(routeId))
            {
                ToastService.ShowInfo("ℹ️ Bu rota zaten simüle ediliyor");
                return;
            }

            // Start simulation in database
            await RouteService.StartRouteSimulationAsync(routeId);

            // Add to active simulations
            activeSimulations[routeId] = true;

            // Start simulation on map
            var routeJson = JsonSerializer.Serialize(route, camelCase);
            await JS.InvokeVoidAsync("googleMapsInterop.startRouteSimulation", routeId.ToString(), routeJson);

            // Update UI immediately
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting route simulation: {ex.Message}");
            ToastService.ShowError($"❌ Simülasyon başlatılamadı: {ex.Message}");
        }
    }

    private async Task StopSimulation(Guid routeId)
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.stopSimulation", routeId.ToString());

            if (activeSimulations.ContainsKey(routeId))
            {
                activeSimulations.Remove(routeId);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error stopping simulation: {ex.Message}");
            ToastService.ShowError($"❌ Simülasyon durdurulamadı: {ex.Message}");
        }
    }

    private async Task UpdateSimulationSpeed(Guid routeId, int speed)
    {
        try
        {
            await JS.InvokeVoidAsync("googleMapsInterop.updateSimulationSpeed", routeId.ToString(), speed);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating simulation speed: {ex.Message}");
        }
    }

    private async Task SimulateAllRoutes()
    {
        try
        {
            var activeRoutes = routes?.Where(r => r.Status != RouteStatus.Completed).ToList();
            if (activeRoutes == null || !activeRoutes.Any())
            {
                ToastService.ShowInfo("ℹ️ Simüle edilecek aktif rota bulunamadı");
                return;
            }

            var simulatedCount = await RouteService.SimulateAllRoutesAsync();

            if (simulatedCount > 0)
            {
                ToastService.ShowSuccess($"🎉 {simulatedCount} rota başarıyla simüle edildi!");
                await LoadData();
                await ShowAllRoutesOnMap();
            }
            else
            {
                ToastService.ShowInfo("ℹ️ Simüle edilecek rota bulunamadı");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error simulating all routes: {ex.Message}");
            ToastService.ShowError($"❌ Toplu simülasyon hatası: {ex.Message}");
        }
    }

    private async Task FocusRouteOnMap(Guid routeId)
    {
        await JS.InvokeVoidAsync("googleMapsInterop.focusRouteOnMap", routeId);
    }

    // Helper methods for UI
    private string GetDriverName(string driverId)
    {
        if (string.IsNullOrEmpty(driverId) || drivers == null)
            return "Bilinmeyen Sürücü";

        var driver = drivers.FirstOrDefault(d => d.Id == driverId);
        return driver != null ? $"{driver.Name} {driver.Surname}" : "Bilinmeyen Sürücü";
    }

    private string GetVehiclePlate(string vehicleId)
    {
        if (string.IsNullOrEmpty(vehicleId) || vehicles == null)
            return "Bilinmeyen Araç";

        if (Guid.TryParse(vehicleId, out Guid vId))
        {
            var vehicle = vehicles.FirstOrDefault(v => v.Id == vId);
            return vehicle != null ? vehicle.Plate : "Bilinmeyen Araç";
        }

        return "Bilinmeyen Araç";
    }

    private string GetStatusText(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "Planlanmış",
            RouteStatus.Active => "Aktif",
            RouteStatus.Completed => "Tamamlanmış",
            _ => status.ToString()
        };
    }

    private string GetStatusBadgeClass(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
            RouteStatus.Active => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            RouteStatus.Completed => "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    // *** DÜZELTME: GetStepStatusClass ***
    private string GetStepStatusClass(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300";

        if (isSimulating)
            return "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 animate-pulse";

        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300";
    }

    // *** DÜZELTME: GetStepStatusText ***
    private string GetStepStatusText(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "Tamamlandı";

        if (isSimulating)
            return "İşlemede";

        return "Beklemede";
    }

    // *** YENİ: GetStepStatusIcon ***
    private string GetStepStatusIcon(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "✅";

        if (isSimulating)
            return "🔄";

        return "⏳";
    }

    private string GetOptimizationTypeText(OptimizationType type)
    {
        return type switch
        {
            OptimizationType.EnKisaMesafe => "En Kısa Mesafe",
            OptimizationType.DolulukOncelikli => "Doluluk Öncelikli",
            _ => type.ToString()
        };
    }

    public string GetWasteTypeText(WasteType type)
    {
        return type switch
        {
            WasteType.Cop => "Çöp",
            WasteType.GeriDonusum => "Geri Dönüşüm",
            WasteType.Organik => "Organik Atık",
            WasteType.Cam => "Cam",
            WasteType.Metal => "Metal",
            WasteType.Elektronik => "Elektronik Atık",
            WasteType.Tehlikeli => "Tehlikeli Atık",
            _ => type.ToString()
        };
    }

    private string GetProgressColor(double percentage)
    {
        return percentage switch
        {
            >= 100 => "text-green-500",
            >= 75 => "text-blue-500",
            >= 50 => "text-yellow-500",
            >= 25 => "text-orange-500",
            _ => "text-red-500"
        };
    }

    private string GetFillLevelBadgeClass(double? fillLevel)
    {
        if (!fillLevel.HasValue) return "bg-gray-100 text-gray-800";

        return fillLevel switch
        {
            >= 90 => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400",
            >= 70 => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400",
            >= 50 => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
            _ => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
        };
    }

    private string FormatDateTime(DateTime dateTime)
    {
        return dateTime.ToString("dd.MM.yyyy HH:mm");
    }

    // *** DEBUG HELPER ***
    private void DebugRouteSteps(RouteResultDto route)
    {
        Console.WriteLine($"=== ROUTE DEBUG: {route.Id} ===");
        Console.WriteLine($"Status: {route.Status}");
        Console.WriteLine($"Total Steps: {route.Steps?.Count ?? 0}");

        if (route.Steps != null)
        {
            foreach (var step in route.Steps.OrderBy(s => s.Order))
            {
                var stepType = step.Order == 0 ? "START" :
                              step.Order == route.Steps.Count - 1 ? "END" :
                              step.WasteBinId.HasValue ? "WASTE_BIN" : "UNKNOWN";

                Console.WriteLine($"Step {step.Order}: {stepType} - {step.Address} - Completed: {step.IsCompleted} - WasteBinId: {step.WasteBinId}");
            }
        }
        Console.WriteLine("=== END DEBUG ===");
    }

    // JavaScript interop methods
    [JSInvokable]
    public void OnMapInitialized()
    {
        Console.WriteLine("Map initialized from JS");
    }

    [JSInvokable]
    public void ShowToastFromJs(string message)
    {
        ToastService.ShowInfo(message);
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void CloseCreateModal()
    {
        showCreateModal = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task RefreshData()
    {
        expandedRouteId = Guid.Empty;
        await LoadData();
        await ShowAllRoutesOnMap();
        ToastService.ShowSuccess("🔄 Veriler yenilendi");
        StateHasChanged();
    }

    [JSInvokable]
    public void OpenCreateModal()
    {
        newRoute = new CreateRouteDto
            {
                ScheduledStart = DateTime.Now,
                StartLatitude = fixedStartLat,
                StartLongitude = fixedStartLng,
                EndLatitude = fixedStartLat,
                EndLongitude = fixedStartLng,
                OptimizationType = OptimizationType.EnKisaMesafe,
                WasteType = WasteType.GeriDonusum,
                WasteBinIds = new List<Guid>(),
                AutoOptimize = true
            };

        showCreateModal = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task FocusRouteOnMap(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            var route = routes?.FirstOrDefault(r => r.Id == id);
            if (route != null)
            {
                expandedRouteId = id;
                if (filteredRoutes != null && filteredRoutes.Contains(route))
                {
                    int index = filteredRoutes.IndexOf(route);
                    currentPage = (index / pageSize) + 1;
                }
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public async Task OnSimulationStarted(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (!activeSimulations.ContainsKey(id))
            {
                activeSimulations[id] = true;
            }
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnSimulationStopped(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (activeSimulations.ContainsKey(id))
            {
                activeSimulations.Remove(id);
            }
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnSimulationCompleted(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            if (activeSimulations.ContainsKey(id))
            {
                activeSimulations.Remove(id);
            }
            await LoadData();
            StateHasChanged();
        }
    }

    // *** DÜZELTME: CompleteNextSimulationStep ***
    [JSInvokable]
    public async Task CompleteNextSimulationStep(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            try
            {
                var result = await RouteService.CompleteNextStepAsync(id);

                // Update local route data
                var route = routes?.FirstOrDefault(r => r.Id == id);
                if (route != null)
                {
                    var step = route.Steps?.FirstOrDefault(s => s.Id == result.CompletedStepId);
                    if (step != null)
                    {
                        step.IsCompleted = true;

                        // Adım tipine göre özel mesaj
                        string message;

                        if (step.Order == 0) // Başlangıç
                        {
                            message = "🚀 Başlangıç noktasından ayrıldı";
                        }
                        else if (step.Order == route.Steps.Count - 1) // Son adım
                        {
                            message = "🏁 Hedefe varıldı - Rota tamamlandı!";
                        }
                        else if (step.WasteBinId.HasValue) // Waste bin durağı
                        {
                            message = $"📍 {step.Order}. durak tamamlandı: {step.Address}";
                        }
                        else // Diğer
                        {
                            message = $"✅ {step.Order}. adım tamamlandı";
                        }

                        ToastService.ShowSuccess(message);

                        // Console'da detaylı log
                        Console.WriteLine($"[STEP COMPLETED] RouteId: {id}, StepOrder: {step.Order}, Address: {step.Address}, Progress: {result.ProgressPercentage}%");

                        StateHasChanged();
                    }
                }

                if (result.IsRouteCompleted)
                {
                    // Route tamamen completed
                    if (activeSimulations.ContainsKey(id))
                    {
                        activeSimulations.Remove(id);
                    }

                    ToastService.ShowSuccess("🎉 Rota simülasyonu başarıyla tamamlandı!");
                    await LoadData();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error completing simulation step: {ex.Message}");
                ToastService.ShowError($"❌ Adım tamamlanırken hata: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task CompleteRouteSimulation(string routeId)
    {
        if (Guid.TryParse(routeId, out Guid id))
        {
            try
            {
                await RouteService.CompleteRouteAsync(id);

                if (activeSimulations.ContainsKey(id))
                {
                    activeSimulations.Remove(id);
                }

                await LoadData();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error completing route simulation: {ex.Message}");
            }
        }
    }
}