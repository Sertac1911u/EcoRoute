@page "/routes"
@using EcoRoute.DtoLayer.IdentityDtos
@using EcoRoute.DtoLayer.RouteOptimizationDtos
@using EcoRoute.DtoLayer.WasteBinDtos
@using EcoRoute.UI.Services
@using EcoRoute.UI.Services.RouteOptimizationServices
@using EcoRoute.UI.Services.WasteBinServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IRouteService RouteService
@inject WasteBinService WasteBinService
@inject UserService UserService
@inject VehicleService VehicleService
@inject AuthenticationStateProvider AuthProvider
@inject IToastService toastService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "SuperAdmin, Manager")]

<h3 class="text-xl font-semibold mb-4">Rota Listesi</h3>

<!-- Admin Gözlem Paneli -->
<div class="w-full mb-6 rounded shadow border border-gray-300 bg-white h-96">
    <div class="text-gray-700 font-semibold px-4 py-2 border-b border-gray-200 bg-gray-50">
        🗺️ Admin Gözlem Paneli
    </div>
    <div id="admin-observer-map" class="w-full h-full rounded-b"></div>
</div>

<!-- Yeni Rota Ekle Butonu -->
<div class="mb-4">
    <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
            @onclick="() => showCreateModal = true">
        + Yeni Rota Ekle
    </button>
</div>

@if (routes == null)
{
    <p>Yükleniyor...</p>
}
else if (!routes.Any())
{
    <p>Görüntülenecek rota bulunamadı.</p>
}
else
{
    <table class="table-auto w-full border border-gray-200">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-4 py-2">Başlangıç</th>
                <th class="px-4 py-2">Sürücü</th>
                <th class="px-4 py-2">Araç</th>
                <th class="px-4 py-2">Durum</th>
                <th class="px-4 py-2">Mesafe (km)</th>
                <th class="px-4 py-2">Süre (dk)</th>
                <th class="px-4 py-2">İşlem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in routes)
            {
                <tr class="border-t cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800"
                    @onclick="@(() => ToggleExpand(route.Id))">
                    <td class="px-4 py-2">@route.StartTime.ToString("g")</td>
                    <td class="px-4 py-2">@route.DriverId</td>
                    <td class="px-4 py-2">@route.VehicleId</td>
                    <td class="px-4 py-2">@route.Status</td>
                    <td class="px-4 py-2">@route.TotalDistanceKm</td>
                    <td class="px-4 py-2">@route.EstimatedDurationMin</td>
                    <td class="px-4 py-2 text-center">
                        @if (route.Status != "Completed")
                        {
                            <button class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => CompleteRoute(route.Id)">
                                Tamamla
                            </button>
                            <button class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded ml-2"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => ShowDetails(route)">
                                Detay
                            </button>
                        }
                        else
                        {
                            <span class="text-green-600 font-semibold">Tamamlandı</span>
                        }
                    </td>
                </tr>

                @if (expandedRouteId == route.Id)
                {
                    <tr class="bg-gray-50 dark:bg-gray-900 border-t">
                        <td colspan="7" class="px-4 py-2">
                            <div class="text-sm text-gray-800 dark:text-gray-200">
                                <strong>Rota Adımları:</strong>
                                <ul class="list-disc list-inside mt-2 space-y-1">
                                    @foreach (var step in route.Steps.OrderBy(s => s.Order))
                                    {
                                        <li>
                                            <strong>@step.Order.</strong>
                                            @step.Address (@step.Latitude, @step.Longitude) –
                                            <span class="@(step.IsCompleted ? "text-green-600" : "text-yellow-600")">
                                                @(step.IsCompleted ? "Tamamlandı" : "Beklemede")
                                            </span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<!-- Detay Modal -->
@if (isModalOpen && selectedRoute != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-3xl">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white">Rota Detayları</h2>
                <button class="text-gray-500 hover:text-red-600" @onclick="CloseModal">✕</button>
            </div>
            <div id="route-map" class="w-full h-64 mt-4 rounded shadow"></div>
            <p class="mb-2"><strong>Sürücü:</strong> @selectedRoute.DriverId</p>
            <p class="mb-2"><strong>Başlangıç:</strong> @selectedRoute.StartTime.ToString("g")</p>
            <p class="mb-4"><strong>Toplam Mesafe:</strong> @selectedRoute.TotalDistanceKm km</p>
            <h3 class="font-semibold mb-2">Rota Adımları:</h3>
            <ul class="list-disc list-inside space-y-1 max-h-64 overflow-y-auto">
                @foreach (var step in selectedRoute.Steps.OrderBy(s => s.Order))
                {
                    <li>
                        <strong>@step.Order.</strong> @step.Address
                        <span class="text-sm text-gray-500 ml-2">(@step.Latitude, @step.Longitude)</span> –
                        <span class="@(step.IsCompleted ? "text-green-600" : "text-yellow-600") font-medium">
                            @(step.IsCompleted ? "Tamamlandı" : "Beklemede")
                        </span>
                    </li>
                }
            </ul>
            <div class="text-right mt-6">
                <button class="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded" @onclick="CloseModal">Kapat</button>
            </div>
        </div>
    </div>
}

<!-- Oluştur Modal -->
@if (showCreateModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-2xl">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white">Yeni Rota Ekle</h2>
                <button class="text-gray-500 hover:text-red-600" @onclick="() => showCreateModal = false">✕</button>
            </div>
            <EditForm Model="newRoute" OnValidSubmit="CreateRoute">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <InputText class="input" @bind-Value="newRoute.Name" placeholder="Rota Adı" />
                    <InputText class="input" @bind-Value="newRoute.WasteType" placeholder="Atık Türü" />
                    <InputText class="input" @bind-Value="newRoute.OptimizationType" placeholder="Optimizasyon Türü" />
                    <InputDate class="input" @bind-Value="newRoute.ScheduledStart" />
                </div>
                <div class="mt-4">
                    <label class="block font-medium text-gray-700 dark:text-white">Atık Kutuları:</label>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
                        @foreach (var bin in availableWasteBins)
                        {
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" value="@bin.WasteBinId" @onchange="e => ToggleBin(bin.WasteBinId, e.Value)" />
                                <span>@bin.Label</span>
                            </label>
                        }
                    </div>
                </div>
                <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block font-medium text-gray-700 dark:text-white">Sürücü:</label>
                        <InputSelect class="input w-full" @bind-Value="newRoute.DriverId">
                            <option value="">Sürücü Seç</option>
                            @foreach (var driver in drivers)
                            {
                                <option value="@driver.Id">@driver.Name @driver.Surname</option>
                            }
                        </InputSelect>
                    </div>
                    <div>
                        <label class="block font-medium text-gray-700 dark:text-white">Araç:</label>
                        <select @bind="newRoute.VehicleId" class="input w-full">
                            <option disabled selected value="">Araç Seç</option>
                            @foreach (var vehicle in vehicles)
                            {
                                <option value="@vehicle.Id">@vehicle.Plate (@vehicle.Description)</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="mt-4">
                    <textarea class="w-full p-2 rounded border dark:bg-gray-700 dark:text-white" @bind="newRoute.Notes" placeholder="Notlar..."></textarea>
                </div>
                <div class="text-right mt-6">
                    <button class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded" type="submit">
                        Oluştur
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<script>
    // Google Maps API hazır olana kadar bekle
    function ensureMaps(callback) {
        if (window.google && google.maps && google.maps.Map) {
            callback();
        } else {
            setTimeout(() => ensureMaps(callback), 300);
        }
    }

    // Admin Gözlem Paneli haritasını yükle
    window.loadAllActiveRoutesOnMap = (routesJson) => {
        ensureMaps(() => {
            const routes = JSON.parse(routesJson);
            const map = new google.maps.Map(document.getElementById("admin-observer-map"), {
                center: { lat: 41.01, lng: 28.97 },
                zoom: 12,
                mapTypeId: 'roadmap'
            });
            const colors = ['#EF4444','#3B82F6','#10B981','#F59E0B','#8B5CF6'];

            routes.forEach((route, i) => {
                if (!route.overviewPolyline) return;
                const path = google.maps.geometry.encoding.decodePath(route.overviewPolyline);
                // Ana polyline
                const poly = new google.maps.Polyline({
                    path,
                    strokeColor: colors[i % colors.length],
                    strokeOpacity: 0.8,
                    strokeWeight: 4,
                    map
                });
                // InfoWindow
                const mid = path[Math.floor(path.length / 2)];
                const info = new google.maps.InfoWindow({
                    content: `
                        <strong>Rota:</strong> ${route.name ?? route.id}<br/>
                        <strong>Sürücü:</strong> ${route.driverId}<br/>
                        <strong>Durum:</strong> ${route.status}
                    `,
                    position: mid
                });
                poly.addListener("click", () => info.open(map));

                // Başlangıç/Bitiş markerları
                new google.maps.Marker({
                    position: path[0],
                    map,
                    icon: {
                        path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                        scale: 5,
                        strokeColor: 'green'
                    },
                    title: 'Başlangıç'
                });
                new google.maps.Marker({
                    position: path[path.length - 1],
                    map,
                    icon: {
                        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 5,
                        strokeColor: 'red'
                    },
                    title: 'Bitiş'
                });
            });
        });
    };

    // Rota detay haritası ve simülasyon
    window.initRouteMap = (stepsJson, overviewPolyline, status) => {
        ensureMaps(() => {
            const steps = JSON.parse(stepsJson);
            const valid = steps.filter(s => !isNaN(+s.latitude) && !isNaN(+s.longitude));
            if (!valid.length) return;

            const map = new google.maps.Map(document.getElementById("route-map"), {
                center: { lat: +valid[0].latitude, lng: +valid[0].longitude },
                zoom: 14,
                mapTypeId: 'roadmap'
            });

            // Rota decode
            if (!overviewPolyline || !google.maps.geometry.encoding) return;
            const fullPath = google.maps.geometry.encoding.decodePath(overviewPolyline);

            // Gidilen ve kalan polylinelar
            const traveledPath = new google.maps.Polyline({
                path: [],
                strokeColor: '#28a745',
                strokeWeight: 4,
                strokeOpacity: 0.9,
                map
            });
            const remainingPath = new google.maps.Polyline({
                path: fullPath,
                strokeColor: '#2563EB',
                strokeWeight: 4,
                strokeOpacity: 0.9,
                map
            });

            // Marker simülasyonu
            let idx = 0;
            let lastStepNotif = -1;
            const truckIcon = {
                url: "https://cdn-icons-png.flaticon.com/512/1995/1995574.png",
                scaledSize: new google.maps.Size(40, 40),
                anchor: new google.maps.Point(20, 20)
            };
            const liveMarker = new google.maps.Marker({
                position: fullPath[0],
                map,
                icon: truckIcon,
                label: {
                    text: '0%',
                    color: '#000',
                    fontSize: '10px',
                    fontWeight: 'bold'
                }
            });

            const interval = setInterval(() => {
                if (idx > fullPath.length) {
                    clearInterval(interval);
                    DotNet.invokeMethodAsync('EcoRoute.UI', 'ShowToastFromJs', '🚚 Rota tamamlandı!');
                    return;
                }

                const pos = fullPath[Math.min(idx, fullPath.length - 1)];
                liveMarker.setPosition(pos);
                map.panTo(pos);

                traveledPath.setPath(fullPath.slice(0, idx + 1));
                remainingPath.setPath(fullPath.slice(idx));

                const pct = Math.floor((idx / fullPath.length) * 100);
                liveMarker.setLabel({
                    text: pct + '%',
                    color: '#000',
                    fontSize: '10px',
                    fontWeight: 'bold'
                });

                const stepIdx = Math.min(
                    steps.length - 1,
                    Math.floor((idx / fullPath.length) * steps.length)
                );
                if (stepIdx !== lastStepNotif) {
                    lastStepNotif = stepIdx;
                    const addr = steps[stepIdx].address;
                    DotNet.invokeMethodAsync('EcoRoute.UI', 'ShowToastFromJs', `📍 Noktaya ulaşıldı: ${addr}`);
                }

                idx++;
            }, 2000);

            // Statik step markerları
            valid.forEach((s, i) => {
                new google.maps.Marker({
                    position: { lat: +s.latitude, lng: +s.longitude },
                    map,
                    icon: {
                        path: google.maps.SymbolPath.CIRCLE,
                        scale: 8,
                        fillColor: i === 0 ? 'green' : (i === valid.length - 1 ? 'red' : 'blue'),
                        fillOpacity: 1,
                        strokeWeight: 1
                    },
                    title: s.address,
                    label: {
                        text: `${s.order}`,
                        color: '#fff',
                        fontSize: '10px',
                        fontWeight: 'bold'
                    }
                });
            });
        });
    };
</script>

@code {
    private List<RouteResultDto>? routes;
    private Guid? expandedRouteId;
    private RouteResultDto? selectedRoute;
    private bool isModalOpen;
    private bool showCreateModal;
    private CreateRouteDto newRoute = new();
    private List<ResultWasteBinDto> availableWasteBins = new();
    private List<ResultUserDto> drivers = new();
    private List<ResultVehicleDto> vehicles = new();
    private bool renderedOnce = false;

    protected override async Task OnInitializedAsync()
    {
        routes = await LoadRoutes();
        availableWasteBins = await WasteBinService.GetAllWasteBinsAsync();
        vehicles = await VehicleService.GetAllVehiclesAsync();

        // Sürücüleri al ve filtrele
        var allUsers = await UserService.GetAllUsersAsync();
        drivers = new List<ResultUserDto>();
        foreach (var u in allUsers.Where(u => u.Roles.Contains("Driver")))
        {
            if (!await RouteService.DriverHasActiveRoute(u.Id.ToString()))
                drivers.Add(u);
        }

        // Araçları filtrele
        var filteredVehicles = new List<ResultVehicleDto>();
        foreach (var v in vehicles)
        {
            if (!await RouteService.VehicleHasActiveRoute(v.Id))
                filteredVehicles.Add(v);
        }
        vehicles = filteredVehicles;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var active = routes?.Where(r => r.Status != "Completed").ToList() ?? new();
            var json = JsonSerializer.Serialize(active, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
            await JS.InvokeVoidAsync("loadAllActiveRoutesOnMap", json);
        }

        if (isModalOpen && selectedRoute != null && !renderedOnce)
        {
            renderedOnce = true;
            var stepsJson = JsonSerializer.Serialize(selectedRoute.Steps, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
            await JS.InvokeVoidAsync("initRouteMap", stepsJson, selectedRoute.OverviewPolyline, selectedRoute.Status);
        }
    }

    private async Task<List<RouteResultDto>> LoadRoutes()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var role = auth.User.FindFirst(c => c.Type == "role")?.Value;
        return role == "Driver"
            ? await RouteService.GetMyRoutesAsync()
            : await RouteService.GetAllRoutesAsync();
    }

    private void ToggleExpand(Guid id) => expandedRouteId = expandedRouteId == id ? null : id;

    private async Task CompleteRoute(Guid id)
    {
        await RouteService.CompleteRouteAsync(id);
        routes = await LoadRoutes();
        toastService.ShowSuccess("Rota tamamlandı.");
    }

    private void ShowDetails(RouteResultDto r)
    {
        selectedRoute = r;
        isModalOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedRoute = null;
    }

    private void ToggleBin(Guid id, object? val)
    {
        if ((bool?)val == true) newRoute.WasteBinIds.Add(id);
        else newRoute.WasteBinIds.Remove(id);
    }

    private async Task CreateRoute()
    {
        if (await RouteService.DriverHasActiveRoute(newRoute.DriverId.ToString()))
        {
            toastService.ShowWarning("Sürücüde aktif rota var.");
            return;
        }
        if (await RouteService.VehicleHasActiveRoute(newRoute.VehicleId))
        {
            toastService.ShowWarning("Araçta aktif rota var.");
            return;
        }
        newRoute.AutoOptimize = true;
        if (await RouteService.CreateRouteAsync(newRoute))
        {
            toastService.ShowSuccess("Rota oluşturuldu.");
            showCreateModal = false;
            routes = await LoadRoutes();
        }
        else
        {
            toastService.ShowError("Rota oluşturulamadı.");
        }
    }
}
