@using Microsoft.JSInterop

@inject IToastService toastService

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl h-[80vh] flex flex-col animate-modal-show">
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Konum Seç</h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="TriggerClose"><i class="fas fa-times text-xl"></i></button>
            </div>
            <div class="p-4 flex-grow">
                <div class="mb-4 bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 p-3 rounded-lg text-sm">
                    <i class="fas fa-info-circle mr-2"></i> Haritada istediğiniz konuma tıklayarak atık kutusu konumu belirleyebilirsiniz.
                </div>
                <div class="bg-white dark:bg-gray-800 rounded-lg h-[calc(100%-3rem)] overflow-hidden border border-gray-300 dark:border-gray-600 relative">
                    <div id="location-picker-map" class="w-full h-full rounded-lg"></div>
                </div>
            </div>
            <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <div class="text-sm text-gray-600 dark:text-gray-400">
                    <i class="fas fa-map-marker-alt text-red-500 mr-1"></i>
                    <span id="selected-coordinates">Koordinat: @BinModelLatitude, @BinModelLongitude</span>
                </div>
                <div class="flex space-x-3">
                    <button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-md transition-colors" @onclick="TriggerClose">İptal</button>
                    <button class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors" @onclick="TriggerConfirm">Konumu Seç</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public double BinModelLatitude { get; set; }
    [Parameter] public double BinModelLongitude { get; set; }
    [Parameter] public string WasteBinsJsonForPicker { get; set; } // JSON string of other bins
    [Parameter] public Guid EditingId { get; set; } // To exclude current bin if editing

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    [Parameter] public IJSRuntime JS { get; set; } // Passed from parent
    [Parameter] public IToastService ToastService { get; set; } // Passed from parent


    private bool mapInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && !mapInitialized)
        {
            await InitializeMap();
        }
        if (!IsVisible && mapInitialized)
        {
            mapInitialized = false; // Reset for next time it becomes visible
        }
    }

    private async Task InitializeMap()
    {
        try
        {
            await Task.Delay(200); // Ensure DOM is ready
            double lat = BinModelLatitude != 0 ? BinModelLatitude : 41.1634;
            double lng = BinModelLongitude != 0 ? BinModelLongitude : 27.7951;

            await JS.InvokeVoidAsync("googleMapsInterop.initializeLocationPickerMap", "location-picker-map", lat, lng);

            if (!string.IsNullOrEmpty(WasteBinsJsonForPicker))
            {
                await JS.InvokeVoidAsync("googleMapsInterop.showBinsOnPickerMap", WasteBinsJsonForPicker);
            }
            mapInitialized = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing location picker map: {ex.Message}");
            toastService.ShowError($"Konum seçici yüklenemedi: {ex.Message}");
        }
    }

    private async Task TriggerClose() => await OnClose.InvokeAsync();
    private async Task TriggerConfirm() => await OnConfirm.InvokeAsync();
}