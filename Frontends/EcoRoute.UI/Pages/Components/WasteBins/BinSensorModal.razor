@using EcoRoute.DtoLayer.WasteBinDtos

<!-- Sensor Create/Edit Modal -->
@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    @(IsEdit ? "Sensör Düzenle" : "Yeni Sensör Ekle")
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="OnClose">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="space-y-6">
                    <!-- Waste Bin Selection -->
                    <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                        <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center">
                            <i class="fas fa-dumpster mr-2 text-blue-500"></i>
                            Atık Kutusu Seçimi
                        </h4>
                        <select class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white"
                                value="@SensorModel.WasteBinId"
                                @onchange="@((ChangeEventArgs e) => OnWasteBinChanged(e))">
                            <option value="">Atık kutusu seçiniz...</option>
                            @if (WasteBins != null)
                            {
                                foreach (var bin in WasteBins)
                                {
                                    <option value="@bin.Id">@bin.Label - @bin.Address</option>
                                }
                            }
                        </select>
                    </div>

                    <!-- Sensor Type -->
                    <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                        <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center">
                            <i class="fas fa-microchip mr-2 text-green-500"></i>
                            Sensör Tipi
                        </h4>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                            @foreach (var sensorType in SensorTypes)
                            {
                                <div class="relative">
                                    <input type="radio" id="type-@sensorType.Key" name="sensor-type" value="@sensorType.Key"
                                           checked="@(SensorModel.Type == sensorType.Key)"
                                           @onchange="@((ChangeEventArgs e) => OnSensorTypeChanged(sensorType.Key))"
                                           class="hidden peer" />
                                    <label for="type-@sensorType.Key" class="inline-flex flex-col items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-primary-400 peer-checked:border-primary-600 peer-checked:text-primary-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700 min-h-[80px]">
                                        <i class="@sensorType.Value.Icon text-2xl mb-1"></i>
                                        <span class="font-medium text-xs text-center">@sensorType.Value.Name</span>
                                    </label>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(SensorModel.Type))
                        {
                            <div class="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                <p class="text-sm text-blue-800 dark:text-blue-300">
                                    <i class="fas fa-info-circle mr-2"></i>
                                    @GetSensorDescription(SensorModel.Type)
                                </p>
                            </div>
                        }
                    </div>

                    <!-- Sensor Status and Dates -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Status -->
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center">
                                <i class="fas fa-toggle-on mr-2 text-orange-500"></i>
                                Durum
                            </h4>
                            <div class="flex space-x-4">
                                <div class="relative">
                                    <input type="radio" id="status-active" name="sensor-status" value="true"
                                           checked="@SensorModel.IsActive"
                                           @onchange="@((ChangeEventArgs e) => OnStatusChanged(true))"
                                           class="hidden peer" />
                                    <label for="status-active" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-check-circle mr-2 text-green-500"></i>
                                        <span class="font-medium text-sm">Aktif</span>
                                    </label>
                                </div>
                                <div class="relative">
                                    <input type="radio" id="status-inactive" name="sensor-status" value="false"
                                           checked="@(!SensorModel.IsActive)"
                                           @onchange="@((ChangeEventArgs e) => OnStatusChanged(false))"
                                           class="hidden peer" />
                                    <label for="status-inactive" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-red-400 peer-checked:border-red-600 peer-checked:text-red-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                        <i class="fas fa-times-circle mr-2 text-red-500"></i>
                                        <span class="font-medium text-sm">Pasif</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Installation Date -->
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center">
                                <i class="fas fa-calendar-alt mr-2 text-purple-500"></i>
                                Kurulum Tarihi
                            </h4>
                            <input type="datetime-local" 
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white"
                                   value="@InstallationDateString"
                                   @onchange="@((ChangeEventArgs e) => InstallationDateString = e.Value?.ToString() ?? "")" />
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                Boş bırakılırsa mevcut tarih kullanılır
                            </p>
                        </div>
                    </div>

                    <!-- Additional Info -->
                    @if (IsEdit)
                    {
                        <div class="bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4">
                            <div class="flex items-center mb-2">
                                <i class="fas fa-info-circle text-yellow-600 dark:text-yellow-400 mr-2"></i>
                                <h4 class="text-md font-medium text-yellow-800 dark:text-yellow-300">Mevcut Sensör Bilgileri</h4>
                            </div>
                            <div class="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                                <p><strong>Sensör ID:</strong> @ExistingSensor?.SensorId</p>
                                <p><strong>Son Güncelleme:</strong> @ExistingSensor?.LastUpdate?.ToString("dd.MM.yyyy HH:mm")</p>
                            </div>
                        </div>
                    }
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-3 mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <button class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" @onclick="OnClose">
                        İptal
                    </button>
                    <button class="px-5 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors shadow-sm flex items-center" 
                            @onclick="OnSave"
                            disabled="@(!IsFormValid())">
                        <i class="fas @(IsEdit ? "fa-save" : "fa-plus") mr-2"></i>
                        @(IsEdit ? "Güncelle" : "Ekle")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public CreateSensorDto SensorModel { get; set; } = new();
    [Parameter] public List<ResultWasteBinDto> WasteBins { get; set; }
    [Parameter] public ResultSensorDto ExistingSensor { get; set; }

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback<CreateSensorDto> OnSensorModelChanged { get; set; }

    private string InstallationDateString
    {
        get => SensorModel.InstallationDate?.ToString("yyyy-MM-ddTHH:mm") ?? DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
        set 
        {
            if (!string.IsNullOrEmpty(value) && DateTime.TryParse(value, out DateTime date))
                SensorModel.InstallationDate = date;
            else if (string.IsNullOrEmpty(value))
                SensorModel.InstallationDate = null;
            
            // Ana component'e değişiklikleri bildir
            OnSensorModelChanged.InvokeAsync(SensorModel);
        }
    }

    // Sensor type definitions
    private Dictionary<string, (string Name, string Icon)> SensorTypes = new()
    {
        { "Fill Level", ("Doluluk Sensörü", "fas fa-chart-line") },
        { "Weight", ("Ağırlık Sensörü", "fas fa-weight") },
        { "Temperature", ("Sıcaklık Sensörü", "fas fa-thermometer-half") },
        { "Motion", ("Hareket Sensörü", "fas fa-running") },
        { "Proximity", ("Yaklaşım Sensörü", "fas fa-hand-paper") },
        { "GPS", ("GPS Sensörü", "fas fa-map-marker-alt") },
        { "Camera", ("Kamera Sensörü", "fas fa-camera") },
        { "Sound", ("Ses Sensörü", "fas fa-volume-up") },
        { "Gas", ("Gaz Sensörü", "fas fa-wind") },
        { "Humidity", ("Nem Sensörü", "fas fa-tint") }
    };

    protected override void OnParametersSet()
    {
        // Only initialize when modal is actually shown
        if (!ShowModal) return;

        Console.WriteLine($"OnParametersSet called - IsEdit: {IsEdit}, ShowModal: {ShowModal}");

        if (IsEdit && ExistingSensor != null)
        {
            Console.WriteLine($"Editing existing sensor: {ExistingSensor.SensorId}");
            SensorModel = new CreateSensorDto
            {
                WasteBinId = ExistingSensor.WasteBinId,
                Type = ExistingSensor.Type ?? "",
                IsActive = ExistingSensor.IsActive,
                InstallationDate = ExistingSensor.InstallationDate ?? DateTime.Now,
                LastUpdate = DateTime.Now
            };
        }
        else if (!IsEdit)
        {
            Console.WriteLine("Creating new sensor");
            // Only reset if WasteBinId is empty (not pre-selected)
            if (SensorModel.WasteBinId == Guid.Empty)
            {
                SensorModel = new CreateSensorDto
                {
                    IsActive = true,
                    InstallationDate = DateTime.Now,
                    LastUpdate = DateTime.Now,
                    Type = ""
                };
            }
            else
            {
                // Keep the pre-selected WasteBinId but ensure other fields are set
                SensorModel.IsActive = true;
                SensorModel.InstallationDate = SensorModel.InstallationDate ?? DateTime.Now;
                SensorModel.LastUpdate = DateTime.Now;
                if (string.IsNullOrEmpty(SensorModel.Type))
                {
                    SensorModel.Type = "";
                }
            }
        }
        
        // Ensure all DateTime fields have values
        if (!SensorModel.InstallationDate.HasValue)
        {
            SensorModel.InstallationDate = DateTime.Now;
        }
        
        if (!SensorModel.LastUpdate.HasValue)
        {
            SensorModel.LastUpdate = DateTime.Now;
        }

        Console.WriteLine($"SensorModel configured - WasteBinId: {SensorModel.WasteBinId}, Type: '{SensorModel.Type}'");
    }

    private bool IsFormValid()
    {
        bool isValid = true;
        var errors = new List<string>();

        if (SensorModel.WasteBinId == Guid.Empty)
        {
            errors.Add("Atık kutusu seçimi zorunludur");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(SensorModel.Type))
        {
            errors.Add("Sensör tipi seçimi zorunludur");
            isValid = false;
        }

        if (!SensorModel.InstallationDate.HasValue)
        {
            SensorModel.InstallationDate = DateTime.Now;
        }

        if (!SensorModel.LastUpdate.HasValue)
        {
            SensorModel.LastUpdate = DateTime.Now;
        }

        // Debug logging
        Console.WriteLine($"Form validation check:");
        Console.WriteLine($"  WasteBinId: {SensorModel.WasteBinId} (Empty: {SensorModel.WasteBinId == Guid.Empty})");
        Console.WriteLine($"  Type: '{SensorModel.Type}' (Empty: {string.IsNullOrWhiteSpace(SensorModel.Type)})");
        Console.WriteLine($"  IsActive: {SensorModel.IsActive}");
        Console.WriteLine($"  InstallationDate: {SensorModel.InstallationDate}");
        
        if (!isValid)
        {
            Console.WriteLine("Form validation failed:");
            foreach (var error in errors)
            {
                Console.WriteLine($"  - {error}");
            }
        }
        else
        {
            Console.WriteLine("Form validation passed");
        }

        return isValid;
    }

    private string GetSensorDescription(string sensorType)
    {
        return sensorType switch
        {
            "Fill Level" => "Atık kutusunun doluluk seviyesini ölçer. Ultrasonik veya lazer teknolojisi kullanır.",
            "Weight" => "Atık kutusundaki atık miktarını ağırlık olarak ölçer. Yük hücresi teknolojisi kullanır.",
            "Temperature" => "Atık kutusunun iç sıcaklığını izler. Yangın riski ve çürüme sürecini takip eder.",
            "Motion" => "Atık kutusu çevresindeki hareketleri algılar. Güvenlik ve kullanım analizi sağlar.",
            "Proximity" => "Atık kutusuna yaklaşan nesneleri algılar. Kapak açılması ve kullanım takibi yapar.",
            "GPS" => "Atık kutusunun konumunu sürekli takip eder. Hırsızlık koruması sağlar.",
            "Camera" => "Görsel izleme yapar. Güvenlik ve kullanım analizi için görüntü kaydeder.",
            "Sound" => "Ses seviyesini ölçer. Çevresel gürültü kirliliği analizi yapar.",
            "Gas" => "Zararlı gaz seviyelerini ölçer. Güvenlik ve çevre sağlığı için kritiktir.",
            "Humidity" => "Nem seviyesini ölçer. Çürüme sürecini ve hijyen durumunu takip eder.",
            _ => "Seçilen sensör tipine ait detaylı bilgi mevcut değil."
        };
    }

    // Event handlers for form binding
    private async Task OnWasteBinChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid wasteBinId))
        {
            SensorModel.WasteBinId = wasteBinId;
            Console.WriteLine($"WasteBin changed to: {wasteBinId}");
        }
        else
        {
            SensorModel.WasteBinId = Guid.Empty;
            Console.WriteLine("WasteBin cleared");
        }
        
        // Ana component'e değişiklikleri bildir
        await OnSensorModelChanged.InvokeAsync(SensorModel);
        StateHasChanged();
    }

    private async Task OnSensorTypeChanged(string sensorType)
    {
        SensorModel.Type = sensorType;
        Console.WriteLine($"Sensor type changed to: {sensorType}");
        
        // Ana component'e değişiklikleri bildir
        await OnSensorModelChanged.InvokeAsync(SensorModel);
        StateHasChanged();
    }

    private async Task OnStatusChanged(bool isActive)
    {
        SensorModel.IsActive = isActive;
        Console.WriteLine($"Sensor status changed to: {isActive}");
        
        // Ana component'e değişiklikleri bildir
        await OnSensorModelChanged.InvokeAsync(SensorModel);
        StateHasChanged();
    }
}