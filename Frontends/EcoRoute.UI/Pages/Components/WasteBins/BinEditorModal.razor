@using EcoRoute.DtoLayer.WasteBinDtos

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[50]">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto animate-modal-show">
            <!-- Modal Başlık -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-gray-800 z-10">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    @(IsEditing ? "Atık Kutusu Düzenle" : "Yeni Atık Kutusu Ekle")
                </h3>
                <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" @onclick="TriggerClose">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <!-- Form İçeriği -->
            <div class="p-5">
                <div class="space-y-6">
                    <!-- Temel Bilgiler -->
                    <div class="space-y-4 bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                        <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 border-gray-200 dark:border-gray-700">
                            Temel Bilgiler
                        </h4>
                        <div class="space-y-3">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="label">Etiket <span class="text-red-500">*</span></label>
                                <input type="text" id="label" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                       @bind="BinModel.Label"
                                       @bind:event="oninput"
                                       @bind:after="UpdateBinModel" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="address">Adres <span class="text-red-500">*</span></label>
                                <input type="text" id="address" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                       @bind="BinModel.Address"
                                       @bind:event="oninput"
                                       @bind:after="UpdateBinModel" />
                            </div>
                            <div class="grid grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="latitude">Enlem <span class="text-red-500">*</span></label>
                                    <div class="flex">
                                        <input type="number" step="0.000001" id="latitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                               value="@BinModel.Latitude" readonly />
                                        <button type="button" class="flex-shrink-0 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 px-3 py-2 border border-l-0 border-gray-300 dark:border-gray-600 rounded-r-md" @onclick="TriggerOpenLocationPicker">
                                            <i class="fas fa-map text-primary-500"></i>
                                        </button>
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" for="longitude">Boylam <span class="text-red-500">*</span></label>
                                    <input type="number" step="0.000001" id="longitude" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                                           value="@BinModel.Longitude" readonly />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Durum ve Doluluk Bilgileri -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                         <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 mb-4 border-gray-200 dark:border-gray-700">Cihaz Durumu</h4>
                            <div class="grid grid-cols-2 gap-3">
                                @foreach (var statusOption in deviceStatusOptions)
                                {
                                    <div class="relative">
                                        <input type="radio" id="status-@statusOption.Value" name="device-status" value="@statusOption.Value"
                                               checked="@(BinModel.DeviceStatus == statusOption.Value)"
                                               @onchange="() => { BinModel.DeviceStatus = statusOption.Value; UpdateBinModel(); }"
                                               class="hidden peer" />
                                        <label for="status-@statusOption.Value" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 @statusOption.PeerCheckedClass hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                            <i class="fas @statusOption.IconClass mr-2 @statusOption.IconColorClass"></i>
                                            <span class="font-medium text-sm">@statusOption.Text</span>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 border-b pb-2 border-gray-200 dark:border-gray-700">Doluluk Durumu</h4>
                            <div class="space-y-4 mt-4">
                                <div class="grid grid-cols-2 gap-3">
                                    @foreach (var fillOption in fillStatusOptions)
                                    {
                                         <div class="relative">
                                            <input type="radio" id="filled-@fillOption.Value" name="fill-status" value="@fillOption.Value.ToString()"
                                                   checked="@(BinModel.IsFilled == fillOption.Value)"
                                                   @onchange="() => { BinModel.IsFilled = fillOption.Value; UpdateBinModel(); }"
                                                   class="hidden peer" />
                                            <label for="filled-@fillOption.Value" class="inline-flex items-center justify-center w-full p-3 text-gray-700 bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 @fillOption.PeerCheckedClass hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                                                <i class="fas @fillOption.IconClass mr-2 @fillOption.IconColorClass"></i>
                                                <span class="font-medium text-sm">@fillOption.Text</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                                <div class="mt-2">
                                    <div class="flex justify-between items-center mb-2">
                                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Doluluk Seviyesi (%)</h4>
                                        <span class="px-2 py-0.5 rounded-full text-xs @GetFillLevelBadge(BinModel.FillLevel)">@(BinModel.FillLevel ?? 0)%</span>
                                    </div>
                                    <div class="relative">
                                        <input type="range" min="0" max="100" step="1" id="fillLevel" class="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                                               value="@BinModel.FillLevel" @oninput="OnFillLevelInput" />
                                        <div class="w-full flex justify-between text-xs text-gray-600 dark:text-gray-400 mt-1">
                                            <span>0</span><span>25</span><span>50</span><span>75</span><span>100</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sensör Seçimi -->
                    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-sm">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
                            <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 sm:mb-0">Sensörler</h4>
                            <span class="text-xs px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 rounded-full">
                                @(LocalSelectedSensorIds.Count) sensör seçildi
                            </span>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 max-h-48 overflow-y-auto p-3 bg-white dark:bg-gray-900 rounded-lg shadow-inner">
                            @if (AvailableSensors != null && AvailableSensors.Any())
                            {
                                foreach (var sensor in AvailableSensors)
                                {
                                    <div class="flex items-center p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border border-gray-100 dark:border-gray-800">
                                        <input type="checkbox" id="sensor-@sensor.SensorId" value="@sensor.SensorId"
                                               checked="@(LocalSelectedSensorIds.Contains(sensor.SensorId))"
                                               @onchange="@(e => ToggleSensorSelection(sensor.SensorId, (bool)e.Value))"
                                               class="w-4 h-4 mr-2 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                        <label for="sensor-@sensor.SensorId" class="flex-1 cursor-pointer">
                                            <div class="font-medium text-gray-800 dark:text-white text-sm">@sensor.Type</div>
                                            <div class="flex items-center mt-1">
                                                <span class="@(sensor.IsActive ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300" : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300") px-2 py-0.5 rounded-full text-xs">
                                                    @(sensor.IsActive ? "Aktif" : "Pasif")
                                                </span>
                                            </div>
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="col-span-full text-center p-6 text-gray-500 dark:text-gray-400">
                                    <i class="fas fa-sensor-off text-2xl mb-2"></i>
                                    <p>Kullanılabilir sensör bulunamadı</p>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Butonlar -->
                    <div class="flex justify-end space-x-3 mt-4 pt-3 border-t border-gray-200 dark:border-gray-700">
                        <button class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" @onclick="TriggerClose">İptal</button>
                        <button class="px-5 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors shadow-sm" @onclick="TriggerSaveRequest">@(IsEditing ? "Güncelle" : "Kaydet")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public CreateWasteBinDto BinModel { get; set; } = new();
    [Parameter] public List<ResultSensorDto> AvailableSensors { get; set; }
    [Parameter] public List<Guid> SelectedSensorIds { get; set; } = new(); // Received from parent

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSaveRequest { get; set; }
    [Parameter] public EventCallback OnOpenLocationPicker { get; set; }
    [Parameter] public EventCallback<List<Guid>> OnSelectedSensorIdsChanged { get; set; }
    [Parameter] public EventCallback<CreateWasteBinDto> OnBinModelChanged { get; set; }


    private List<Guid> LocalSelectedSensorIds { get; set; } = new(); // Local copy for manipulation

    protected override void OnParametersSet()
    {
        // Synchronize local list with parent's list when parameters change
        if (SelectedSensorIds != null)
        {
            LocalSelectedSensorIds = new List<Guid>(SelectedSensorIds);
        }
        else
        {
            LocalSelectedSensorIds = new List<Guid>();
        }
    }
    
    private void UpdateBinModel()
    {
        OnBinModelChanged.InvokeAsync(BinModel);
    }


    private void ToggleSensorSelection(Guid sensorId, bool isSelected)
    {
        if (isSelected)
        {
            if (!LocalSelectedSensorIds.Contains(sensorId)) LocalSelectedSensorIds.Add(sensorId);
        }
        else
        {
            LocalSelectedSensorIds.Remove(sensorId);
        }
        OnSelectedSensorIdsChanged.InvokeAsync(LocalSelectedSensorIds); // Notify parent
    }

    private void OnFillLevelInput(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double value))
        {
            BinModel.FillLevel = value;
            BinModel.IsFilled = value >= 90; // Example logic
            UpdateBinModel();
        }
    }
    
    private async Task TriggerClose() => await OnClose.InvokeAsync();
    private async Task TriggerSaveRequest() => await OnSaveRequest.InvokeAsync();
    private async Task TriggerOpenLocationPicker() => await OnOpenLocationPicker.InvokeAsync();

    private string GetFillLevelBadge(double? fillLevel) { if (!fillLevel.HasValue) return "bg-gray-100 text-gray-800"; return fillLevel switch { >= 90 => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400", >= 70 => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400", >= 50 => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400", >= 30 => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400", _ => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400" }; }

    // Options for radio buttons
    private class StatusOption { public string Value { get; set; } public string Text { get; set; } public string IconClass { get; set; } public string IconColorClass { get; set; } public string PeerCheckedClass { get; set; } }
    private List<StatusOption> deviceStatusOptions = new()
    {
        new() { Value = "Active", Text = "Aktif", IconClass = "fa-check-circle", IconColorClass="text-green-500", PeerCheckedClass="dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600" },
        new() { Value = "Inactive", Text = "Pasif", IconClass = "fa-ban", IconColorClass="text-gray-500", PeerCheckedClass="dark:peer-checked:text-gray-400 peer-checked:border-gray-600 peer-checked:text-gray-600" },
        new() { Value = "Maintenance", Text = "Bakımda", IconClass = "fa-wrench", IconColorClass="text-yellow-500", PeerCheckedClass="dark:peer-checked:text-yellow-400 peer-checked:border-yellow-600 peer-checked:text-yellow-600" },
        new() { Value = "Faulty", Text = "Arızalı", IconClass = "fa-exclamation-triangle", IconColorClass="text-red-500", PeerCheckedClass="dark:peer-checked:text-red-400 peer-checked:border-red-600 peer-checked:text-red-600" }
    };
    private class FillStatusOption { public bool Value { get; set; } public string Text { get; set; } public string IconClass { get; set; } public string IconColorClass { get; set; } public string PeerCheckedClass { get; set; } }
    private List<FillStatusOption> fillStatusOptions = new()
    {
        new() { Value = true, Text = "Dolu", IconClass = "fa-trash-alt", IconColorClass="text-red-500", PeerCheckedClass="dark:peer-checked:text-red-400 peer-checked:border-red-600 peer-checked:text-red-600" },
        new() { Value = false, Text = "Boş", IconClass = "fa-trash", IconColorClass="text-green-500", PeerCheckedClass="dark:peer-checked:text-green-400 peer-checked:border-green-600 peer-checked:text-green-600" }
    };
}