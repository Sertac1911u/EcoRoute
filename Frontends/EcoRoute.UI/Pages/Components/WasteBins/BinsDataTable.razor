@using EcoRoute.DtoLayer.WasteBinDtos


@if (FilteredBins == null)
{
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
            <thead class="bg-gray-100 dark:bg-gray-700">
                <tr><th colspan="7" class="px-4 py-3 text-center">Yükleniyor...</th></tr>
            </thead>
        </table>
    </div>
}
else
{
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
            <thead class="bg-gray-100 dark:bg-gray-700">
                <tr>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("Index")'>
                        <div class="flex items-center">
                            No @GetSortIcon("Index")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("Label")'>
                        <div class="flex items-center">
                            Etiket @GetSortIcon("Label")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("Address")'>
                        <div class="flex items-center">
                            Adres @GetSortIcon("Address")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("LastUpdate")'>
                        <div class="flex items-center">
                            Son Güncelleme @GetSortIcon("LastUpdate")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("DeviceStatus")'>
                        <div class="flex items-center">
                            Cihaz Durumu @GetSortIcon("DeviceStatus")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600" @onclick='() => OnSortTable.InvokeAsync("FillLevel")'>
                        <div class="flex items-center">
                            Doluluk Oranı @GetSortIcon("FillLevel")
                        </div>
                    </th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">İşlemler</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                @if (FilteredBins.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">
                            <div class="flex flex-col justify-center items-center p-6">
                                <i class="fas fa-trash-alt text-4xl mb-2 text-gray-400"></i>
                                <p>Atık kutusu bulunamadı veya hiç atık kutusu bulunmamaktadır.</p>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    @for (int i = 0; i < DisplayedBins.Count; i++)
                    {
                        var bin = DisplayedBins[i];
                        var rowIndex = ((CurrentPage - 1) * PageSize) + i + 1;
                        <BinDataTableRow Bin="bin"
                                         RowIndex="rowIndex"
                                         IsExpanded="ExpandedRowId == bin.Id"
                                         OnToggleRowExpansion="() => OnToggleRowExpansion.InvokeAsync(bin.Id)"
                                         OnOpenEditModal="() => OnOpenEditModal.InvokeAsync(bin)"
                                         OnFocusOnBin="() => OnFocusOnBin.InvokeAsync(bin.Id)"
                                         OnDeleteBin="() => OnDeleteBin.InvokeAsync(bin.Id)" />
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter] public List<ResultWasteBinDto> FilteredBins { get; set; }
    [Parameter] public List<ResultWasteBinDto> DisplayedBins { get; set; }
    [Parameter] public string SortField { get; set; }
    [Parameter] public bool SortAscending { get; set; }
    [Parameter] public Guid ExpandedRowId { get; set; }
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int PageSize { get; set; }

    [Parameter] public EventCallback<string> OnSortTable { get; set; }
    [Parameter] public EventCallback<Guid> OnToggleRowExpansion { get; set; }
    [Parameter] public EventCallback<ResultWasteBinDto> OnOpenEditModal { get; set; }
    [Parameter] public EventCallback<Guid> OnFocusOnBin { get; set; }
    [Parameter] public EventCallback<Guid> OnDeleteBin { get; set; }

    private MarkupString GetSortIcon(string field)
    {
        if (SortField == field)
        {
            return (MarkupString)$"<i class=\"fas {(SortAscending ? "fa-sort-up" : "fa-sort-down")} ml-1\"></i>";
        }
        return (MarkupString)"<i class=\"fas fa-sort ml-1 text-gray-400\"></i>";
    }
}