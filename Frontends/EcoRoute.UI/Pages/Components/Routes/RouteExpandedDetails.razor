@using EcoRoute.DtoLayer.RouteOptimizationDtos

<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <!-- Genel Bilgiler -->
    <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                <i class="fas fa-info-circle mr-2 text-blue-500"></i>
                Genel Bilgiler
            </h3>
            <span class="@GetStatusBadgeClass(Route.Status) px-2 py-1 rounded-full text-xs">
                @GetStatusText(Route.Status)
            </span>
        </div>

        <div class="space-y-3">
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Başlangıç Tarihi:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@Route.StartTime.ToString("dd.MM.yyyy HH:mm")</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Mesafe:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@Route.TotalDistanceKm.ToString("F1") km</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Süre:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@Route.EstimatedDurationMin dk</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini Yakıt:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@Route.EstimatedFuelL.ToString("F2") L</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Tahmini CO2:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">@Route.EstimatedCO2Kg.ToString("F2") kg</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500 dark:text-gray-400">Atık Tipi:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                    @Route.WasteType
                </span>
            </div>
        </div>
    </div>

    <!-- Rota Özeti -->
    <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
        <div class="flex justify-between items-center mb-4">
            <h3 class="!text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                <i class="fas fa-route mr-2 text-amber-500"></i>
                Rota Özeti
            </h3>
        </div>

        <div class="space-y-3">
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Toplam Adım Sayısı:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="total-steps-@Route.Id">@Route.Steps.Count() adet</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Tamamlanan Adımlar:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="completed-steps-@Route.Id">@Route.Steps.Count(s => s.IsCompleted) adet</span>
            </div>
            <div class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
                <span class="text-sm text-gray-500 dark:text-gray-400">Kalan Adımlar:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200" id="remaining-steps-@Route.Id">@Route.Steps.Count(s => !s.IsCompleted) adet</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500 dark:text-gray-400">Optimizasyon Tipi:</span>
                <span class="text-sm font-medium text-gray-800 dark:text-gray-200">
                    @GetOptimizationTypeText(Route.OptimizationType)
                </span>
            </div>
        </div>
    </div>

    <!-- İlerleme Durumu ve Simülasyon Kontrolleri -->
    <div class="bg-white dark:bg-gray-800 p-5 rounded-lg shadow-md transform transition-all duration-300 hover:scale-105">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white flex items-center">
                <i class="fas fa-chart-line mr-2 text-green-500"></i>
                İlerleme Durumu
            </h3>
        </div>

        <div class="space-y-4">
            <!-- Progress Circle -->
            <div class="flex justify-center">
                @{
                    double progressPercentage = Route.Steps.Any()
                    ? (double)Route.Steps.Count(s => s.IsCompleted) / Route.Steps.Count * 100
                    : 0;
                }
                <div class="relative w-24 h-24">
                    <svg class="w-full h-full" viewBox="0 0 36 36">
                        <path class="stroke-current text-gray-200 dark:text-gray-700" fill="none" stroke-width="3.8" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                        <path class="@GetProgressColor(progressPercentage) stroke-current" fill="none" stroke-width="3.8" stroke-linecap="round"
                              stroke-dasharray="@(progressPercentage), 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                              id="progress-circle-@Route.Id" />
                        <text x="18" y="20.5" class="fill-current font-bold text-gray-700 dark:text-gray-200" text-anchor="middle" font-size="7" id="progress-text-@Route.Id">@progressPercentage.ToString("F0")%</text>
                    </svg>
                </div>
            </div>

            <!-- Progress Bar -->
            <div>
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-2">
                    <div class="@GetProgressColor(progressPercentage) h-2.5 rounded-full transition-all duration-500" style="width: @progressPercentage%" id="progress-bar-@Route.Id"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                    <span>0%</span>
                    <span>50%</span>
                    <span>100%</span>
                </div>
            </div>

            <!-- Simülasyon Kontrolleri -->
            @if (Route.Status != RouteStatus.Completed)
            {
                <div id="simulation-controls-@Route.Id">
                    @if (!IsSimulating)
                    {
                        <div class="space-y-3">
                            <button class="w-full py-2 bg-green-500 hover:bg-green-600 text-white rounded-md transition-colors flex items-center justify-center"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => OnStartSimulation.InvokeAsync(Route.Id)">
                                <i class="fas fa-play mr-2"></i> Simülasyonu Başlat
                            </button>
                            <button class="w-full py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center justify-center"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => OnCompleteRoute.InvokeAsync(Route.Id)">
                                <i class="fas fa-check-circle mr-2"></i> Rotayı Tamamla
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="space-y-3">
                            <!-- Hız Kontrolü -->
                            <div class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-sm font-medium text-blue-800 dark:text-blue-200">Simülasyon Hızı</span>
                                    <span class="text-sm font-bold text-blue-600 dark:text-blue-300" id="speed-display-@Route.Id">1x</span>
                                </div>
                                <input type="range" min="1" max="10" value="1"
                                       class="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer dark:bg-blue-700"
                                       id="speed-slider-@Route.Id"
                                       @onchange="@((ChangeEventArgs e) => OnUpdateSimulationSpeed.InvokeAsync((Route.Id, int.Parse(e.Value.ToString()))))" />
                                <div class="flex justify-between text-xs text-blue-600 dark:text-blue-400 mt-1">
                                    <span>1x</span>
                                    <span>5x</span>
                                    <span>10x</span>
                                </div>
                            </div>

                            <!-- Kontrol Butonları -->
                            <div class="flex space-x-2">
                                <button class="flex-1 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors flex items-center justify-center"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => OnStopSimulation.InvokeAsync(Route.Id)">
                                    <i class="fas fa-stop mr-2"></i> Durdur
                                </button>
                                <button class="flex-1 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-md transition-colors flex items-center justify-center"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => OnCompleteRoute.InvokeAsync(Route.Id)">
                                    <i class="fas fa-forward mr-2"></i> Tamamla
                                </button>
                            </div>

                            <!-- Simülasyon Durumu -->
                            <div class="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg text-center">
                                <div class="flex items-center justify-center mb-2">
                                    <i class="fas fa-spinner fa-spin text-green-500 mr-2"></i>
                                    <span class="text-green-700 dark:text-green-300 font-medium">Simülasyon Aktif</span>
                                </div>
                                <div class="text-sm text-green-600 dark:text-green-400" id="simulation-status-@Route.Id">
                                    Başlatılıyor...
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="w-full py-3 bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 rounded-md flex items-center justify-center">
                    <i class="fas fa-check-double mr-2"></i> Rota Tamamlandı
                </div>
            }
        </div>
    </div>
</div>

<!-- Adımlar Listesi -->
<div class="mt-6">
    <h4 class="font-semibold text-gray-800 dark:text-white mb-3 flex items-center">
        <i class="fas fa-list-check mr-2 text-primary-500"></i> Rota Adımları
    </h4>
    <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <table class="min-w-full">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">No</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Adres</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Konum</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Durum</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700" id="route-steps-@Route.Id">
                @foreach (var step in Route.Steps.OrderBy(s => s.Order))
                {
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700" id="step-row-@step.Id">
                        <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">@step.Order</td>
                        <td class="px-4 py-2 text-sm text-gray-700 dark:text-gray-300">@step.Address</td>
                        <td class="px-4 py-2 text-sm text-gray-500 dark:text-gray-400">(@step.Latitude.ToString("F4"), @step.Longitude.ToString("F4"))</td>
                        <td class="px-4 py-2 whitespace-nowrap" id="step-status-@step.Id">
                            <div class="step-status-indicator">
                                <span class="@GetStepStatusClass(step, IsSimulating) px-2 py-0.5 rounded-full text-xs flex items-center w-fit">
                                    <span class="status-icon">@GetStepStatusIcon(step, IsSimulating)</span>
                                    <span class="ml-1">@GetStepStatusText(step, IsSimulating)</span>
                                </span>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    /* Animate pulse for processing steps */
    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.7;
    }

    }

    .animate-pulse {
        animation: pulse 1.5s ease-in-out infinite;
    }

    /* Improved step status indicators */
    .step-status-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .step-status-indicator .status-icon {
            font-size: 1.1em;
        }
</style>

@code {
    [Parameter] public RouteResultDto Route { get; set; } = new();
    [Parameter] public bool IsSimulating { get; set; }
    [Parameter] public EventCallback<Guid> OnStartSimulation { get; set; }
    [Parameter] public EventCallback<Guid> OnStopSimulation { get; set; }
    [Parameter] public EventCallback<(Guid routeId, int speed)> OnUpdateSimulationSpeed { get; set; }
    [Parameter] public EventCallback<Guid> OnCompleteRoute { get; set; }

    private string GetStatusText(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "Planlanmış",
            RouteStatus.Active => "Aktif",
            RouteStatus.Completed => "Tamamlanmış",
            _ => status.ToString()
        };
    }

    private string GetStatusBadgeClass(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
            RouteStatus.Active => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            RouteStatus.Completed => "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetOptimizationTypeText(OptimizationType type)
    {
        return type switch
        {
            OptimizationType.EnKisaMesafe => "En Kısa Mesafe",
            OptimizationType.DolulukOncelikli => "Doluluk Öncelikli",
            _ => type.ToString()
        };
    }

    private string GetProgressColor(double percentage)
    {
        return percentage switch
        {
            >= 100 => "text-green-500",
            >= 75 => "text-blue-500",
            >= 50 => "text-yellow-500",
            >= 25 => "text-orange-500",
            _ => "text-red-500"
        };
    }

    private string GetStepStatusClass(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300";

        if (isSimulating)
            return "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 animate-pulse";

        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300";
    }

    private string GetStepStatusText(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "Tamamlandı";

        if (isSimulating)
            return "İşlemede";

        return "Beklemede";
    }

    private string GetStepStatusIcon(RouteStepDto step, bool isSimulating)
    {
        if (step.IsCompleted)
            return "✅";

        if (isSimulating)
            return "🔄";

        return "⏳";
    }
}