@using EcoRoute.DtoLayer.NotificationDtos
@using Microsoft.AspNetCore.Components

<div class="divide-y divide-gray-200 dark:divide-gray-700">
    @foreach (var notification in Notifications)
    {
        <div @onclick="() => OnClickNotification.InvokeAsync(notification)" class="@GetNotificationClasses(notification)">
            <div class="flex items-start">
                <div class="flex-shrink-0 pt-0.5">
                    <span class="@GetNotificationIconClasses(notification)">
                        <i class="@GetNotificationIcon(notification)"></i>
                    </span>
                </div>
                <div class="ml-3 w-0 flex-1">
                    <div class="flex justify-between">
                        <p class="text-sm font-medium @(notification.IsRead ? "text-gray-600 dark:text-gray-400" : "text-gray-900 dark:text-white")">
                            @notification.Title
                        </p>
                        <p class="text-xs text-gray-500 dark:text-gray-500">
                            @notification.CreatedDate.ToString("dd.MM.yyyy HH:mm")
                        </p>
                    </div>
                    <p class="mt-1 text-sm @(notification.IsRead ? "text-gray-500 dark:text-gray-500" : "text-gray-700 dark:text-gray-300")">
                        @notification.Message
                    </p>
                </div>
                @if (!notification.IsRead)
                {
                    <div class="ml-4 flex-shrink-0 flex">
                        <button @onclick:stopPropagation="true" @onclick="() => OnMarkAsRead.InvokeAsync(notification.Id)" class="rounded-md p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<ResultNotificationDto> Notifications { get; set; } = new();
    [Parameter] public EventCallback<Guid> OnMarkAsRead { get; set; }
    [Parameter] public EventCallback<ResultNotificationDto> OnClickNotification { get; set; }

    private string GetNotificationClasses(ResultNotificationDto notification)
    {
        var baseClasses = "px-6 py-4 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer";
        return notification.IsRead
            ? baseClasses
            : $"{baseClasses} bg-blue-50 dark:bg-blue-900/20";
    }

    private string GetNotificationIconClasses(ResultNotificationDto notification)
    {
        var baseClasses = "flex items-center justify-center h-10 w-10 rounded-full";
        return notification.Type switch
        {
            "Success" => $"{baseClasses} bg-green-100 text-green-500 dark:bg-green-900/30 dark:text-green-400",
            "Warning" => $"{baseClasses} bg-yellow-100 text-yellow-500 dark:bg-yellow-900/30 dark:text-yellow-400",
            "Error" => $"{baseClasses} bg-red-100 text-red-500 dark:bg-red-900/30 dark:text-red-400",
            _ => $"{baseClasses} bg-blue-100 text-blue-500 dark:bg-blue-900/30 dark:text-blue-400" // Info
        };
    }

    private string GetNotificationIcon(ResultNotificationDto notification)
    {
        return notification.Type switch
        {
            "Success" => "fas fa-check",
            "Warning" => "fas fa-exclamation-triangle",
            "Error" => "fas fa-times-circle",
            _ => "fas fa-info-circle" // Info
        };
    }
}
