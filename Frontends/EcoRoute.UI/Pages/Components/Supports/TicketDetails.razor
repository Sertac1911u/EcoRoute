@using EcoRoute.DtoLayer.SupportDtos
@using EcoRoute.UI.Services.SupportsServices
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject SupportTicketService SupportTicketService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center overflow-y-auto transition-all duration-300 animate-fadeIn">
    <div class="bg-white dark:bg-gray-800 rounded-xl max-w-5xl w-full shadow-2xl relative mx-4 my-4 overflow-hidden">
        <div class="sticky top-0 z-10 bg-white dark:bg-gray-800 flex justify-between items-center p-5 border-b border-gray-200 dark:border-gray-700">
            <div class="flex-1">
                <h3 class="text-xl font-bold text-gray-800 dark:text-white truncate">@Ticket.Subject</h3>
                <div class="flex space-x-2 mt-1">
                    <span class="@GetStatusBadgeClass(Ticket.Status) px-2 py-1 text-xs rounded-full">@Ticket.Status</span>
                    <span class="@GetPriorityBadgeClass(Ticket.Priority) px-2 py-1 text-xs rounded-full">@Ticket.Priority</span>
                    <span class="inline-flex items-center text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 px-2 py-1 rounded-full">
                        <i class="fas fa-calendar-alt mr-1"></i> @Ticket.CreateDate.ToString("dd.MM.yyyy HH:mm")
                    </span>
                </div>
            </div>
            <button @onclick="OnClose" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none transition-colors p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="flex flex-col md:flex-row h-[75vh]">
            <div class="w-full md:w-3/5 p-5 overflow-y-auto flex flex-col">
                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-xl mb-4 animate-slideIn">
                    <div class="flex items-start mb-2">
                        <div class="flex-shrink-0 mr-3">
                            <div class="h-10 w-10 rounded-full bg-primary-100 text-primary-600 flex items-center justify-center">
                                <i class="fas fa-user"></i>
                            </div>
                        </div>
                        <div>
                            <div class="font-medium text-gray-800 dark:text-white">
                                @(string.IsNullOrEmpty(Ticket.UserName) ? "Kullanıcı" : Ticket.UserName)
                            </div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">@Ticket.CreateDate.ToString("dd.MM.yyyy HH:mm")</div>
                        </div>
                    </div>
                    <div class="pl-12 text-gray-700 dark:text-gray-300">
                        @Ticket.Description
                    </div>
                    @if (!string.IsNullOrEmpty(Ticket.AttachmentPath))
                    {
                        <div class="pl-12 mt-2">
                            <div class="inline-block px-3 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg text-sm">
                                <i class="fas fa-paperclip mr-2"></i>
                                <a href="@GetFileUrl(Ticket.AttachmentPath)" target="_blank" download class="text-primary-600 dark:text-primary-400 hover:underline">Eki İndir</a>
                            </div>
                        </div>
                    }
                </div>

                @if (Ticket.Responses != null && Ticket.Responses.Any())
                {
                    <div class="space-y-4">
                        @foreach (var response in Ticket.Responses.OrderBy(r => r.ResponseDate))
                        {
                            <div class="p-4 @(response.IsStaff ? "bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500" : "bg-gray-50 dark:bg-gray-700") rounded-xl animate-slideIn">
                                <div class="flex items-start mb-2">
                                    <div class="flex-shrink-0 mr-3">
                                        <div class="h-10 w-10 rounded-full @(response.IsStaff ? "bg-blue-100 text-blue-600" : "bg-primary-100 text-primary-600") flex items-center justify-center">
                                            <i class="fas @(response.IsStaff ? "fa-headset" : "fa-user")"></i>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="font-medium text-gray-800 dark:text-white">
                                            @if (!string.IsNullOrEmpty(response.UserName))
                                            {
                                                @response.UserName
                                                @if (response.IsStaff)
                                                {
                                                    <span class="ml-1 text-xs text-blue-400">(Destek Ekibi)</span>
                                                }
                                            }
                                            else
                                            {
                                                @(response.IsStaff ? "Destek Ekibi" : "Kullanıcı")
                                            }
                                        </div>

                                        <div class="text-sm text-gray-500 dark:text-gray-400">@response.ResponseDate.ToString("dd.MM.yyyy HH:mm")</div>
                                    </div>
                                </div>
                                <div class="pl-12 text-gray-700 dark:text-gray-300">
                                    @response.Message
                                </div>
                                @if (!string.IsNullOrEmpty(response.AttachmentPath))
                                {
                                    <div class="pl-12 mt-2">
                                        <div class="inline-block px-3 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg text-sm">
                                            <i class="fas fa-paperclip mr-2"></i>
                                            <a href="@GetFileUrl(response.AttachmentPath)" target="_blank" download class="text-primary-600 dark:text-primary-400 hover:underline">Eki İndir</a>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }

                <div class="flex-grow"></div>
            </div>

            <div class="w-full md:w-2/5 bg-gray-50 dark:bg-gray-700 p-5 overflow-y-auto border-t md:border-t-0 md:border-l border-gray-200 dark:border-gray-600">
                <div class="flex flex-col h-full">
                    <div class="mb-4">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Destek Talebi Bilgileri</h4>
                        <div class="grid grid-cols-2 gap-3">
                            <div class="bg-white dark:bg-gray-800 p-3 rounded-lg">
                                <div class="text-sm text-gray-500 dark:text-gray-400">Kategori</div>
                                <div class="font-medium text-gray-800 dark:text-white">@(string.IsNullOrEmpty(Ticket.Category) ? "Tanımlanmamış" : Ticket.Category)</div>
                            </div>
                            <div class="bg-white dark:bg-gray-800 p-3 rounded-lg">
                                <div class="text-sm text-gray-500 dark:text-gray-400">Durum</div>
                                <div class="@GetStatusTextClass(Ticket.Status) font-medium">@Ticket.Status</div>
                            </div>
                            <div class="bg-white dark:bg-gray-800 p-3 rounded-lg">
                                <div class="text-sm text-gray-500 dark:text-gray-400">Öncelik</div>
                                <div class="@GetPriorityTextClass(Ticket.Priority) font-medium">@Ticket.Priority</div>
                            </div>
                            <div class="bg-white dark:bg-gray-800 p-3 rounded-lg">
                                <div class="text-sm text-gray-500 dark:text-gray-400">Oluşturulma</div>
                                <div class="font-medium text-gray-800 dark:text-white">@Ticket.CreateDate.ToString("dd.MM.yyyy")</div>
                            </div>
                        </div>
                    </div>

                  

                    @if (Ticket.Status != "Kapatıldı")
                    {
                        <div class="flex-grow">
                            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Yanıt Gönder</h4>

                            @if (CanReply())
                            {
                                <div class="space-y-3">
                                    <div>
                                        <textarea rows="5"
                                                  @bind="replyMessage"
                                                  placeholder="Yanıtınızı buraya yazın..."
                                                  class="block w-full text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-600 p-3 focus:ring-2 focus:ring-primary-500 focus:border-transparent resize-none">
                                                </textarea>
                                    </div>

                                    <div>
                                        <InputFile OnChange="HandleFileSelected" id="fileUpload" class="hidden" />
                                        <label for="fileUpload" class="flex items-center justify-center w-full p-3 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-900/30 transition-colors">
                                            <i class="fas fa-paperclip mr-2 text-gray-500"></i>
                                            <span class="text-gray-500 dark:text-gray-400">@(uploadedFile == null ? "Dosya eklemek için tıklayın" : uploadedFile.Name)</span>
                                        </label>
                                    </div>

                                    <div class="flex justify-between">
                                        @if ((IsAdmin || IsManager) && Ticket.Status != "Kapatıldı")
                                        {
                                            <button @onclick="() => CloseTicketClicked()" class="px-4 py-2 bg-red-500 hover:bg-red-600 rounded-lg text-white transition-all duration-300 transform hover:scale-105 shadow-md">
                                                <i class="fas fa-times-circle mr-2"></i>Kapat
                                            </button>
                                        }
                                        else
                                        {
                                            <div></div> 
                                        }

                                        <button @onclick="SendReply" disabled="@isSubmittingReply" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 rounded-lg text-white transition-all duration-300 transform hover:scale-105 shadow-md">
                                            @if (isSubmittingReply)
                                            {
                                                <div class="flex items-center">
                                                    <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                                                    <span>Gönderiliyor...</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="flex items-center">
                                                    <i class="fas fa-paper-plane mr-2"></i>
                                                    <span>Yanıtla</span>
                                                </div>
                                            }
                                        </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="p-4 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 rounded-lg">
                                    <div class="flex items-center">
                                        <i class="fas fa-exclamation-triangle text-yellow-500 mr-2"></i>
                                        <p class="text-gray-700 dark:text-gray-300">
                                            Destek ekibinin yanıtı bekleniyor. Ekip yanıt verdikten sonra tekrar yanıtlayabilirsiniz.
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="flex-grow flex items-center justify-center">
                            <div class="text-center p-6 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
                                <i class="fas fa-lock text-4xl mb-3 text-gray-400"></i>
                                <p class="text-gray-600 dark:text-gray-300">Bu destek talebi kapatılmıştır.</p>
                                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Kapatılan destek taleplerine yanıt verilemez.</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideIn {
        from

    {
        transform: translateY(10px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .animate-fadeIn {
        animation: fadeIn 0.3s ease-out;
    }

    .animate-slideIn {
        animation: slideIn 0.3s ease-out;
    }
</style>

@code {
    [Parameter] public GetByIdSupportTicketDto Ticket { get; set; }
    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool IsManager { get; set; }
    [Parameter] public bool IsDriver { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<MultipartFormDataContent> OnSubmitReply { get; set; }
    [Parameter] public EventCallback<Guid> OnCloseTicket { get; set; }

    [Parameter] public Guid TicketId { get; set; }

    private string replyMessage = "";
    private IBrowserFile uploadedFile;
    private bool isSubmittingReply = false;
    private string userId;
    private string userName;
    private string firstName;
    private string lastName;
    private string role;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        userName = user.Identity.Name;
        firstName = user.FindFirst("given_name")?.Value ?? "";
        lastName = user.FindFirst("family_name")?.Value ?? "";
        role = user.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "";
    }

    private bool CanReply()
    {
        if (IsAdmin || IsManager) return true;

        if (IsDriver)
        {
            if (Ticket.Responses == null || !Ticket.Responses.Any())
                return true;

            var lastResponse = Ticket.Responses.OrderByDescending(r => r.ResponseDate).FirstOrDefault();
            return lastResponse != null && lastResponse.IsStaff;
        }

        return true;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Açık" => "inline-flex items-center text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400",
            "İşlemde" => "inline-flex items-center text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400",
            "Çözüldü" => "inline-flex items-center text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
            "Kapatıldı" => "inline-flex items-center text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400",
            _ => "inline-flex items-center text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            "Düşük" => "inline-flex items-center text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
            "Orta" => "inline-flex items-center text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400",
            "Yüksek" => "inline-flex items-center text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400",
            "Acil" => "inline-flex items-center text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400",
            _ => "inline-flex items-center text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400"
        };
    }

    private string GetStatusTextClass(string status)
    {
        return status switch
        {
            "Açık" => "text-blue-600 dark:text-blue-400",
            "İşlemde" => "text-yellow-600 dark:text-yellow-400",
            "Çözüldü" => "text-green-600 dark:text-green-400",
            "Kapatıldı" => "text-gray-600 dark:text-gray-400",
            _ => "text-gray-800 dark:text-white"
        };
    }

    private string GetPriorityTextClass(string priority)
    {
        return priority switch
        {
            "Düşük" => "text-green-600 dark:text-green-400",
            "Orta" => "text-blue-600 dark:text-blue-400",
            "Yüksek" => "text-yellow-600 dark:text-yellow-400",
            "Acil" => "text-red-600 dark:text-red-400",
            _ => "text-gray-800 dark:text-white"
        };
    }

    private string GetFileUrl(string path)
    {
        if (string.IsNullOrEmpty(path))
            return "#";

        if (path.StartsWith("http://") || path.StartsWith("https://"))
            return path;

        if (!path.StartsWith("/"))
            path = "/" + path;

        return $"http://localhost:5000{path}";
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;

        if (uploadedFile.Size > 10485760)
        {
            ToastService.ShowWarning("Dosya boyutu 10MB'dan büyük olamaz. Lütfen daha küçük bir dosya seçin.");
            uploadedFile = null;
        }
    }

    private async Task CloseTicketClicked()
    {
        if (TicketId != Guid.Empty)
        {
            await OnCloseTicket.InvokeAsync(TicketId);
        }
        else
        {
            ToastService.ShowError("Geçersiz bilet kimliği! Lütfen sayfayı yenileyin ve tekrar deneyin.");
        }
    }

    private async Task SendReply()
    {
        if (string.IsNullOrWhiteSpace(replyMessage))
        {
            ToastService.ShowWarning("Lütfen bir mesaj girin.");
            return;
        }

        if (isSubmittingReply) return;

        isSubmittingReply = true;

        try
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(TicketId.ToString()), "SupportTicketId");
            content.Add(new StringContent(replyMessage), "Message");
            content.Add(new StringContent((IsAdmin || IsManager).ToString()), "IsStaff");

            content.Add(new StringContent(userId ?? ""), "UserId");
            content.Add(new StringContent(userName ?? ""), "UserName");
            content.Add(new StringContent(firstName ?? ""), "FirstName");
            content.Add(new StringContent(lastName ?? ""), "LastName");
            content.Add(new StringContent(role ?? ""), "Role");

            if (uploadedFile != null)
            {
                var fileContent = new StreamContent(uploadedFile.OpenReadStream(maxAllowedSize: 10485760));
                content.Add(fileContent, "Attachment", uploadedFile.Name);
            }

            await OnSubmitReply.InvokeAsync(content);

            replyMessage = "";
            uploadedFile = null;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Yanıt gönderilirken bir hata oluştu: {ex.Message}");
        }
        finally
        {
            isSubmittingReply = false;
        }
    }
}