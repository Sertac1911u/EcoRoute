@using EcoRoute.DtoLayer.ReportsDtos
@inject EcoRoute.UI.Services.ReportsServices.IReportService ReportService
@inject IJSRuntime JS

<div class="space-y-6">
    <!-- Statistik Kartlar -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
            <p class="text-sm text-gray-500 dark:text-gray-400">Toplam Kullanıcı</p>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@UserList?.Count ?? 0</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
            <p class="text-sm text-gray-500 dark:text-gray-400">Son 24 saatte Aktif Olanlar</p>
            <h3 class="text-2xl font-bold text-green-600 dark:text-green-400">@ActiveToday</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
            <p class="text-sm text-gray-500 dark:text-gray-400">Toplam İşlem Sayısı</p>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@TotalOperationCount</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5">
            <p class="text-sm text-gray-500 dark:text-gray-400">En Aktif Kullanıcı</p>
            <h3 class="text-lg font-bold text-primary-500 dark:text-primary-400">@MostActiveUsername</h3>
            <span class="block text-xs text-gray-500 dark:text-gray-400">(@MostActiveUserOps işlem)</span>
        </div>
    </div>

    <!-- Rol Bazlı Kullanıcı Dağılımı Bar Chart -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-3">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Rol Bazlı Kullanıcı Dağılımı</h3>
        </div>
        <canvas id="userRoleChart" height="80"></canvas>
    </div>

    <!-- Tablo -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 overflow-x-auto">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Kullanıcı Aktivite Listesi</h3>
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase">Kullanıcı Adı</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase">Rol</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase">Son Giriş</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase">İşlem Sayısı</th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                @if (UserList != null && UserList.Count > 0)
                {
                    @foreach (var user in UserList.OrderByDescending(u => u.OperationCount))
                    {
                        <tr>
                            <td class="px-4 py-2">@user.Username</td>
                            <td class="px-4 py-2">@user.Role</td>
                            <td class="px-4 py-2">
                                @if (user.LastLoginDate.HasValue)
                                {
                                    @user.LastLoginDate.Value.ToString("dd.MM.yyyy HH:mm")
                                }
                                else
                                {
                                    <span class="text-gray-400">Hiç Giriş Yapmadı</span>
                                }
                            </td>
                            <td class="px-4 py-2">@user.OperationCount</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">Kayıt bulunamadı.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>
    window.userRoleChart = (labels, data) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('userRoleChart').getContext('2d');
        if (window._userRoleChartInstance) {
            window._userRoleChartInstance.destroy();
        }
        window._userRoleChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Kullanıcı Sayısı',
                    data: data,
                    borderRadius: 6,
                    backgroundColor: [
                        'rgba(59,130,246,0.8)',
                        'rgba(16,185,129,0.8)',
                        'rgba(239,68,68,0.8)'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        min: 0,
                        title: { display: true, text: 'Kullanıcı' }
                    }
                }
            }
        });
    };
</script>
@code {
    private List<UserActivityReportDto> UserList = new();

    private int ActiveToday => UserList.Count(u => u.LastLoginDate.HasValue && u.LastLoginDate.Value > DateTime.Now.AddDays(-1));
    private int TotalOperationCount => UserList.Sum(u => u.OperationCount);
    private string MostActiveUsername => UserList.OrderByDescending(u => u.OperationCount).FirstOrDefault()?.Username ?? "-";
    private int MostActiveUserOps => UserList.OrderByDescending(u => u.OperationCount).FirstOrDefault()?.OperationCount ?? 0;

    protected override async Task OnInitializedAsync()
    {
        UserList = await ReportService.GetUserActivityReportAsync();

        var roleGroups = UserList.GroupBy(u => u.Role)
            .Select(g => new { Role = g.Key, Count = g.Count() })
            .ToList();

        await JS.InvokeVoidAsync(
            "userRoleChart",
            roleGroups.Select(x => x.Role).ToArray(),
            roleGroups.Select(x => x.Count).ToArray()
        );
    }
}
