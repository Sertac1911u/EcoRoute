@using EcoRoute.DtoLayer.ReportsDtos
@inject EcoRoute.UI.Services.ReportsServices.IReportService ReportService
@inject IJSRuntime JS

<div class="space-y-6">
    <!-- Statistik Kartlar -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 flex flex-col justify-between">
            <p class="text-sm text-gray-500 dark:text-gray-400">Toplam Sensör</p>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@SensorList?.Count ?? 0</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 flex flex-col justify-between">
            <p class="text-sm text-gray-500 dark:text-gray-400">Aktif Sensör</p>
            <h3 class="text-2xl font-bold text-green-600 dark:text-green-400">@ActiveCount</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 flex flex-col justify-between">
            <p class="text-sm text-gray-500 dark:text-gray-400">Pasif Sensör</p>
            <h3 class="text-2xl font-bold text-red-500 dark:text-red-400">@PassiveCount</h3>
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 flex flex-col justify-between">
            <p class="text-sm text-gray-500 dark:text-gray-400">Ort. Yaş (gün)</p>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-white">@AverageSensorAgeInDays</h3>
        </div>
    </div>

    <!-- Sensör Tipi Dağılım Grafiği -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-3">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Sensör Tipi Dağılımı</h3>
        </div>
        <canvas id="sensorTypeChart" height="80"></canvas>
    </div>

    <!-- Tablo -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 overflow-x-auto">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Sensörler Listesi</h3>
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">ID</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">Bağlı Kutusu</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">Tip</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">Durum</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">Kurulum</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-200 uppercase tracking-wider">Son Güncelleme</th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                @if (SensorList != null && SensorList.Count > 0)
                {
                    @foreach (var s in SensorList)
                    {
                        <tr>
                            <td class="px-4 py-2 text-xs">@s.SensorId</td>
                            <td class="px-4 py-2">@s.WasteBinId</td>
                            <td class="px-4 py-2">@s.Type</td>
                            <td class="px-4 py-2">
                                <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium
                                    @(s.Status == "Aktif"
                                        ? "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400"
                                        : "bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400")">
                                    @s.Status
                                </span>
                            </td>
                            <td class="px-4 py-2">@s.InstallationDate?.ToString("dd.MM.yyyy")</td>
                            <td class="px-4 py-2">@s.LastUpdate?.ToString("dd.MM.yyyy HH:mm")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="px-4 py-4 text-center text-gray-500 dark:text-gray-400">Kayıt bulunamadı.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>
    window.sensorTypeChart = (labels, data) => {
        if (!window.Chart) return;

        const ctx = document.getElementById('sensorTypeChart').getContext('2d');
        if (window._sensorTypeChartInstance) {
            window._sensorTypeChartInstance.destroy();
        }
        window._sensorTypeChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    borderWidth: 2,
                    backgroundColor: [
                        'rgba(59,130,246,0.7)',
                        'rgba(16,185,129,0.7)',
                        'rgba(234,179,8,0.7)',
                        'rgba(239,68,68,0.7)',
                        'rgba(99,102,241,0.7)',
                        'rgba(236,72,153,0.7)'
                    ],
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right'
                    }
                }
            }
        });
    };
</script>
@code {
    private List<SensorReportDto> SensorList = new();
    private int ActiveCount => SensorList.Count(s => s.Status == "Aktif");
    private int PassiveCount => SensorList.Count(s => s.Status == "Pasif");
    private int AverageSensorAgeInDays => (int)SensorList
        .Where(s => s.InstallationDate.HasValue)
        .Select(s => (DateTime.Now - s.InstallationDate.Value).Days)
        .DefaultIfEmpty(0)
        .Average(x => (int)x);

    protected override async Task OnInitializedAsync()
    {
        SensorList = await ReportService.GetSensorReportAsync();

        var typeGroups = SensorList.GroupBy(s => s.Type)
            .Select(g => new { Type = g.Key, Count = g.Count() })
            .ToList();

        await JS.InvokeVoidAsync(
            "sensorTypeChart",
            typeGroups.Select(x => x.Type).ToArray(),
            typeGroups.Select(x => x.Count).ToArray()
        );
    }
}
