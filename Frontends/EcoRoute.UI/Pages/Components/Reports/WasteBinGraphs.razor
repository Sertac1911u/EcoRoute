@using EcoRoute.DtoLayer.ReportsDtos
@inject EcoRoute.UI.Services.ReportsServices.IReportService ReportService
@inject IJSRuntime JS

<div class="space-y-6 animate-fadeIn">
    <!-- İstatistik Kartları -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-trash text-indigo-500 dark:text-indigo-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Toplam Atık Kutusu</p>
            </div>
            <h3 class="text-2xl font-bold text-slate-800 dark:text-white">@Stats.TotalBins</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">aktif cihaz</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-tachometer-alt text-blue-500 dark:text-blue-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Ortalama Doluluk</p>
            </div>
            <h3 class="text-2xl font-bold text-slate-800 dark:text-white">@($"{Stats.AverageFill:N1}%")</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">tüm kutular</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-red-100 dark:bg-red-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-arrow-up text-red-500 dark:text-red-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">En Yüksek Doluluk</p>
            </div>
            <h3 class="text-2xl font-bold text-red-500 dark:text-red-400">@($"{Stats.MaxFill:N1}%")</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">kritik seviye</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-emerald-100 dark:bg-emerald-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-arrow-down text-emerald-500 dark:text-emerald-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">En Düşük Doluluk</p>
            </div>
            <h3 class="text-2xl font-bold text-emerald-500 dark:text-emerald-400">@($"{Stats.MinFill:N1}%")</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">uygun seviye</span>
        </div>
    </div>

    <!-- Doluluk Oranı Dağılımı Pasta Grafiği -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-chart-pie text-primary-500 dark:text-primary-400 mr-2"></i>
                    Doluluk Oranı Dağılımı
                </h3>
            </div>
            <div class="h-64">
                <canvas id="fillLevelChart" class="transition-all duration-500"></canvas>
            </div>
            <div class="mt-4 flex justify-center gap-5 text-sm text-gray-500 dark:text-gray-400">
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-emerald-500"></span>
                    0-50%
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-blue-500"></span>
                    51-75%
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-amber-500"></span>
                    76-90%
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-red-500"></span>
                    91-100%
                </div>
            </div>
        </div>

        <!-- Cihaz Durumları Pasta Grafiği -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-heartbeat text-pink-500 dark:text-pink-400 mr-2"></i>
                    Cihaz Durumları
                </h3>
            </div>
            <div class="h-64">
                <canvas id="deviceStatusChart" class="transition-all duration-500"></canvas>
            </div>
            <div class="mt-4 flex justify-center gap-5 text-sm text-gray-500 dark:text-gray-400">
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-emerald-500"></span>
                    Çevrimiçi
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-amber-500"></span>
                    Beklemede
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-red-500"></span>
                    Çevrimdışı
                </div>
                <div class="flex items-center">
                    <span class="inline-block w-3 h-3 mr-1 rounded-full bg-gray-400"></span>
                    Bilinmeyen
                </div>
            </div>
        </div>
    </div>

    <!-- Son Güncellenme Zaman Grafiği -->
    <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                <i class="fas fa-history text-indigo-500 dark:text-indigo-400 mr-2"></i>
                Son Güncellenme Zamanları
            </h3>
            <div>
                <button class="text-sm px-3 py-1.5 rounded-lg bg-primary-100 text-primary-600 dark:bg-primary-900/40 dark:text-primary-300 hover:bg-primary-200 transition-colors">
                    <i class="fas fa-sync-alt mr-1"></i> Yenile
                </button>
            </div>
        </div>
        <div class="h-64">
            <canvas id="updateTimeChart" class="transition-all duration-500"></canvas>
        </div>
    </div>
</div>

@code {
    private List<WasteBinReportDto> ReportList = new();
    private WasteBinStatsDto Stats = new();

    protected override async Task OnInitializedAsync()
    {
        ReportList = await ReportService.GetWasteBinReportAsync();
        Stats = await ReportService.GetWasteBinStatsAsync();
        await RenderCharts();
    }

    private async Task RenderCharts()
    {
        // Doluluk oranı dağılımı
        var lowCount = ReportList.Count(r => r.FillLevel <= 50);
        var mediumCount = ReportList.Count(r => r.FillLevel > 50 && r.FillLevel <= 75);
        var highCount = ReportList.Count(r => r.FillLevel > 75 && r.FillLevel <= 90);
        var criticalCount = ReportList.Count(r => r.FillLevel > 90);

        var fillLevelCounts = new[] { lowCount, mediumCount, highCount, criticalCount };
        var fillLevelLabels = new[] { "0-50%", "51-75%", "76-90%", "91-100%" };
        var fillLevelColors = new[] { "rgba(16,185,129,0.7)", "rgba(59,130,246,0.7)", "rgba(245,158,11,0.7)", "rgba(239,68,68,0.7)" };

        await JS.InvokeVoidAsync("renderFillLevelChart", fillLevelLabels, fillLevelCounts, fillLevelColors);

        // Cihaz durumları
        var online = ReportList.Count(r => r.DeviceStatus?.ToLower() == "active" || r.DeviceStatus?.ToLower() == "çevrimiçi");
        var standby = ReportList.Count(r => r.DeviceStatus?.ToLower() == "inactive" || r.DeviceStatus?.ToLower() == "beklemede");
        var offline = ReportList.Count(r => r.DeviceStatus?.ToLower() == "maintenance" || r.DeviceStatus?.ToLower() == "çevrimdışı");
        var faulty = ReportList.Count(r => r.DeviceStatus?.ToLower() == "faulty" || r.DeviceStatus?.ToLower() == "çevrimdışı");
        var unknown = ReportList.Count(r => string.IsNullOrEmpty(r.DeviceStatus) || r.DeviceStatus?.ToLower() == "unknown" || r.DeviceStatus?.ToLower() == "bilinmeyen");

        var statusCounts = new[] { online, standby, offline, faulty, unknown };
        var statusLabels = new[] { "Çevrimiçi", "Beklemede", "Çevrimdışı", "Teknik", "Bilinmeyen" };
        var statusColors = new[] { "rgba(16,185,129,0.7)", "rgba(245,158,11,0.7)", "rgba(239,68,68,0.7)", "rgba(156,163,175,0.7)" };

        await JS.InvokeVoidAsync("renderDeviceStatusChart", statusLabels, statusCounts, statusColors);

        // Son güncellenme zamanları
        var now = DateTime.Now;
        var last24hours = ReportList.Count(r => (now - r.LastUpdated).TotalHours <= 24);
        var last3days = ReportList.Count(r => (now - r.LastUpdated).TotalHours > 24 && (now - r.LastUpdated).TotalHours <= 72);
        var lastWeek = ReportList.Count(r => (now - r.LastUpdated).TotalHours > 72 && (now - r.LastUpdated).TotalHours <= 168);
        var older = ReportList.Count(r => (now - r.LastUpdated).TotalHours > 168);

        var timeCounts = new[] { last24hours, last3days, lastWeek, older };
        var timeLabels = new[] { "Son 24 Saat", "Son 3 Gün", "Son 1 Hafta", "Daha Eski" };
        var timeColors = new[] { "rgba(16,185,129,0.7)", "rgba(59,130,246,0.7)", "rgba(245,158,11,0.7)", "rgba(239,68,68,0.7)" };

        await JS.InvokeVoidAsync("renderUpdateTimeChart", timeLabels, timeCounts, timeColors);
    }
}

<script>
    // Doluluk Oranı Dağılımı
    window.renderFillLevelChart = (labels, data, colors) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('fillLevelChart').getContext('2d');

        if (window._fillLevelChartInstance) {
            window._fillLevelChartInstance.destroy();
        }

        window._fillLevelChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: 'white',
                    borderWidth: 2,
                    hoverOffset: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '65%',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.8)',
                        padding: 10,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} kutu (${percentage}%)`;
                            }
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };

    // Cihaz Durumları Grafiği
    window.renderDeviceStatusChart = (labels, data, colors) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('deviceStatusChart').getContext('2d');

        if (window._deviceStatusChartInstance) {
            window._deviceStatusChartInstance.destroy();
        }

        window._deviceStatusChartInstance = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: 'white',
                    borderWidth: 2,
                    hoverOffset: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.8)',
                        padding: 10,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} kutu (${percentage}%)`;
                            }
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };

    // Son Güncellenme Zamanları
    window.renderUpdateTimeChart = (labels, data, colors) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('updateTimeChart').getContext('2d');

        if (window._updateTimeChartInstance) {
            window._updateTimeChartInstance.destroy();
        }

        window._updateTimeChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Kutu Sayısı',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(c => c.replace('0.7', '1')),
                    borderWidth: 1,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.8)',
                        padding: 10,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            color: 'rgba(156, 163, 175, 0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Kutu Sayısı',
                            font: { size: 11 }
                        }
                    },
                    x: {
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };
</script>