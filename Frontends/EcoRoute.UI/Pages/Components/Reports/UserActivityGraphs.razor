 @using EcoRoute.DtoLayer.ReportsDtos
@inject EcoRoute.UI.Services.ReportsServices.IReportService ReportService
@inject IJSRuntime JS

<div class="space-y-6 animate-fadeIn">
    <!-- İstatistik Kartları -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <!-- Toplam Kullanıcı -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-users text-indigo-500 dark:text-indigo-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Toplam Kullanıcı</p>
            </div>
            <h3 class="text-2xl font-bold text-slate-800 dark:text-white">@UserList.Count</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">aktif hesap</span>
        </div>

        <!-- Son 24 Saat Giriş -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-emerald-100 dark:bg-emerald-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-sign-in-alt text-emerald-500 dark:text-emerald-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Son 24 Saat Giriş</p>
            </div>
            <h3 class="text-2xl font-bold text-emerald-500 dark:text-emerald-400">@RecentLoginCount</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">aktif kullanıcı</span>
        </div>

        <!-- En Çok Rota Yapan -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-yellow-100 dark:bg-yellow-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-crown text-yellow-500 dark:text-yellow-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">En Çok Rota Yapan</p>
            </div>
            <h3 class="text-lg font-bold text-yellow-500 dark:text-yellow-400">@TopDriverByRoutes?.DriverName</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">@(TopDriverByRoutes?.RouteCount ?? 0) rota</span>
        </div>

        <!-- En Uzun Mesafe -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-road text-blue-500 dark:text-blue-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">En Uzun Mesafe</p>
            </div>
            <h3 class="text-lg font-bold text-slate-800 dark:text-white">@TopDriverByDistance?.DriverName</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">@($"{TopDriverByDistance?.TotalDistance:N1}") km</span>
        </div>

        <!-- Ortalama Rota/Sürücü -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-amber-100 dark:bg-amber-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-chart-line text-amber-500 dark:text-amber-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Ortalama Rota/Sürücü</p>
            </div>
            <h3 class="text-2xl font-bold text-amber-500 dark:text-amber-400">@AverageRoutesPerDriver</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">rota sayısı</span>
        </div>
    </div>

    <!-- İlk Satır Grafikler -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- En Aktif Sürücüler (Rota Sayısı) -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-medal text-primary-500 dark:text-primary-400 mr-2"></i>
                    En Aktif Sürücüler (Rota Sayısı)
                </h3>
            </div>
            <div class="h-64">
                <canvas id="driverRoutesChart" class="transition-all duration-500"></canvas>
            </div>
        </div>

        <!-- Sürücü Mesafe Performansı -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-tachometer-alt text-indigo-500 dark:text-indigo-400 mr-2"></i>
                    Sürücü Mesafe Performansı
                </h3>
            </div>
            <div class="h-64">
                <canvas id="driverDistanceChart" class="transition-all duration-500"></canvas>
            </div>
        </div>
    </div>

    <!-- İkinci Satır Grafikler -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Kullanıcı Rolleri Dağılımı -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-user-tag text-indigo-500 dark:text-indigo-400 mr-2"></i>
                    Kullanıcı Rolleri Dağılımı
                </h3>
            </div>
            <div class="h-64">
                <canvas id="userRolesChart" class="transition-all duration-500"></canvas>
            </div>
        </div>

        <!-- En Son Rota Oluşturanlar -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-history text-purple-500 dark:text-purple-400 mr-2"></i>
                    En Son Rota Oluşturanlar
                </h3>
            </div>
            <div class="space-y-3 max-h-64 overflow-y-auto">
                @foreach (var driver in RecentActiveDrivers.Take(8))
                {
                    <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-slate-700/50 rounded-lg">
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 rounded-full bg-gradient-to-br from-green-400 to-blue-500 flex items-center justify-center text-white text-sm font-semibold">
                                @(driver.DriverName?.Substring(0, 1).ToUpper() ?? "?")
                            </div>
                            <div>
                                <p class="text-sm font-medium text-slate-800 dark:text-white">@driver.DriverName</p>
                                <p class="text-xs text-gray-500 dark:text-gray-400">@driver.RouteCount rota</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <p class="text-xs text-gray-500 dark:text-gray-400">@GetTimeAgo(driver.LastRouteDate)</p>
                            <p class="text-xs text-blue-500 dark:text-blue-400">@($"{driver.TotalDistance:N1}") km</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Son Giriş Aktivite Zaman Çizelgesi -->
    <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                <i class="fas fa-calendar-check text-emerald-500 dark:text-emerald-400 mr-2"></i>
                Son Giriş Aktivite Zaman Çizelgesi
            </h3>
            <div>
                <button @onclick="RefreshData" class="text-sm px-3 py-1.5 rounded-lg bg-primary-100 text-primary-600 dark:bg-primary-900/40 dark:text-primary-300 hover:bg-primary-200 transition-colors">
                    <i class="fas fa-sync-alt mr-1"></i> Yenile
                </button>
            </div>
        </div>
        <div class="h-64">
            <canvas id="loginTimelineChart" class="transition-all duration-500"></canvas>
        </div>
    </div>
</div>

@code {
    private List<RouteReportDto> RouteList = new();
    private List<UserActivityReportDto> UserList = new();

    // Sürücü istatistikleri için yardımcı sınıf
    public class DriverStats
    {
        public string DriverName { get; set; }
        public string DriverId { get; set; }
        public int RouteCount { get; set; }
        public double TotalDistance { get; set; }
        public double TotalCO2 { get; set; }
        public DateTime? LastRouteDate { get; set; }
    }

    private List<DriverStats> DriverStatsList => RouteList
        .Where(r => !string.IsNullOrEmpty(r.DriverName))
        .GroupBy(r => new { r.DriverId, r.DriverName })
        .Select(g => new DriverStats
            {
                DriverName = g.Key.DriverName,
                DriverId = g.Key.DriverId,
                RouteCount = g.Count(),
                TotalDistance = g.Sum(r => r.TotalDistanceKm),
                TotalCO2 = g.Sum(r => r.EstimatedCO2Kg),
                LastRouteDate = g.Max(r => r.StartTime)
            })
        .ToList();

    // Kullanıcı Metrikleri
    private int RecentLoginCount => UserList.Count(u => u.LastLoginDate.HasValue && (DateTime.Now - u.LastLoginDate.Value).TotalHours <= 24);

    // Sürücü Metrikleri
    private DriverStats? TopDriverByRoutes => DriverStatsList.OrderByDescending(d => d.RouteCount).FirstOrDefault();
    private DriverStats? TopDriverByDistance => DriverStatsList.OrderByDescending(d => d.TotalDistance).FirstOrDefault();
    private List<DriverStats> RecentActiveDrivers => DriverStatsList.OrderByDescending(d => d.LastRouteDate).ToList();

    private int AverageRoutesPerDriver
    {
        get
        {
            return DriverStatsList.Any() ? (int)DriverStatsList.Average(d => d.RouteCount) : 0;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        RouteList = await ReportService.GetRouteReportAsync();
        UserList = await ReportService.GetUserActivityReportAsync();
        await RenderCharts();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetTimeAgo(DateTime? date)
    {
        if (!date.HasValue) return "Hiç rota oluşturmamış";

        var timeSpan = DateTime.Now - date.Value;

        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} dakika önce";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} saat önce";
        else if (timeSpan.TotalDays < 30)
            return $"{(int)timeSpan.TotalDays} gün önce";
        else
            return date.Value.ToString("dd.MM.yyyy");
    }

    private async Task RenderCharts()
    {
        // En aktif sürücüler (rota sayısına göre)
        var topDriversByRoutes = DriverStatsList
            .OrderByDescending(d => d.RouteCount)
            .Take(10)
            .ToList();

        var driverNames1 = topDriversByRoutes.Select(d => d.DriverName).ToArray();
        var routeCounts = topDriversByRoutes.Select(d => d.RouteCount).ToArray();

        await JS.InvokeVoidAsync("renderDriverRoutesChart", driverNames1, routeCounts);

        // Sürücü mesafe performansı
        var topDriversByDistance = DriverStatsList
            .OrderByDescending(d => d.TotalDistance)
            .Take(10)
            .ToList();

        var driverNames2 = topDriversByDistance.Select(d => d.DriverName).ToArray();
        var distances = topDriversByDistance.Select(d => d.TotalDistance).ToArray();

        await JS.InvokeVoidAsync("renderDriverDistanceChart", driverNames2, distances);

        // Kullanıcı rolleri dağılımı
        var roleGroups = UserList
            .GroupBy(u => string.IsNullOrEmpty(u.Role) ? "Bilinmeyen" : u.Role)
            .Select(g => new { Role = g.Key, Count = g.Count() })
            .OrderByDescending(x => x.Count)
            .ToList();

        var roleLabels = roleGroups.Select(g => g.Role).ToArray();
        var roleCounts = roleGroups.Select(g => g.Count).ToArray();
        var roleColors = GetRoleColors(roleLabels);

        await JS.InvokeVoidAsync("renderUserRolesChart", roleLabels, roleCounts, roleColors);

        // Giriş aktivite zaman çizelgesi
        var loginData = GetLoginTimelineData();
        await JS.InvokeVoidAsync("renderLoginTimelineChart", loginData.Labels, loginData.Counts);
    }

    private (string[] Labels, int[] Counts) GetLoginTimelineData()
    {
        // Son 14 günün giriş verilerini alıyoruz
        var now = DateTime.Now;
        var days = Enumerable.Range(0, 14)
            .Select(i => now.AddDays(-i))
            .Select(date => new { Date = date, Label = date.ToString("dd MMM") })
            .Reverse()
            .ToList();

        var labels = days.Select(d => d.Label).ToArray();

        var counts = days.Select(day =>
            UserList.Count(u =>
                u.LastLoginDate.HasValue &&
                u.LastLoginDate.Value.Date == day.Date.Date)
        ).ToArray();

        return (labels, counts);
    }

    private string[] GetRoleColors(string[] roles)
    {
        var colorMap = new Dictionary<string, string>
        {
            { "SuperAdmin", "rgba(239,68,68,0.7)" }, // red
            { "Admin", "rgba(245,158,11,0.7)" },    // amber
            { "Manager", "rgba(59,130,246,0.7)" },   // blue
            { "User", "rgba(16,185,129,0.7)" },      // emerald
            { "Driver", "rgba(139,92,246,0.7)" },    // violet
            { "Operator", "rgba(236,72,153,0.7)" },  // pink
            { "Bilinmeyen", "rgba(156,163,175,0.7)" } // gray
        };

        return roles.Select(role => colorMap.ContainsKey(role) ? colorMap[role] : "rgba(107,114,128,0.7)").ToArray();
    }
}

<script>
    // Sürücü Rota Sayısı Grafiği
    window.renderDriverRoutesChart = (driverNames, routeCounts) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('driverRoutesChart').getContext('2d');

        if (window._driverRoutesChartInstance) {
            window._driverRoutesChartInstance.destroy();
        }

        window._driverRoutesChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: driverNames,
                datasets: [{
                    label: 'Rota Sayısı',
                    data: routeCounts,
                    backgroundColor: 'rgba(16,185,129,0.7)',
                    borderColor: 'rgba(16,185,129,1)',
                    borderWidth: 1,
                    borderRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                indexAxis: 'y',
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.9)',
                        padding: 12,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                return `Toplam Rota: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            display: false
                        }
                    },
                    x: {
                        beginAtZero: true,
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            color: 'rgba(156, 163, 175, 0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Rota Sayısı',
                            font: { size: 11 }
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };

    // Sürücü Mesafe Performansı Grafiği
    window.renderDriverDistanceChart = (driverNames, distances) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('driverDistanceChart').getContext('2d');

        if (window._driverDistanceChartInstance) {
            window._driverDistanceChartInstance.destroy();
        }

        window._driverDistanceChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: driverNames,
                datasets: [{
                    label: 'Toplam Mesafe (km)',
                    data: distances,
                    backgroundColor: 'rgba(59,130,246,0.7)',
                    borderColor: 'rgba(59,130,246,1)',
                    borderWidth: 1,
                    borderRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                indexAxis: 'y',
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.9)',
                        padding: 12,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                return `Toplam Mesafe: ${context.raw.toFixed(1)} km`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            display: false
                        }
                    },
                    x: {
                        beginAtZero: true,
                        ticks: {
                            padding: 8,
                            font: { size: 11 },
                            callback: function(value) {
                                return value.toFixed(1) + ' km';
                            }
                        },
                        grid: {
                            color: 'rgba(156, 163, 175, 0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Mesafe (km)',
                            font: { size: 11 }
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };

    // Kullanıcı Rolleri Dağılımı
    window.renderUserRolesChart = (roles, counts, colors) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('userRolesChart').getContext('2d');

        if (window._userRolesChartInstance) {
            window._userRolesChartInstance.destroy();
        }

        window._userRolesChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: roles,
                datasets: [{
                    data: counts,
                    backgroundColor: colors,
                    borderColor: 'white',
                    borderWidth: 2,
                    hoverOffset: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '60%',
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 15,
                            boxWidth: 10,
                            font: { size: 11 }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.8)',
                        padding: 10,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} kullanıcı (${percentage}%)`;
                            }
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };

    // Giriş Aktivite Zaman Çizelgesi
    window.renderLoginTimelineChart = (dates, counts) => {
        if (!window.Chart) return;
        const ctx = document.getElementById('loginTimelineChart').getContext('2d');

        if (window._loginTimelineChartInstance) {
            window._loginTimelineChartInstance.destroy();
        }

        // Define gradient fill
        const gradient = ctx.createLinearGradient(0, 0, 0, 300);
        gradient.addColorStop(0, 'rgba(16,185,129,0.3)');
        gradient.addColorStop(1, 'rgba(16,185,129,0.02)');

        window._loginTimelineChartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Giriş Yapan Kullanıcı Sayısı',
                    data: counts,
                    tension: 0.4,
                    borderWidth: 2,
                    borderColor: 'rgba(16,185,129,0.9)',
                    backgroundColor: gradient,
                    fill: true,
                    pointRadius: 3,
                    pointBackgroundColor: 'white',
                    pointBorderColor: 'rgba(16,185,129,0.9)',
                    pointBorderWidth: 2,
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: 'white',
                    pointHoverBorderColor: 'rgba(16,185,129,0.9)',
                    pointHoverBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        backgroundColor: 'rgba(17, 24, 39, 0.8)',
                        padding: 10,
                        titleFont: {
                            size: 13,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            color: 'rgba(156, 163, 175, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            padding: 8,
                            font: { size: 11 }
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                animation: {
                    duration: 800,
                    easing: 'easeOutQuart'
                }
            }
        });
    };
</script>