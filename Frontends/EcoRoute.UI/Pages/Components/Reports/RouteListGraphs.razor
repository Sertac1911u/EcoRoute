@using EcoRoute.DtoLayer.ReportsDtos
@inject EcoRoute.UI.Services.ReportsServices.IReportService ReportService
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="space-y-6 animate-fadeIn">
    <!-- İstatistik Kartları -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-route text-indigo-500 dark:text-indigo-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Toplam Rota</p>
            </div>
            <h3 class="text-2xl font-bold text-slate-800 dark:text-white">@RouteList.Count</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">tüm zamanlar</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-emerald-100 dark:bg-emerald-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-check-circle text-emerald-500 dark:text-emerald-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Tamamlanan Rota</p>
            </div>
            <h3 class="text-2xl font-bold text-emerald-500 dark:text-emerald-400">@CompletedRoutes</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">başarıyla tamamlandı</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-road text-blue-500 dark:text-blue-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Toplam Mesafe</p>
            </div>
            <h3 class="text-2xl font-bold text-slate-800 dark:text-white">@($"{TotalDistance:N1}")</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">kilometre</span>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700 flex flex-col justify-between h-32">
            <div class="flex items-center mb-2">
                <div class="w-10 h-10 rounded-full bg-amber-100 dark:bg-amber-900/30 flex items-center justify-center mr-3">
                    <i class="fas fa-cloud text-amber-500 dark:text-amber-400"></i>
                </div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Toplam CO₂</p>
            </div>
            <h3 class="text-2xl font-bold text-amber-500 dark:text-amber-400">@($"{TotalCO2:N1}")</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400 mt-1">kg</span>
        </div>
    </div>

    <!-- Durum Dağılımı ve Zaman Grafiği -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-chart-pie text-primary-500 dark:text-primary-400 mr-2"></i>
                    Rota Durumları
                </h3>
            </div>
            <div class="h-64 relative">
                @if (IsLoading)
                {
                    <div class="absolute inset-0 flex items-center justify-center bg-white/50 dark:bg-slate-800/50">
                        <div class="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                    </div>
                }
                <canvas id="routeStatusChart" class="transition-all duration-500"></canvas>
            </div>
        </div>

        <!-- Rota Oluşturma Zaman Grafiği -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                    <i class="fas fa-calendar-alt text-indigo-500 dark:text-indigo-400 mr-2"></i>
                    Rota Oluşturma Trendi
                </h3>
                <div class="flex items-center gap-2">
                    <button @onclick='() => ChangeTimeframe("weekly")' class="text-sm px-3 py-1.5 rounded-lg @(Timeframe == "weekly" ? "bg-primary-500 text-white" : "bg-gray-100 dark:bg-slate-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-slate-600") transition-colors" disabled="@IsLoading">
                        <i class="fas fa-calendar-week mr-1"></i> Haftalık
                    </button>
                    <button @onclick='() => ChangeTimeframe("monthly")' class="text-sm px-3 py-1.5 rounded-lg @(Timeframe == "monthly" ? "bg-primary-500 text-white" : "bg-gray-100 dark:bg-slate-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-slate-600") transition-colors" disabled="@IsLoading">
                        <i class="fas fa-calendar-alt mr-1"></i> Aylık
                    </button>
                </div>
            </div>
            <div class="h-64 relative">
                @if (IsLoading)
                {
                    <div class="absolute inset-0 flex items-center justify-center bg-white/50 dark:bg-slate-800/50">
                        <div class="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                    </div>
                }
                <canvas id="routeCreationChart" class="transition-all duration-500"></canvas>
            </div>
        </div>
    </div>

    <!-- Sürücü Bazlı Rota Sayısı -->
    <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                <i class="fas fa-user-friends text-emerald-500 dark:text-emerald-400 mr-2"></i>
                Sürücü Bazlı Rota Sayısı
            </h3>
            <div>
                <select @onchange="OnDriverFilterChange" class="text-sm px-3 py-1.5 rounded-lg bg-gray-100 dark:bg-slate-700 text-gray-700 dark:text-gray-300 border-0 focus:ring-2 focus:ring-primary-500" disabled="@IsLoading">
                    <option value="all">Tüm Sürücüler</option>
                    <option value="active">Sadece Aktif Sürücüler</option>
                    <option value="top">En Aktif 5 Sürücü</option>
                </select>
            </div>
        </div>
        <div class="h-64 relative">
            @if (IsLoading)
            {
                <div class="absolute inset-0 flex items-center justify-center bg-white/50 dark:bg-slate-800/50">
                    <div class="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                </div>
            }
            <canvas id="driverRouteChart" class="transition-all duration-500"></canvas>
        </div>
    </div>

    <!-- CO2 ve Mesafe Oranı -->
    <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm p-5 border border-gray-100 dark:border-slate-700">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-slate-800 dark:text-white flex items-center">
                <i class="fas fa-chart-scatter text-blue-500 dark:text-blue-400 mr-2"></i>
                CO₂ ve Mesafe İlişkisi
            </h3>
        </div>
        <div class="h-64 relative">
            @if (IsLoading)
            {
                <div class="absolute inset-0 flex items-center justify-center bg-white/50 dark:bg-slate-800/50">
                    <div class="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                </div>
            }
            <canvas id="co2DistanceChart" class="transition-all duration-500"></canvas>
        </div>
    </div>
</div>

@code {
    private List<RouteReportDto> RouteList = new();
    private string Timeframe = "monthly";
    private string DriverFilter = "all";
    private bool IsLoading = true;
    private CancellationTokenSource? _cancellationTokenSource;

    private int CompletedRoutes => RouteList.Count(r => r.Status == 2);
    private double TotalDistance => RouteList.Sum(r => r.TotalDistanceKm);
    private double TotalCO2 => RouteList.Sum(r => r.EstimatedCO2Kg);

    protected override async Task OnInitializedAsync()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            RouteList = await ReportService.GetRouteReportAsync();

            await Task.Delay(100, _cancellationTokenSource?.Token ?? CancellationToken.None);
            await RenderCharts();
        }
        catch (OperationCanceledException)
        {
            // İptal edildi
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Route list data loading error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChangeTimeframe(string timeframe)
    {
        if (IsLoading) return;

        Timeframe = timeframe;
        await RenderRouteCreationChart();
    }

    private async Task OnDriverFilterChange(ChangeEventArgs e)
    {
        if (IsLoading) return;

        DriverFilter = e.Value.ToString();
        await RenderDriverRouteChart();
    }

    private async Task RenderCharts()
    {
        try
        {
            await RenderRouteStatusChart();
            await RenderRouteCreationChart();
            await RenderDriverRouteChart();
            await RenderCO2DistanceChart();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chart rendering error: {ex.Message}");
        }
    }

    private async Task RenderRouteStatusChart()
    {
        var completed = RouteList.Count(r => r.Status == 1);
        var active = RouteList.Count(r => r.Status == 0);
        var unknown = RouteList.Count(r => r.Status != 0 && r.Status != 1);

        var statusLabels = new[] { "Tamamlandı", "Aktif", "Diğer" };
        var statusCounts = new[] { completed, active, unknown };
        var statusColors = new[] { "rgba(16,185,129,0.7)", "rgba(245,158,11,0.7)", "rgba(156,163,175,0.7)" };

        await SafeJSInvoke("renderRouteStatusChart", statusLabels, statusCounts, statusColors);
    }

    private async Task RenderRouteCreationChart()
    {
        var now = DateTime.Now;
        var timeData = new List<(string Label, int Count)>();

        if (Timeframe == "weekly")
        {
            // Son 7 günün verileri
            for (int i = 6; i >= 0; i--)
            {
                var date = now.AddDays(-i);
                var count = RouteList.Count(r => r.StartTime.Date == date.Date);
                timeData.Add((date.ToString("dd MMM"), count));
            }
        }
        else
        {
            // Son 30 günün verileri
            for (int i = 29; i >= 0; i--)
            {
                var date = now.AddDays(-i);
                var count = RouteList.Count(r => r.StartTime.Date == date.Date);
                timeData.Add((date.ToString("dd MMM"), count));
            }
        }

        var labels = timeData.Select(d => d.Label).ToArray();
        var counts = timeData.Select(d => d.Count).ToArray();

        await SafeJSInvoke("renderRouteCreationChart", labels, counts);
    }

    private async Task RenderDriverRouteChart()
    {
        var driverRoutes = RouteList
            .GroupBy(r => r.DriverName ?? "Bilinmeyen")
            .Select(g => new { Driver = g.Key, Count = g.Count() })
            .OrderByDescending(d => d.Count)
            .AsEnumerable();

        if (DriverFilter == "top")
        {
            driverRoutes = driverRoutes.Take(5);
        }
        else if (DriverFilter == "active")
        {
            driverRoutes = driverRoutes.Where(d => d.Count > 0);
        }

        var drivers = driverRoutes.Select(d => d.Driver).ToArray();
        var counts = driverRoutes.Select(d => d.Count).ToArray();

        await SafeJSInvoke("renderDriverRouteChart", drivers, counts);
    }

    private async Task RenderCO2DistanceChart()
    {
        var distances = RouteList.Select(r => r.TotalDistanceKm).ToArray();
        var co2Values = RouteList.Select(r => r.EstimatedCO2Kg).ToArray();
        var routeIds = RouteList.Select(r => r.Id.ToString().Substring(0, 8)).ToArray();

        await SafeJSInvoke("renderCO2DistanceChart", distances, co2Values, routeIds);
    }

    private async Task SafeJSInvoke(string functionName, params object[] parameters)
    {
        try
        {
            await JS.InvokeVoidAsync(functionName, parameters);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JS function '{functionName}' error: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();

        try
        {
            await JS.InvokeVoidAsync("cleanupRouteListCharts");
        }
        catch { }
    }
}

<script>
    window.renderRouteStatusChart = async function(labels, data, colors) {
        try {
            await (window.ChartHelper?.waitForElement('routeStatusChart') ?? Promise.resolve());

            const chartConfig = {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: colors,
                        borderColor: 'white',
                        borderWidth: 2,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '60%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 15,
                                boxWidth: 10,
                                font: { size: 11 }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(17, 24, 39, 0.8)',
                            padding: 10,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${context.label}: ${value} rota (${percentage}%)`;
                                }
                            }
                        }
                    },
                    animation: { duration: 800, easing: 'easeOutQuart' }
                }
            };

            if (window.ChartHelper) {
                return window.ChartHelper.safeRenderChart('routeStatusChart', chartConfig, '_routeStatusChartInstance');
            } else {
                const canvas = document.getElementById('routeStatusChart');
                if (!canvas || !window.Chart) return false;

                const ctx = canvas.getContext('2d');
                if (!ctx) return false;

                if (window._routeStatusChartInstance) {
                    window._routeStatusChartInstance.destroy();
                }

                window._routeStatusChartInstance = new Chart(ctx, chartConfig);
                return true;
            }
        } catch (error) {
            console.error('Error in renderRouteStatusChart:', error);
            return false;
        }
    };

    window.renderRouteCreationChart = async function(labels, data) {
        try {
            await (window.ChartHelper?.waitForElement('routeCreationChart') ?? Promise.resolve());

            const chartConfig = {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Oluşturulan Rota Sayısı',
                        data: data,
                        tension: 0.4,
                        borderWidth: 2,
                        borderColor: 'rgba(139,92,246,0.9)',
                        backgroundColor: function(context) {
                            const ctx = context.chart.ctx;
                            const gradient = ctx.createLinearGradient(0, 0, 0, 300);
                            gradient.addColorStop(0, 'rgba(139,92,246,0.3)');
                            gradient.addColorStop(1, 'rgba(139,92,246,0.02)');
                            return gradient;
                        },
                        fill: true,
                        pointRadius: 3,
                        pointBackgroundColor: 'white',
                        pointBorderColor: 'rgba(139,92,246,0.9)',
                        pointBorderWidth: 2,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: 'white',
                        pointHoverBorderColor: 'rgba(139,92,246,0.9)',
                        pointHoverBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(17, 24, 39, 0.8)',
                            padding: 10,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { padding: 8, font: { size: 11 } },
                            grid: { color: 'rgba(156, 163, 175, 0.1)' }
                        },
                        x: {
                            ticks: {
                                padding: 8,
                                font: { size: 11 },
                                maxRotation: 45,
                                minRotation: 45
                            },
                            grid: { display: false }
                        }
                    },
                    animation: { duration: 800, easing: 'easeOutQuart' }
                }
            };

            if (window.ChartHelper) {
                return window.ChartHelper.safeRenderChart('routeCreationChart', chartConfig, '_routeCreationChartInstance');
            } else {
                const canvas = document.getElementById('routeCreationChart');
                if (!canvas || !window.Chart) return false;

                const ctx = canvas.getContext('2d');
                if (!ctx) return false;

                if (window._routeCreationChartInstance) {
                    window._routeCreationChartInstance.destroy();
                }

                window._routeCreationChartInstance = new Chart(ctx, chartConfig);
                return true;
            }
        } catch (error) {
            console.error('Error in renderRouteCreationChart:', error);
            return false;
        }
    };

    window.renderDriverRouteChart = async function(drivers, counts) {
        try {
            await (window.ChartHelper?.waitForElement('driverRouteChart') ?? Promise.resolve());

            // Create a color palette for the bars
            const colors = counts.map((count, index) => {
                const hue = (index * 20) % 360;
                return `hsla(${hue}, 75%, 60%, 0.7)`;
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: drivers,
                    datasets: [{
                        label: 'Rota Sayısı',
                        data: counts,
                        backgroundColor: colors,
                        borderColor: colors.map(c => c.replace('0.7', '1')),
                        borderWidth: 1,
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(17, 24, 39, 0.8)',
                            padding: 10,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            callbacks: {
                                label: function(context) {
                                    return `Rota Sayısı: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { padding: 8, font: { size: 11 } },
                            grid: { color: 'rgba(156, 163, 175, 0.1)' },
                            title: { display: true, text: 'Rota Sayısı', font: { size: 11 } }
                        },
                        x: {
                            ticks: { padding: 8, font: { size: 11 } },
                            grid: { display: false }
                        }
                    },
                    animation: { duration: 800, easing: 'easeOutQuart' }
                }
            };

            if (window.ChartHelper) {
                return window.ChartHelper.safeRenderChart('driverRouteChart', chartConfig, '_driverRouteChartInstance');
            } else {
                const canvas = document.getElementById('driverRouteChart');
                if (!canvas || !window.Chart) return false;

                const ctx = canvas.getContext('2d');
                if (!ctx) return false;

                if (window._driverRouteChartInstance) {
                    window._driverRouteChartInstance.destroy();
                }

                window._driverRouteChartInstance = new Chart(ctx, chartConfig);
                return true;
            }
        } catch (error) {
            console.error('Error in renderDriverRouteChart:', error);
            return false;
        }
    };

    window.renderCO2DistanceChart = async function(distances, co2Values, routeIds) {
        try {
            await (window.ChartHelper?.waitForElement('co2DistanceChart') ?? Promise.resolve());

            // Create scatter plot data points
            const data = [];
            for (let i = 0; i < distances.length; i++) {
                data.push({
                    x: distances[i],
                    y: co2Values[i],
                    routeId: routeIds[i]
                });
            }

            const chartConfig = {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Rotalar',
                        data: data,
                        backgroundColor: 'rgba(59,130,246,0.7)',
                        borderColor: 'white',
                        borderWidth: 1,
                        pointRadius: 5,
                        pointHoverRadius: 7
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(17, 24, 39, 0.8)',
                            padding: 10,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            callbacks: {
                                title: function(tooltipItems) {
                                    return `Rota ID: ${tooltipItems[0].raw.routeId}...`;
                                },
                                label: function(context) {
                                    return [
                                        `Mesafe: ${context.raw.x.toFixed(2)} km`,
                                        `CO₂: ${context.raw.y.toFixed(2)} kg`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { padding: 8, font: { size: 11 } },
                            grid: { color: 'rgba(156, 163, 175, 0.1)' },
                            title: { display: true, text: 'CO₂ Emisyonu (kg)', font: { size: 11 } }
                        },
                        x: {
                            beginAtZero: true,
                            ticks: { padding: 8, font: { size: 11 } },
                            grid: { color: 'rgba(156, 163, 175, 0.1)' },
                            title: { display: true, text: 'Mesafe (km)', font: { size: 11 } }
                        }
                    },
                    animation: { duration: 800, easing: 'easeOutQuart' }
                }
            };

            if (window.ChartHelper) {
                return window.ChartHelper.safeRenderChart('co2DistanceChart', chartConfig, '_co2DistanceChartInstance');
            } else {
                const canvas = document.getElementById('co2DistanceChart');
                if (!canvas || !window.Chart) return false;

                const ctx = canvas.getContext('2d');
                if (!ctx) return false;

                if (window._co2DistanceChartInstance) {
                    window._co2DistanceChartInstance.destroy();
                }

                window._co2DistanceChartInstance = new Chart(ctx, chartConfig);
                return true;
            }
        } catch (error) {
            console.error('Error in renderCO2DistanceChart:', error);
            return false;
        }
    };

    window.cleanupRouteListCharts = function() {
        try {
            if (window._routeStatusChartInstance) {
                window._routeStatusChartInstance.destroy();
                window._routeStatusChartInstance = null;
            }
            if (window._routeCreationChartInstance) {
                window._routeCreationChartInstance.destroy();
                window._routeCreationChartInstance = null;
            }
            if (window._driverRouteChartInstance) {
                window._driverRouteChartInstance.destroy();
                window._driverRouteChartInstance = null;
            }
            if (window._co2DistanceChartInstance) {
                window._co2DistanceChartInstance.destroy();
                window._co2DistanceChartInstance = null;
            }
        } catch (error) {
            console.error('Error cleaning up route list charts:', error);
        }
    };
</script>