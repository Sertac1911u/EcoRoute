// <auto-generated />
using System;
using EcoRoute.Supports.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoRoute.Settings.Migrations
{
    [DbContext(typeof(SettingsContext))]
    partial class SettingsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoRoute.Settings.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Avatars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20101f65-5a0d-43a3-9192-f48f048cd748"),
                            Name = "Avatar 1",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Can"
                        },
                        new
                        {
                            Id = new Guid("6dd374fc-ef36-488c-93b5-e84b0f10e3bb"),
                            Name = "Avatar 2",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Olivia"
                        },
                        new
                        {
                            Id = new Guid("bfab2c85-221b-4be2-b5e2-776249bd5d53"),
                            Name = "Avatar 3",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Atlas"
                        },
                        new
                        {
                            Id = new Guid("4f485da0-2331-454b-98b8-3e8cf5af9fd1"),
                            Name = "Avatar 4",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Deniz"
                        },
                        new
                        {
                            Id = new Guid("f1d0748d-07f6-41d5-be33-a23856ae6e75"),
                            Name = "Avatar 5",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Nova"
                        },
                        new
                        {
                            Id = new Guid("c62abf20-405e-4adc-9372-bb8b7f302e20"),
                            Name = "Avatar 6",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Emir"
                        },
                        new
                        {
                            Id = new Guid("c0327eb9-af32-4f79-82b1-a60e02b67323"),
                            Name = "Avatar 7",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Jasper"
                        },
                        new
                        {
                            Id = new Guid("d7ea1dd4-49ee-4b20-b1dd-15b6602aada2"),
                            Name = "Avatar 8",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Lina"
                        },
                        new
                        {
                            Id = new Guid("ae0bda01-f887-4803-8bb5-2527b5bf2675"),
                            Name = "Avatar 9",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Arda"
                        },
                        new
                        {
                            Id = new Guid("a8d597cf-673b-459b-8c85-561886d54cce"),
                            Name = "Avatar 10",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Felix"
                        },
                        new
                        {
                            Id = new Guid("62d4523f-3b8c-46bd-bb2e-7bc32b20b9af"),
                            Name = "Avatar 11",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Zeynep"
                        },
                        new
                        {
                            Id = new Guid("e084c1bf-589e-40d8-b230-bec3cb15c62e"),
                            Name = "Avatar 12",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Leo"
                        },
                        new
                        {
                            Id = new Guid("d273d50a-c072-41a9-9890-a90377db7e94"),
                            Name = "Avatar 13",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Selin"
                        },
                        new
                        {
                            Id = new Guid("72311dd4-6ee7-414c-a6ea-2db9e38aaeb3"),
                            Name = "Avatar 14",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Riley"
                        },
                        new
                        {
                            Id = new Guid("6e9d8329-afdf-41c5-b4f1-0b132a4ae1f8"),
                            Name = "Avatar 15",
                            Url = "https://api.dicebear.com/9.x/shapes/svg?seed=Ayaz"
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormatString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sample")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            FormatString = "DD/MM/YYYY",
                            Sample = "31/12/2025"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333334"),
                            FormatString = "MM/DD/YYYY",
                            Sample = "12/31/2025"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333335"),
                            FormatString = "YYYY-MM-DD",
                            Sample = "2025-12-31"
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.FontType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CssValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FontTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CssValue = "'Open Sans', sans-serif",
                            Name = "Open Sans"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            CssValue = "Georgia, serif",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            CssValue = "'Montserrat', sans-serif",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            CssValue = "'Playfair Display', serif",
                            Name = "Playfair Display"
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CultureCode = "tr-TR",
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            CultureCode = "en-US",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222224"),
                            CultureCode = "de-DE",
                            Name = "Deutsch"
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.SystemSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveSessionLimit")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DateFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableAnimations")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FontTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleMapsApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LocationTracking")
                        .HasColumnType("bit");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("ThemeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("FontTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            ActiveSessionLimit = 0,
                            AvatarUrl = "https://api.dicebear.com/9.x/adventurer/svg?seed=Easton",
                            DarkMode = false,
                            DateFormatId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmailNotifications = true,
                            EnableAnimations = true,
                            FontTypeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            GoogleMapsApiKey = "",
                            LanguageId = new Guid("22222222-2222-2222-2222-222222222222"),
                            LocationTracking = false,
                            PushNotifications = true,
                            SessionTimeout = 0,
                            SmsNotifications = false,
                            ThemeColor = "#2ba86d",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.ThemeColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ThemeColors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba60634-3355-45f6-b41c-35acab2690bd"),
                            Name = "Orijinal",
                            Value = "#2ba86d"
                        },
                        new
                        {
                            Id = new Guid("bb5e61aa-ecd6-4c9b-8dde-e31141754128"),
                            Name = "Mavi",
                            Value = "#3B82F6"
                        },
                        new
                        {
                            Id = new Guid("8db7d2ab-469d-4102-8d46-9c7c44e96c69"),
                            Name = "Kırmızı",
                            Value = "#EF4444"
                        },
                        new
                        {
                            Id = new Guid("40ff0e18-2cf0-40ed-bd84-a5f2102a8a25"),
                            Name = "Mor",
                            Value = "#8B5CF6"
                        },
                        new
                        {
                            Id = new Guid("c111b3a5-785d-4b1a-8c5f-a9d610a7b77f"),
                            Name = "Pembe",
                            Value = "#EC4899"
                        },
                        new
                        {
                            Id = new Guid("a1feda7f-6cb1-44dc-a0c2-13ecf1a58b22"),
                            Name = "Sarı",
                            Value = "#F59E0B"
                        },
                        new
                        {
                            Id = new Guid("00c75b32-92ac-472d-9ee9-6e62f1b322d4"),
                            Name = "Turkuaz",
                            Value = "#06B6D4"
                        },
                        new
                        {
                            Id = new Guid("fc01088f-e866-4c4d-8cbb-1e8f01f35f39"),
                            Name = "Indigo",
                            Value = "#6366F1"
                        },
                        new
                        {
                            Id = new Guid("46de22db-6ac2-498d-9ac6-c163b687618d"),
                            Name = "Lime",
                            Value = "#84CC16"
                        },
                        new
                        {
                            Id = new Guid("06f59e97-0966-4b25-a42b-eee16ab7b443"),
                            Name = "Gri",
                            Value = "#6B7280"
                        },
                        new
                        {
                            Id = new Guid("cfe022ca-f0e7-43f9-aaa0-a5607ba18381"),
                            Name = "Turuncu",
                            Value = "#F97316"
                        },
                        new
                        {
                            Id = new Guid("5b70c0a0-f29d-44bc-8445-f889b7e53d42"),
                            Name = "Teal",
                            Value = "#14B8A6"
                        });
                });

            modelBuilder.Entity("EcoRoute.Settings.Entities.SystemSetting", b =>
                {
                    b.HasOne("EcoRoute.Settings.Entities.DateFormat", "DateFormat")
                        .WithMany()
                        .HasForeignKey("DateFormatId");

                    b.HasOne("EcoRoute.Settings.Entities.FontType", "FontType")
                        .WithMany()
                        .HasForeignKey("FontTypeId");

                    b.HasOne("EcoRoute.Settings.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("DateFormat");

                    b.Navigation("FontType");

                    b.Navigation("Language");
                });
#pragma warning restore 612, 618
        }
    }
}
