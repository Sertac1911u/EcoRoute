// <auto-generated />
using System;
using EcoRoute.DataCollection.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoRoute.DataCollection.Migrations
{
    [DbContext(typeof(DataCollectionContext))]
    [Migration("20250312135344_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.BinLog", b =>
                {
                    b.Property<Guid>("BinLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FillLevel")
                        .HasColumnType("float");

                    b.Property<Guid>("WasteBinId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BinLogId");

                    b.HasIndex("WasteBinId");

                    b.ToTable("BinLogs");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.EnvLog", b =>
                {
                    b.Property<Guid>("EnvLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EnvLogId");

                    b.HasIndex("SensorId");

                    b.ToTable("EnvLogs");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.ProcessData", b =>
                {
                    b.Property<Guid>("ProcessDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AverageFillLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WasteBinId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProcessDataId");

                    b.HasIndex("WasteBinId");

                    b.ToTable("ProcessDatas");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.Sensor", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WasteBinId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SensorId");

                    b.HasIndex("WasteBinId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.WasteBin", b =>
                {
                    b.Property<Guid>("WasteBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Location")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WasteBinId");

                    b.ToTable("WasteBins");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.BinLog", b =>
                {
                    b.HasOne("EcoRoute.DataCollection.Entities.WasteBin", "WasteBin")
                        .WithMany("BinLogs")
                        .HasForeignKey("WasteBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WasteBin");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.EnvLog", b =>
                {
                    b.HasOne("EcoRoute.DataCollection.Entities.Sensor", "Sensor")
                        .WithMany("EnvLogs")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.ProcessData", b =>
                {
                    b.HasOne("EcoRoute.DataCollection.Entities.WasteBin", "WasteBin")
                        .WithMany("ProcessData")
                        .HasForeignKey("WasteBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WasteBin");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.Sensor", b =>
                {
                    b.HasOne("EcoRoute.DataCollection.Entities.WasteBin", "WasteBin")
                        .WithMany("Sensors")
                        .HasForeignKey("WasteBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WasteBin");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.Sensor", b =>
                {
                    b.Navigation("EnvLogs");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.WasteBin", b =>
                {
                    b.Navigation("BinLogs");

                    b.Navigation("ProcessData");

                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
