// <auto-generated />
using System;
using EcoRoute.DataCollection.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoRoute.DataCollection.Migrations
{
    [DbContext(typeof(DataCollectionContext))]
    partial class DataCollectionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.Sensor", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SensorNumber")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WasteBinId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SensorId");

                    b.HasIndex("WasteBinId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.WasteBin", b =>
                {
                    b.Property<Guid>("WasteBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FillLevel")
                        .HasColumnType("float");

                    b.Property<bool?>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("SensorCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("estimatedFillLevel")
                        .HasColumnType("float");

                    b.HasKey("WasteBinId");

                    b.ToTable("WasteBins");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.Sensor", b =>
                {
                    b.HasOne("EcoRoute.DataCollection.Entities.WasteBin", "WasteBin")
                        .WithMany("Sensors")
                        .HasForeignKey("WasteBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WasteBin");
                });

            modelBuilder.Entity("EcoRoute.DataCollection.Entities.WasteBin", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
