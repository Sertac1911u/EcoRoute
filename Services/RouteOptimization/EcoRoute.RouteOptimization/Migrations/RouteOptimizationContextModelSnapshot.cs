// <auto-generated />
using System;
using EcoRoute.RouteOptimization.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoRoute.RouteOptimization.Migrations
{
    [DbContext(typeof(RouteOptimizationContext))]
    partial class RouteOptimizationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.MyRoute", b =>
                {
                    b.Property<Guid>("MyRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedDriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatedFuelConsumption")
                        .HasColumnType("float");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MyRouteId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.RouteOptimizationResult", b =>
                {
                    b.Property<Guid>("RouteOptimizationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EstimatedTravelTime")
                        .HasColumnType("time");

                    b.Property<string>("OptimizedPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("float");

                    b.HasKey("RouteOptimizationResultId");

                    b.HasIndex("RouteId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.Waypoint", b =>
                {
                    b.Property<Guid>("WaypointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("WaypointId");

                    b.HasIndex("RouteId");

                    b.ToTable("Waypoints");
                });

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.RouteOptimizationResult", b =>
                {
                    b.HasOne("EcoRoute.RouteOptimization.Entities.MyRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.Waypoint", b =>
                {
                    b.HasOne("EcoRoute.RouteOptimization.Entities.MyRoute", "Route")
                        .WithMany("Waypoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("EcoRoute.RouteOptimization.Entities.MyRoute", b =>
                {
                    b.Navigation("Waypoints");
                });
#pragma warning restore 612, 618
        }
    }
}
